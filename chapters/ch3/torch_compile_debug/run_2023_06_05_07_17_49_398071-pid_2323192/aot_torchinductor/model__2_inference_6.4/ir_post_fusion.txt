buf0: ExternKernelSchedulerNode(Convolution)
buf0.writes = [StarDep(name='buf0')]
buf0.unmet_dependencies = []
buf0.met_dependencies = [StarDep(name='arg0_1'), StarDep(name='arg1_1'), StarDep(name='arg8_1')]
buf0.node.kernel = aten.convolution


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = [MemoryDep(name='buf1', index=c0, size=(100352,))]
buf1.unmet_dependencies = 
    [   MemoryDep(name='buf0', index=56*c0 + 2*c1 + 1, size=(7168, 14)),
        MemoryDep(name='buf0', index=56*c0 + 2*c1 + 28, size=(7168, 14)),
        MemoryDep(name='buf0', index=56*c0 + 2*c1 + 29, size=(7168, 14)),
        MemoryDep(name='buf0', index=56*c0 + 2*c1, size=(7168, 14))]
buf1.met_dependencies = []
buf1.group.device = cpu
buf1.group.iteration = ((7168, 14), ())
buf1.sizes = ([7168, 14], [])
class buf1_loop_body:
    var_ranges = {z0: 7168, z1: 14}
    index0 = 56*z0 + 2*z1
    index1 = 56*z0 + 2*z1 + 1
    index2 = 56*z0 + 2*z1 + 28
    index3 = 56*z0 + 2*z1 + 29
    index4 = 14*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf0', get_index_1)
        relu_1 = ops.relu(load_1)
        maximum = ops.maximum(relu_1, relu)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf0', get_index_2)
        relu_2 = ops.relu(load_2)
        maximum_1 = ops.maximum(relu_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf0', get_index_3)
        relu_3 = ops.relu(load_3)
        maximum_2 = ops.maximum(relu_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf1', get_index_4, maximum_2, None)
        return store


buf2: ExternKernelSchedulerNode(Convolution)
buf2.writes = [StarDep(name='buf2')]
buf2.unmet_dependencies = [StarDep(name='buf1')]
buf2.met_dependencies = [StarDep(name='arg2_1'), StarDep(name='arg3_1')]
buf2.node.kernel = aten.convolution


buf3: SchedulerNode(ComputedBuffer)
buf3.writes = [MemoryDep(name='buf3', index=c0, size=(50176,))]
buf3.unmet_dependencies = 
    [   MemoryDep(name='buf2', index=28*c0 + 2*c1 + 1, size=(7168, 7)),
        MemoryDep(name='buf2', index=28*c0 + 2*c1 + 14, size=(7168, 7)),
        MemoryDep(name='buf2', index=28*c0 + 2*c1 + 15, size=(7168, 7)),
        MemoryDep(name='buf2', index=28*c0 + 2*c1, size=(7168, 7))]
buf3.met_dependencies = []
buf3.group.device = cpu
buf3.group.iteration = ((7168, 7), ())
buf3.sizes = ([7168, 7], [])
class buf3_loop_body:
    var_ranges = {z0: 7168, z1: 7}
    index0 = 28*z0 + 2*z1
    index1 = 28*z0 + 2*z1 + 1
    index2 = 28*z0 + 2*z1 + 14
    index3 = 28*z0 + 2*z1 + 15
    index4 = 7*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        relu_1 = ops.relu(load_1)
        maximum = ops.maximum(relu_1, relu)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf2', get_index_2)
        relu_2 = ops.relu(load_2)
        maximum_1 = ops.maximum(relu_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf2', get_index_3)
        relu_3 = ops.relu(load_3)
        maximum_2 = ops.maximum(relu_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf3', get_index_4, maximum_2, None)
        return store


buf4: ExternKernelSchedulerNode(ExternKernelOut)
buf4.writes = [StarDep(name='buf4')]
buf4.unmet_dependencies = [StarDep(name='buf3')]
buf4.met_dependencies = [StarDep(name='arg4_1'), StarDep(name='arg5_1')]
buf4.node.kernel = extern_kernels.addmm


buf5: ExternKernelSchedulerNode(ExternKernelOut)
buf5.writes = [StarDep(name='buf5')]
buf5.unmet_dependencies = [StarDep(name='buf4')]
buf5.met_dependencies = [StarDep(name='arg6_1'), StarDep(name='arg7_1')]
buf5.node.kernel = extern_kernels.addmm


