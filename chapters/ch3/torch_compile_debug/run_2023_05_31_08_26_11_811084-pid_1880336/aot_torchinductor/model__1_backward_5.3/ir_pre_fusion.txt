buf0: SchedulerNode(ComputedBuffer)
buf0.writes = 
    [   MemoryDep(name='buf0', index=c0, size=(512, 8)),
        MemoryDep(name='buf0', index=c0, size=(512,))]
buf0.unmet_dependencies = []
buf0.met_dependencies = [MemoryDep(name='convolution_44', index=c0 + 512*c1, size=(512, 8))]
buf0.group.device = cpu
buf0.group.iteration = ((512,), (8,))
buf0.sizes = ([512], [8])
class buf0_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_44', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf0', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = [MemoryDep(name='buf1', index=c0, size=(512,))]
buf1.unmet_dependencies = [MemoryDep(name='buf0', index=c0, size=(512,))]
buf1.met_dependencies = []
buf1.group.device = cpu
buf1.group.iteration = ((512,), ())
buf1.sizes = ([512], [])
class buf1_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1', get_index_1, div, None)
        return store


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = 
    [   MemoryDep(name='buf2', index=c0, size=(512, 8)),
        MemoryDep(name='buf2', index=c0, size=(512,))]
buf2.unmet_dependencies = [MemoryDep(name='buf1', index=c0, size=(512, 8))]
buf2.met_dependencies = [MemoryDep(name='convolution_44', index=c0 + 512*c1, size=(512, 8))]
buf2.group.device = cpu
buf2.group.iteration = ((512,), (8,))
buf2.sizes = ([512], [8])
class buf2_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf2', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf3: SchedulerNode(ComputedBuffer)
buf3.writes = 
    [   MemoryDep(name='buf3', index=c0, size=(2048, 8)),
        MemoryDep(name='buf3', index=c0, size=(2048,))]
buf3.unmet_dependencies = []
buf3.met_dependencies = [MemoryDep(name='convolution_45', index=c0 + 2048*c1, size=(2048, 8))]
buf3.group.device = cpu
buf3.group.iteration = ((2048,), (8,))
buf3.sizes = ([2048], [8])
class buf3_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_45', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf3', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf4: SchedulerNode(ComputedBuffer)
buf4.writes = [MemoryDep(name='buf4', index=c0, size=(2048,))]
buf4.unmet_dependencies = [MemoryDep(name='buf3', index=c0, size=(2048,))]
buf4.met_dependencies = []
buf4.group.device = cpu
buf4.group.iteration = ((2048,), ())
buf4.sizes = ([2048], [])
class buf4_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf4', get_index_1, div, None)
        return store


buf5: SchedulerNode(ComputedBuffer)
buf5.writes = 
    [   MemoryDep(name='buf5', index=c0, size=(2048, 8)),
        MemoryDep(name='buf5', index=c0, size=(2048,))]
buf5.unmet_dependencies = [MemoryDep(name='buf4', index=c0, size=(2048, 8))]
buf5.met_dependencies = [MemoryDep(name='convolution_45', index=c0 + 2048*c1, size=(2048, 8))]
buf5.group.device = cpu
buf5.group.iteration = ((2048,), (8,))
buf5.sizes = ([2048], [8])
class buf5_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_45', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf4', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf5', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf6: SchedulerNode(ComputedBuffer)
buf6.writes = 
    [   MemoryDep(name='buf6', index=c0, size=(2048, 8)),
        MemoryDep(name='buf6', index=c0, size=(2048,))]
buf6.unmet_dependencies = []
buf6.met_dependencies = [MemoryDep(name='convolution_46', index=c0 + 2048*c1, size=(2048, 8))]
buf6.group.device = cpu
buf6.group.iteration = ((2048,), (8,))
buf6.sizes = ([2048], [8])
class buf6_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_46', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf6', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf7: SchedulerNode(ComputedBuffer)
buf7.writes = [MemoryDep(name='buf7', index=c0, size=(2048,))]
buf7.unmet_dependencies = [MemoryDep(name='buf6', index=c0, size=(2048,))]
buf7.met_dependencies = []
buf7.group.device = cpu
buf7.group.iteration = ((2048,), ())
buf7.sizes = ([2048], [])
class buf7_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf7', get_index_1, div, None)
        return store


buf8: SchedulerNode(ComputedBuffer)
buf8.writes = 
    [   MemoryDep(name='buf8', index=c0, size=(2048, 8)),
        MemoryDep(name='buf8', index=c0, size=(2048,))]
buf8.unmet_dependencies = [MemoryDep(name='buf7', index=c0, size=(2048, 8))]
buf8.met_dependencies = [MemoryDep(name='convolution_46', index=c0 + 2048*c1, size=(2048, 8))]
buf8.group.device = cpu
buf8.group.iteration = ((2048,), (8,))
buf8.sizes = ([2048], [8])
class buf8_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf7', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf8', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf9: SchedulerNode(ComputedBuffer)
buf9.writes = 
    [   MemoryDep(name='buf9', index=c0, size=(512, 8)),
        MemoryDep(name='buf9', index=c0, size=(512,))]
buf9.unmet_dependencies = []
buf9.met_dependencies = [MemoryDep(name='convolution_47', index=c0 + 512*c1, size=(512, 8))]
buf9.group.device = cpu
buf9.group.iteration = ((512,), (8,))
buf9.sizes = ([512], [8])
class buf9_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_47', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf9', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf10: SchedulerNode(ComputedBuffer)
buf10.writes = [MemoryDep(name='buf10', index=c0, size=(512,))]
buf10.unmet_dependencies = [MemoryDep(name='buf9', index=c0, size=(512,))]
buf10.met_dependencies = []
buf10.group.device = cpu
buf10.group.iteration = ((512,), ())
buf10.sizes = ([512], [])
class buf10_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf10', get_index_1, div, None)
        return store


buf11: SchedulerNode(ComputedBuffer)
buf11.writes = 
    [   MemoryDep(name='buf11', index=c0, size=(512, 8)),
        MemoryDep(name='buf11', index=c0, size=(512,))]
buf11.unmet_dependencies = [MemoryDep(name='buf10', index=c0, size=(512, 8))]
buf11.met_dependencies = [MemoryDep(name='convolution_47', index=c0 + 512*c1, size=(512, 8))]
buf11.group.device = cpu
buf11.group.iteration = ((512,), (8,))
buf11.sizes = ([512], [8])
class buf11_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf10', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf11', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf12: SchedulerNode(ComputedBuffer)
buf12.writes = 
    [   MemoryDep(name='buf12', index=c0, size=(512, 8)),
        MemoryDep(name='buf12', index=c0, size=(512,))]
buf12.unmet_dependencies = []
buf12.met_dependencies = [MemoryDep(name='convolution_48', index=c0 + 512*c1, size=(512, 8))]
buf12.group.device = cpu
buf12.group.iteration = ((512,), (8,))
buf12.sizes = ([512], [8])
class buf12_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_48', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf12', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf13: SchedulerNode(ComputedBuffer)
buf13.writes = [MemoryDep(name='buf13', index=c0, size=(512,))]
buf13.unmet_dependencies = [MemoryDep(name='buf12', index=c0, size=(512,))]
buf13.met_dependencies = []
buf13.group.device = cpu
buf13.group.iteration = ((512,), ())
buf13.sizes = ([512], [])
class buf13_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf13', get_index_1, div, None)
        return store


buf14: SchedulerNode(ComputedBuffer)
buf14.writes = 
    [   MemoryDep(name='buf14', index=c0, size=(512, 8)),
        MemoryDep(name='buf14', index=c0, size=(512,))]
buf14.unmet_dependencies = [MemoryDep(name='buf13', index=c0, size=(512, 8))]
buf14.met_dependencies = [MemoryDep(name='convolution_48', index=c0 + 512*c1, size=(512, 8))]
buf14.group.device = cpu
buf14.group.iteration = ((512,), (8,))
buf14.sizes = ([512], [8])
class buf14_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_48', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf13', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf14', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf15: SchedulerNode(ComputedBuffer)
buf15.writes = 
    [   MemoryDep(name='buf15', index=c0, size=(2048, 8)),
        MemoryDep(name='buf15', index=c0, size=(2048,))]
buf15.unmet_dependencies = []
buf15.met_dependencies = [MemoryDep(name='convolution_49', index=c0 + 2048*c1, size=(2048, 8))]
buf15.group.device = cpu
buf15.group.iteration = ((2048,), (8,))
buf15.sizes = ([2048], [8])
class buf15_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_49', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf15', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf16: SchedulerNode(ComputedBuffer)
buf16.writes = [MemoryDep(name='buf16', index=c0, size=(2048,))]
buf16.unmet_dependencies = [MemoryDep(name='buf15', index=c0, size=(2048,))]
buf16.met_dependencies = []
buf16.group.device = cpu
buf16.group.iteration = ((2048,), ())
buf16.sizes = ([2048], [])
class buf16_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf16', get_index_1, div, None)
        return store


buf17: SchedulerNode(ComputedBuffer)
buf17.writes = 
    [   MemoryDep(name='buf17', index=c0, size=(2048, 8)),
        MemoryDep(name='buf17', index=c0, size=(2048,))]
buf17.unmet_dependencies = [MemoryDep(name='buf16', index=c0, size=(2048, 8))]
buf17.met_dependencies = [MemoryDep(name='convolution_49', index=c0 + 2048*c1, size=(2048, 8))]
buf17.group.device = cpu
buf17.group.iteration = ((2048,), (8,))
buf17.sizes = ([2048], [8])
class buf17_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf16', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf17', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf18: SchedulerNode(ComputedBuffer)
buf18.writes = 
    [   MemoryDep(name='buf18', index=c0, size=(512, 8)),
        MemoryDep(name='buf18', index=c0, size=(512,))]
buf18.unmet_dependencies = []
buf18.met_dependencies = [MemoryDep(name='convolution_50', index=c0 + 512*c1, size=(512, 8))]
buf18.group.device = cpu
buf18.group.iteration = ((512,), (8,))
buf18.sizes = ([512], [8])
class buf18_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_50', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf18', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf19: SchedulerNode(ComputedBuffer)
buf19.writes = [MemoryDep(name='buf19', index=c0, size=(512,))]
buf19.unmet_dependencies = [MemoryDep(name='buf18', index=c0, size=(512,))]
buf19.met_dependencies = []
buf19.group.device = cpu
buf19.group.iteration = ((512,), ())
buf19.sizes = ([512], [])
class buf19_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf19', get_index_1, div, None)
        return store


buf20: SchedulerNode(ComputedBuffer)
buf20.writes = 
    [   MemoryDep(name='buf20', index=c0, size=(512, 8)),
        MemoryDep(name='buf20', index=c0, size=(512,))]
buf20.unmet_dependencies = [MemoryDep(name='buf19', index=c0, size=(512, 8))]
buf20.met_dependencies = [MemoryDep(name='convolution_50', index=c0 + 512*c1, size=(512, 8))]
buf20.group.device = cpu
buf20.group.iteration = ((512,), (8,))
buf20.sizes = ([512], [8])
class buf20_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf19', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf20', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf21: SchedulerNode(ComputedBuffer)
buf21.writes = 
    [   MemoryDep(name='buf21', index=c0, size=(512, 8)),
        MemoryDep(name='buf21', index=c0, size=(512,))]
buf21.unmet_dependencies = []
buf21.met_dependencies = [MemoryDep(name='convolution_51', index=c0 + 512*c1, size=(512, 8))]
buf21.group.device = cpu
buf21.group.iteration = ((512,), (8,))
buf21.sizes = ([512], [8])
class buf21_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_51', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf21', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf22: SchedulerNode(ComputedBuffer)
buf22.writes = [MemoryDep(name='buf22', index=c0, size=(512,))]
buf22.unmet_dependencies = [MemoryDep(name='buf21', index=c0, size=(512,))]
buf22.met_dependencies = []
buf22.group.device = cpu
buf22.group.iteration = ((512,), ())
buf22.sizes = ([512], [])
class buf22_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf22', get_index_1, div, None)
        return store


buf23: SchedulerNode(ComputedBuffer)
buf23.writes = 
    [   MemoryDep(name='buf23', index=c0, size=(512, 8)),
        MemoryDep(name='buf23', index=c0, size=(512,))]
buf23.unmet_dependencies = [MemoryDep(name='buf22', index=c0, size=(512, 8))]
buf23.met_dependencies = [MemoryDep(name='convolution_51', index=c0 + 512*c1, size=(512, 8))]
buf23.group.device = cpu
buf23.group.iteration = ((512,), (8,))
buf23.sizes = ([512], [8])
class buf23_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_51', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf22', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf23', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf24: SchedulerNode(ComputedBuffer)
buf24.writes = 
    [   MemoryDep(name='buf24', index=c0, size=(2048, 8)),
        MemoryDep(name='buf24', index=c0, size=(2048,))]
buf24.unmet_dependencies = []
buf24.met_dependencies = [MemoryDep(name='convolution_52', index=c0 + 2048*c1, size=(2048, 8))]
buf24.group.device = cpu
buf24.group.iteration = ((2048,), (8,))
buf24.sizes = ([2048], [8])
class buf24_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_52', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf24', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf25: SchedulerNode(ComputedBuffer)
buf25.writes = [MemoryDep(name='buf25', index=c0, size=(2048,))]
buf25.unmet_dependencies = [MemoryDep(name='buf24', index=c0, size=(2048,))]
buf25.met_dependencies = []
buf25.group.device = cpu
buf25.group.iteration = ((2048,), ())
buf25.sizes = ([2048], [])
class buf25_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf25', get_index_1, div, None)
        return store


buf26: SchedulerNode(ComputedBuffer)
buf26.writes = 
    [   MemoryDep(name='buf26', index=c0, size=(2048, 8)),
        MemoryDep(name='buf26', index=c0, size=(2048,))]
buf26.unmet_dependencies = [MemoryDep(name='buf25', index=c0, size=(2048, 8))]
buf26.met_dependencies = [MemoryDep(name='convolution_52', index=c0 + 2048*c1, size=(2048, 8))]
buf26.group.device = cpu
buf26.group.iteration = ((2048,), (8,))
buf26.sizes = ([2048], [8])
class buf26_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_52', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf25', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf26', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf27: ExternKernelSchedulerNode(ExternKernelOut)
buf27.writes = [StarDep(name='buf27')]
buf27.unmet_dependencies = []
buf27.met_dependencies = [StarDep(name='permute_1'), StarDep(name='tangents_160')]
buf27.node.kernel = extern_kernels.mm


buf28: ExternKernelSchedulerNode(ExternKernelOut)
buf28.writes = [StarDep(name='buf28')]
buf28.unmet_dependencies = []
buf28.met_dependencies = [StarDep(name='tangents_160'), StarDep(name='view')]
buf28.node.kernel = extern_kernels.mm


buf29: SchedulerNode(ComputedBuffer)
buf29.writes = 
    [   MemoryDep(name='buf29', index=c0, size=(1000, 8)),
        MemoryDep(name='buf29', index=c0, size=(1000,))]
buf29.unmet_dependencies = []
buf29.met_dependencies = [MemoryDep(name='tangents_160', index=c0 + 1000*c1, size=(1000, 8))]
buf29.group.device = cpu
buf29.group.iteration = ((1000,), (8,))
buf29.sizes = ([1000], [8])
class buf29_loop_body:
    var_ranges = {z0: 1000, z1: 8}
    index0 = z0 + 1000*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_160', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf29', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf30: SchedulerNode(ComputedBuffer)
buf30.writes = 
    [   MemoryDep(name='buf30', index=c0, size=(2048, 8)),
        MemoryDep(name='buf30', index=c0, size=(2048,))]
buf30.unmet_dependencies = [MemoryDep(name='buf27', index=c0 + 2048*c1, size=(2048, 8))]
buf30.met_dependencies = [MemoryDep(name='le', index=c0 + 2048*c1, size=(2048, 8))]
buf30.group.device = cpu
buf30.group.iteration = ((2048,), (8,))
buf30.sizes = ([2048], [8])
class buf30_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('le', get_index)
        constant = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf27', get_index_1)
        constant_1 = ops.constant(1, torch.float32)
        div = ops.div(load_1, constant_1)
        where = ops.where(load, constant, div)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf30', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf31: SchedulerNode(ComputedBuffer)
buf31.writes = 
    [   MemoryDep(name='buf31', index=c0, size=(2048, 8)),
        MemoryDep(name='buf31', index=c0, size=(2048,))]
buf31.unmet_dependencies = 
    [   MemoryDep(name='buf25', index=c0, size=(2048, 8)),
        MemoryDep(name='buf27', index=c0 + 2048*c1, size=(2048, 8))]
buf31.met_dependencies = 
    [   MemoryDep(name='convolution_52', index=c0 + 2048*c1, size=(2048, 8)),
        MemoryDep(name='le', index=c0 + 2048*c1, size=(2048, 8))]
buf31.group.device = cpu
buf31.group.iteration = ((2048,), (8,))
buf31.sizes = ([2048], [8])
class buf31_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('le', get_index)
        constant = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf27', get_index_1)
        constant_1 = ops.constant(1, torch.float32)
        div = ops.div(load_1, constant_1)
        where = ops.where(load, constant, div)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_52', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf25', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf31', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf32: SchedulerNode(ComputedBuffer)
buf32.writes = [MemoryDep(name='buf32', index=c0, size=(2048,))]
buf32.unmet_dependencies = 
    [   MemoryDep(name='buf26', index=c0, size=(2048,)),
        MemoryDep(name='buf31', index=c0, size=(2048,))]
buf32.met_dependencies = []
buf32.group.device = cpu
buf32.group.iteration = ((2048,), ())
buf32.sizes = ([2048], [])
class buf32_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf26', get_index_1)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load, rsqrt)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf32', get_index_2, mul, None)
        return store


buf33: SchedulerNode(ComputedBuffer)
buf33.writes = [MemoryDep(name='buf33', index=c0, size=(16384,))]
buf33.unmet_dependencies = 
    [   MemoryDep(name='buf25', index=c1, size=(8, 2048)),
        MemoryDep(name='buf26', index=c1, size=(8, 2048)),
        MemoryDep(name='buf27', index=c0, size=(16384,)),
        MemoryDep(name='buf30', index=c1, size=(8, 2048)),
        MemoryDep(name='buf31', index=c1, size=(8, 2048))]
buf33.met_dependencies = 
    [   MemoryDep(name='convolution_52', index=c0, size=(16384,)),
        MemoryDep(name='le', index=c0, size=(16384,)),
        MemoryDep(name='primals_158', index=c1, size=(8, 2048))]
buf33.group.device = cpu
buf33.group.iteration = ((8, 2048), ())
buf33.sizes = ([8, 2048], [])
class buf33_loop_body:
    var_ranges = {z0: 8, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('le', get_index)
        constant = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf27', get_index_1)
        constant_1 = ops.constant(1, torch.float32)
        div = ops.div(load_1, constant_1)
        where = ops.where(load, constant, div)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_52', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf25', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf31', get_index_4)
        constant_2 = ops.constant(0.125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf26', get_index_5)
        constant_3 = ops.constant(8, torch.float32)
        div_1 = ops.div(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add = ops.add(div_1, constant_4)
        rsqrt = ops.rsqrt(add)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf26', get_index_6)
        constant_5 = ops.constant(8, torch.float32)
        div_2 = ops.div(load_6, constant_5)
        constant_6 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(div_2, constant_6)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_1 = ops.mul(rsqrt, rsqrt_1)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf30', get_index_7)
        constant_7 = ops.constant(0.125, torch.float32)
        mul_4 = ops.mul(load_7, constant_7)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf26', get_index_8)
        constant_8 = ops.constant(8, torch.float32)
        div_3 = ops.div(load_8, constant_8)
        constant_9 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_3, constant_9)
        rsqrt_2 = ops.rsqrt(add_2)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_158', get_index_9)
        mul_5 = ops.mul(rsqrt_2, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf33', get_index_10, mul_6, None)
        return store


buf34: ExternKernelSchedulerNode(FallbackKernel)
buf34.writes = [StarDep(name='buf34')]
buf34.unmet_dependencies = [StarDep(name='buf33')]
buf34.met_dependencies = [StarDep(name='primals_157'), StarDep(name='relu_47')]
buf34.node.kernel = aten.convolution_backward


buf35: ExternKernelSchedulerNode(MultiOutput)
buf35.writes = [StarDep(name='buf35')]
buf35.unmet_dependencies = [StarDep(name='buf34')]
buf35.met_dependencies = []
buf35.node.kernel = None


buf36: ExternKernelSchedulerNode(MultiOutput)
buf36.writes = [StarDep(name='buf36')]
buf36.unmet_dependencies = [StarDep(name='buf34')]
buf36.met_dependencies = []
buf36.node.kernel = None


buf37: SchedulerNode(ComputedBuffer)
buf37.writes = 
    [   MemoryDep(name='buf37', index=c0, size=(512, 8)),
        MemoryDep(name='buf37', index=c0, size=(512,))]
buf37.unmet_dependencies = [MemoryDep(name='buf35', index=c0 + 512*c1, size=(512, 8))]
buf37.met_dependencies = [MemoryDep(name='relu_47', index=c0 + 512*c1, size=(512, 8))]
buf37.group.device = cpu
buf37.group.iteration = ((512,), (8,))
buf37.sizes = ([512], [8])
class buf37_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_47', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf35', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf37', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf38: SchedulerNode(ComputedBuffer)
buf38.writes = 
    [   MemoryDep(name='buf38', index=c0, size=(512, 8)),
        MemoryDep(name='buf38', index=c0, size=(512,))]
buf38.unmet_dependencies = 
    [   MemoryDep(name='buf22', index=c0, size=(512, 8)),
        MemoryDep(name='buf35', index=c0 + 512*c1, size=(512, 8))]
buf38.met_dependencies = 
    [   MemoryDep(name='convolution_51', index=c0 + 512*c1, size=(512, 8)),
        MemoryDep(name='relu_47', index=c0 + 512*c1, size=(512, 8))]
buf38.group.device = cpu
buf38.group.iteration = ((512,), (8,))
buf38.sizes = ([512], [8])
class buf38_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_47', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf35', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_51', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf22', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf38', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf39: SchedulerNode(ComputedBuffer)
buf39.writes = [MemoryDep(name='buf39', index=c0, size=(512,))]
buf39.unmet_dependencies = 
    [   MemoryDep(name='buf23', index=c0, size=(512,)),
        MemoryDep(name='buf38', index=c0, size=(512,))]
buf39.met_dependencies = []
buf39.group.device = cpu
buf39.group.iteration = ((512,), ())
buf39.sizes = ([512], [])
class buf39_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf23', get_index_1)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load, rsqrt)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf39', get_index_2, mul, None)
        return store


buf40: SchedulerNode(ComputedBuffer)
buf40.writes = [MemoryDep(name='buf40', index=c0, size=(4096,))]
buf40.unmet_dependencies = 
    [   MemoryDep(name='buf22', index=c1, size=(8, 512)),
        MemoryDep(name='buf23', index=c1, size=(8, 512)),
        MemoryDep(name='buf35', index=c0, size=(4096,)),
        MemoryDep(name='buf37', index=c1, size=(8, 512)),
        MemoryDep(name='buf38', index=c1, size=(8, 512))]
buf40.met_dependencies = 
    [   MemoryDep(name='convolution_51', index=c0, size=(4096,)),
        MemoryDep(name='primals_155', index=c1, size=(8, 512)),
        MemoryDep(name='relu_47', index=c0, size=(4096,))]
buf40.group.device = cpu
buf40.group.iteration = ((8, 512), ())
buf40.sizes = ([8, 512], [])
class buf40_loop_body:
    var_ranges = {z0: 8, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_47', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf35', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_51', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf22', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf38', get_index_4)
        constant_2 = ops.constant(0.125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf23', get_index_5)
        constant_3 = ops.constant(8, torch.float32)
        div = ops.div(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_4)
        rsqrt = ops.rsqrt(add)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf23', get_index_6)
        constant_5 = ops.constant(8, torch.float32)
        div_1 = ops.div(load_6, constant_5)
        constant_6 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(div_1, constant_6)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_1 = ops.mul(rsqrt, rsqrt_1)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf37', get_index_7)
        constant_7 = ops.constant(0.125, torch.float32)
        mul_4 = ops.mul(load_7, constant_7)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf23', get_index_8)
        constant_8 = ops.constant(8, torch.float32)
        div_2 = ops.div(load_8, constant_8)
        constant_9 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_2, constant_9)
        rsqrt_2 = ops.rsqrt(add_2)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_155', get_index_9)
        mul_5 = ops.mul(rsqrt_2, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf40', get_index_10, mul_6, None)
        return store


buf41: ExternKernelSchedulerNode(FallbackKernel)
buf41.writes = [StarDep(name='buf41')]
buf41.unmet_dependencies = [StarDep(name='buf40')]
buf41.met_dependencies = [StarDep(name='primals_154'), StarDep(name='relu_46')]
buf41.node.kernel = aten.convolution_backward


buf42: ExternKernelSchedulerNode(MultiOutput)
buf42.writes = [StarDep(name='buf42')]
buf42.unmet_dependencies = [StarDep(name='buf41')]
buf42.met_dependencies = []
buf42.node.kernel = None


buf43: ExternKernelSchedulerNode(MultiOutput)
buf43.writes = [StarDep(name='buf43')]
buf43.unmet_dependencies = [StarDep(name='buf41')]
buf43.met_dependencies = []
buf43.node.kernel = None


buf44: SchedulerNode(ComputedBuffer)
buf44.writes = 
    [   MemoryDep(name='buf44', index=c0, size=(512, 8)),
        MemoryDep(name='buf44', index=c0, size=(512,))]
buf44.unmet_dependencies = [MemoryDep(name='buf42', index=c0 + 512*c1, size=(512, 8))]
buf44.met_dependencies = [MemoryDep(name='relu_46', index=c0 + 512*c1, size=(512, 8))]
buf44.group.device = cpu
buf44.group.iteration = ((512,), (8,))
buf44.sizes = ([512], [8])
class buf44_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_46', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf42', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf44', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf45: SchedulerNode(ComputedBuffer)
buf45.writes = 
    [   MemoryDep(name='buf45', index=c0, size=(512, 8)),
        MemoryDep(name='buf45', index=c0, size=(512,))]
buf45.unmet_dependencies = 
    [   MemoryDep(name='buf19', index=c0, size=(512, 8)),
        MemoryDep(name='buf42', index=c0 + 512*c1, size=(512, 8))]
buf45.met_dependencies = 
    [   MemoryDep(name='convolution_50', index=c0 + 512*c1, size=(512, 8)),
        MemoryDep(name='relu_46', index=c0 + 512*c1, size=(512, 8))]
buf45.group.device = cpu
buf45.group.iteration = ((512,), (8,))
buf45.sizes = ([512], [8])
class buf45_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_46', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf42', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_50', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf19', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf45', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf46: SchedulerNode(ComputedBuffer)
buf46.writes = [MemoryDep(name='buf46', index=c0, size=(512,))]
buf46.unmet_dependencies = 
    [   MemoryDep(name='buf20', index=c0, size=(512,)),
        MemoryDep(name='buf45', index=c0, size=(512,))]
buf46.met_dependencies = []
buf46.group.device = cpu
buf46.group.iteration = ((512,), ())
buf46.sizes = ([512], [])
class buf46_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf20', get_index_1)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load, rsqrt)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf46', get_index_2, mul, None)
        return store


buf47: SchedulerNode(ComputedBuffer)
buf47.writes = [MemoryDep(name='buf47', index=c0, size=(4096,))]
buf47.unmet_dependencies = 
    [   MemoryDep(name='buf19', index=c1, size=(8, 512)),
        MemoryDep(name='buf20', index=c1, size=(8, 512)),
        MemoryDep(name='buf42', index=c0, size=(4096,)),
        MemoryDep(name='buf44', index=c1, size=(8, 512)),
        MemoryDep(name='buf45', index=c1, size=(8, 512))]
buf47.met_dependencies = 
    [   MemoryDep(name='convolution_50', index=c0, size=(4096,)),
        MemoryDep(name='primals_152', index=c1, size=(8, 512)),
        MemoryDep(name='relu_46', index=c0, size=(4096,))]
buf47.group.device = cpu
buf47.group.iteration = ((8, 512), ())
buf47.sizes = ([8, 512], [])
class buf47_loop_body:
    var_ranges = {z0: 8, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_46', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf42', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_50', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf19', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf45', get_index_4)
        constant_2 = ops.constant(0.125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf20', get_index_5)
        constant_3 = ops.constant(8, torch.float32)
        div = ops.div(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_4)
        rsqrt = ops.rsqrt(add)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf20', get_index_6)
        constant_5 = ops.constant(8, torch.float32)
        div_1 = ops.div(load_6, constant_5)
        constant_6 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(div_1, constant_6)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_1 = ops.mul(rsqrt, rsqrt_1)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf44', get_index_7)
        constant_7 = ops.constant(0.125, torch.float32)
        mul_4 = ops.mul(load_7, constant_7)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf20', get_index_8)
        constant_8 = ops.constant(8, torch.float32)
        div_2 = ops.div(load_8, constant_8)
        constant_9 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_2, constant_9)
        rsqrt_2 = ops.rsqrt(add_2)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_152', get_index_9)
        mul_5 = ops.mul(rsqrt_2, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf47', get_index_10, mul_6, None)
        return store


buf48: ExternKernelSchedulerNode(FallbackKernel)
buf48.writes = [StarDep(name='buf48')]
buf48.unmet_dependencies = [StarDep(name='buf47')]
buf48.met_dependencies = [StarDep(name='primals_151'), StarDep(name='relu_45')]
buf48.node.kernel = aten.convolution_backward


buf49: ExternKernelSchedulerNode(MultiOutput)
buf49.writes = [StarDep(name='buf49')]
buf49.unmet_dependencies = [StarDep(name='buf48')]
buf49.met_dependencies = []
buf49.node.kernel = None


buf50: ExternKernelSchedulerNode(MultiOutput)
buf50.writes = [StarDep(name='buf50')]
buf50.unmet_dependencies = [StarDep(name='buf48')]
buf50.met_dependencies = []
buf50.node.kernel = None


buf51: SchedulerNode(ComputedBuffer)
buf51.writes = 
    [   MemoryDep(name='buf51', index=c0, size=(2048, 8)),
        MemoryDep(name='buf51', index=c0, size=(2048,))]
buf51.unmet_dependencies = 
    [   MemoryDep(name='buf27', index=c0 + 2048*c1, size=(2048, 8)),
        MemoryDep(name='buf49', index=c0 + 2048*c1, size=(2048, 8))]
buf51.met_dependencies = 
    [   MemoryDep(name='le', index=c0 + 2048*c1, size=(2048, 8)),
        MemoryDep(name='relu_45', index=c0 + 2048*c1, size=(2048, 8))]
buf51.group.device = cpu
buf51.group.iteration = ((2048,), (8,))
buf51.sizes = ([2048], [8])
class buf51_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_45', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('le', get_index_1)
        constant_2 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf27', get_index_2)
        constant_3 = ops.constant(1, torch.float32)
        div = ops.div(load_2, constant_3)
        where = ops.where(load_1, constant_2, div)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf49', get_index_3)
        add = ops.add(where, load_3)
        where_1 = ops.where(le, constant_1, add)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf51', torch.float32, torch.float32, 'sum', get_index_4, where_1)
        return reduction


buf52: SchedulerNode(ComputedBuffer)
buf52.writes = 
    [   MemoryDep(name='buf52', index=c0, size=(2048, 8)),
        MemoryDep(name='buf52', index=c0, size=(2048,))]
buf52.unmet_dependencies = 
    [   MemoryDep(name='buf16', index=c0, size=(2048, 8)),
        MemoryDep(name='buf27', index=c0 + 2048*c1, size=(2048, 8)),
        MemoryDep(name='buf49', index=c0 + 2048*c1, size=(2048, 8))]
buf52.met_dependencies = 
    [   MemoryDep(name='convolution_49', index=c0 + 2048*c1, size=(2048, 8)),
        MemoryDep(name='le', index=c0 + 2048*c1, size=(2048, 8)),
        MemoryDep(name='relu_45', index=c0 + 2048*c1, size=(2048, 8))]
buf52.group.device = cpu
buf52.group.iteration = ((2048,), (8,))
buf52.sizes = ([2048], [8])
class buf52_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_45', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('le', get_index_1)
        constant_2 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf27', get_index_2)
        constant_3 = ops.constant(1, torch.float32)
        div = ops.div(load_2, constant_3)
        where = ops.where(load_1, constant_2, div)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf49', get_index_3)
        add = ops.add(where, load_3)
        where_1 = ops.where(le, constant_1, add)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('convolution_49', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf16', get_index_5)
        sub = ops.sub(load_4, load_5)
        mul = ops.mul(where_1, sub)
        get_index_6 = self.get_index('index1')
        reduction = ops.reduction('buf52', torch.float32, torch.float32, 'sum', get_index_6, mul)
        return reduction


buf53: SchedulerNode(ComputedBuffer)
buf53.writes = [MemoryDep(name='buf53', index=c0, size=(16384,))]
buf53.unmet_dependencies = 
    [   MemoryDep(name='buf16', index=c1, size=(8, 2048)),
        MemoryDep(name='buf17', index=c1, size=(8, 2048)),
        MemoryDep(name='buf27', index=c0, size=(16384,)),
        MemoryDep(name='buf49', index=c0, size=(16384,)),
        MemoryDep(name='buf51', index=c1, size=(8, 2048)),
        MemoryDep(name='buf52', index=c1, size=(8, 2048))]
buf53.met_dependencies = 
    [   MemoryDep(name='convolution_49', index=c0, size=(16384,)),
        MemoryDep(name='le', index=c0, size=(16384,)),
        MemoryDep(name='relu_45', index=c0, size=(16384,))]
buf53.group.device = cpu
buf53.group.iteration = ((8, 2048), ())
buf53.sizes = ([8, 2048], [])
class buf53_loop_body:
    var_ranges = {z0: 8, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_45', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('le', get_index_1)
        constant_2 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf27', get_index_2)
        constant_3 = ops.constant(1, torch.float32)
        div = ops.div(load_2, constant_3)
        where = ops.where(load_1, constant_2, div)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf49', get_index_3)
        add = ops.add(where, load_3)
        where_1 = ops.where(le, constant_1, add)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('convolution_49', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf16', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf52', get_index_6)
        constant_4 = ops.constant(0.125, torch.float32)
        mul = ops.mul(load_6, constant_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf17', get_index_7)
        constant_5 = ops.constant(8, torch.float32)
        div_1 = ops.div(load_7, constant_5)
        constant_6 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(div_1, constant_6)
        rsqrt = ops.rsqrt(add_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf17', get_index_8)
        constant_7 = ops.constant(8, torch.float32)
        div_2 = ops.div(load_8, constant_7)
        constant_8 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_2, constant_8)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_1 = ops.mul(rsqrt, rsqrt_1)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where_1, mul_3)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('buf51', get_index_9)
        constant_9 = ops.constant(0.125, torch.float32)
        mul_4 = ops.mul(load_9, constant_9)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf53', get_index_10, sub_2, None)
        return store


buf54: SchedulerNode(ComputedBuffer)
buf54.writes = [MemoryDep(name='buf54', index=c0, size=(2048,))]
buf54.unmet_dependencies = 
    [   MemoryDep(name='buf17', index=c0, size=(2048,)),
        MemoryDep(name='buf52', index=c0, size=(2048,))]
buf54.met_dependencies = []
buf54.group.device = cpu
buf54.group.iteration = ((2048,), ())
buf54.sizes = ([2048], [])
class buf54_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load, rsqrt)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf54', get_index_2, mul, None)
        return store


buf55: SchedulerNode(ComputedBuffer)
buf55.writes = [MemoryDep(name='buf55', index=c0, size=(16384,))]
buf55.unmet_dependencies = 
    [   MemoryDep(name='buf17', index=c1, size=(8, 2048)),
        MemoryDep(name='buf53', index=c0, size=(16384,))]
buf55.met_dependencies = [MemoryDep(name='primals_149', index=c1, size=(8, 2048))]
buf55.group.device = cpu
buf55.group.iteration = ((8, 2048), ())
buf55.sizes = ([8, 2048], [])
class buf55_loop_body:
    var_ranges = {z0: 8, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf17', get_index_1)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_149', get_index_2)
        mul = ops.mul(rsqrt, load_2)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf55', get_index_3, mul_1, None)
        return store


buf56: ExternKernelSchedulerNode(FallbackKernel)
buf56.writes = [StarDep(name='buf56')]
buf56.unmet_dependencies = [StarDep(name='buf55')]
buf56.met_dependencies = [StarDep(name='primals_148'), StarDep(name='relu_44')]
buf56.node.kernel = aten.convolution_backward


buf57: ExternKernelSchedulerNode(MultiOutput)
buf57.writes = [StarDep(name='buf57')]
buf57.unmet_dependencies = [StarDep(name='buf56')]
buf57.met_dependencies = []
buf57.node.kernel = None


buf58: ExternKernelSchedulerNode(MultiOutput)
buf58.writes = [StarDep(name='buf58')]
buf58.unmet_dependencies = [StarDep(name='buf56')]
buf58.met_dependencies = []
buf58.node.kernel = None


buf59: SchedulerNode(ComputedBuffer)
buf59.writes = 
    [   MemoryDep(name='buf59', index=c0, size=(512, 8)),
        MemoryDep(name='buf59', index=c0, size=(512,))]
buf59.unmet_dependencies = [MemoryDep(name='buf57', index=c0 + 512*c1, size=(512, 8))]
buf59.met_dependencies = [MemoryDep(name='relu_44', index=c0 + 512*c1, size=(512, 8))]
buf59.group.device = cpu
buf59.group.iteration = ((512,), (8,))
buf59.sizes = ([512], [8])
class buf59_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_44', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf57', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf59', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf60: SchedulerNode(ComputedBuffer)
buf60.writes = 
    [   MemoryDep(name='buf60', index=c0, size=(512, 8)),
        MemoryDep(name='buf60', index=c0, size=(512,))]
buf60.unmet_dependencies = 
    [   MemoryDep(name='buf13', index=c0, size=(512, 8)),
        MemoryDep(name='buf57', index=c0 + 512*c1, size=(512, 8))]
buf60.met_dependencies = 
    [   MemoryDep(name='convolution_48', index=c0 + 512*c1, size=(512, 8)),
        MemoryDep(name='relu_44', index=c0 + 512*c1, size=(512, 8))]
buf60.group.device = cpu
buf60.group.iteration = ((512,), (8,))
buf60.sizes = ([512], [8])
class buf60_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_44', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf57', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_48', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf13', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf60', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf61: SchedulerNode(ComputedBuffer)
buf61.writes = [MemoryDep(name='buf61', index=c0, size=(512,))]
buf61.unmet_dependencies = 
    [   MemoryDep(name='buf14', index=c0, size=(512,)),
        MemoryDep(name='buf60', index=c0, size=(512,))]
buf61.met_dependencies = []
buf61.group.device = cpu
buf61.group.iteration = ((512,), ())
buf61.sizes = ([512], [])
class buf61_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf14', get_index_1)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load, rsqrt)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf61', get_index_2, mul, None)
        return store


buf62: SchedulerNode(ComputedBuffer)
buf62.writes = [MemoryDep(name='buf62', index=c0, size=(4096,))]
buf62.unmet_dependencies = 
    [   MemoryDep(name='buf13', index=c1, size=(8, 512)),
        MemoryDep(name='buf14', index=c1, size=(8, 512)),
        MemoryDep(name='buf57', index=c0, size=(4096,)),
        MemoryDep(name='buf59', index=c1, size=(8, 512)),
        MemoryDep(name='buf60', index=c1, size=(8, 512))]
buf62.met_dependencies = 
    [   MemoryDep(name='convolution_48', index=c0, size=(4096,)),
        MemoryDep(name='primals_146', index=c1, size=(8, 512)),
        MemoryDep(name='relu_44', index=c0, size=(4096,))]
buf62.group.device = cpu
buf62.group.iteration = ((8, 512), ())
buf62.sizes = ([8, 512], [])
class buf62_loop_body:
    var_ranges = {z0: 8, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_44', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf57', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_48', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf13', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf60', get_index_4)
        constant_2 = ops.constant(0.125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf14', get_index_5)
        constant_3 = ops.constant(8, torch.float32)
        div = ops.div(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_4)
        rsqrt = ops.rsqrt(add)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf14', get_index_6)
        constant_5 = ops.constant(8, torch.float32)
        div_1 = ops.div(load_6, constant_5)
        constant_6 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(div_1, constant_6)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_1 = ops.mul(rsqrt, rsqrt_1)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf59', get_index_7)
        constant_7 = ops.constant(0.125, torch.float32)
        mul_4 = ops.mul(load_7, constant_7)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf14', get_index_8)
        constant_8 = ops.constant(8, torch.float32)
        div_2 = ops.div(load_8, constant_8)
        constant_9 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_2, constant_9)
        rsqrt_2 = ops.rsqrt(add_2)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_146', get_index_9)
        mul_5 = ops.mul(rsqrt_2, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf62', get_index_10, mul_6, None)
        return store


buf63: ExternKernelSchedulerNode(FallbackKernel)
buf63.writes = [StarDep(name='buf63')]
buf63.unmet_dependencies = [StarDep(name='buf62')]
buf63.met_dependencies = [StarDep(name='primals_145'), StarDep(name='relu_43')]
buf63.node.kernel = aten.convolution_backward


buf64: ExternKernelSchedulerNode(MultiOutput)
buf64.writes = [StarDep(name='buf64')]
buf64.unmet_dependencies = [StarDep(name='buf63')]
buf64.met_dependencies = []
buf64.node.kernel = None


buf65: ExternKernelSchedulerNode(MultiOutput)
buf65.writes = [StarDep(name='buf65')]
buf65.unmet_dependencies = [StarDep(name='buf63')]
buf65.met_dependencies = []
buf65.node.kernel = None


buf66: SchedulerNode(ComputedBuffer)
buf66.writes = 
    [   MemoryDep(name='buf66', index=c0, size=(512, 8)),
        MemoryDep(name='buf66', index=c0, size=(512,))]
buf66.unmet_dependencies = [MemoryDep(name='buf64', index=c0 + 512*c1, size=(512, 8))]
buf66.met_dependencies = [MemoryDep(name='relu_43', index=c0 + 512*c1, size=(512, 8))]
buf66.group.device = cpu
buf66.group.iteration = ((512,), (8,))
buf66.sizes = ([512], [8])
class buf66_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_43', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf64', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf66', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf67: SchedulerNode(ComputedBuffer)
buf67.writes = 
    [   MemoryDep(name='buf67', index=c0, size=(512, 8)),
        MemoryDep(name='buf67', index=c0, size=(512,))]
buf67.unmet_dependencies = 
    [   MemoryDep(name='buf10', index=c0, size=(512, 8)),
        MemoryDep(name='buf64', index=c0 + 512*c1, size=(512, 8))]
buf67.met_dependencies = 
    [   MemoryDep(name='convolution_47', index=c0 + 512*c1, size=(512, 8)),
        MemoryDep(name='relu_43', index=c0 + 512*c1, size=(512, 8))]
buf67.group.device = cpu
buf67.group.iteration = ((512,), (8,))
buf67.sizes = ([512], [8])
class buf67_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_43', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf64', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_47', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf10', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf67', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf68: SchedulerNode(ComputedBuffer)
buf68.writes = [MemoryDep(name='buf68', index=c0, size=(512,))]
buf68.unmet_dependencies = 
    [   MemoryDep(name='buf11', index=c0, size=(512,)),
        MemoryDep(name='buf67', index=c0, size=(512,))]
buf68.met_dependencies = []
buf68.group.device = cpu
buf68.group.iteration = ((512,), ())
buf68.sizes = ([512], [])
class buf68_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf11', get_index_1)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load, rsqrt)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf68', get_index_2, mul, None)
        return store


buf69: SchedulerNode(ComputedBuffer)
buf69.writes = [MemoryDep(name='buf69', index=c0, size=(4096,))]
buf69.unmet_dependencies = 
    [   MemoryDep(name='buf10', index=c1, size=(8, 512)),
        MemoryDep(name='buf11', index=c1, size=(8, 512)),
        MemoryDep(name='buf64', index=c0, size=(4096,)),
        MemoryDep(name='buf66', index=c1, size=(8, 512)),
        MemoryDep(name='buf67', index=c1, size=(8, 512))]
buf69.met_dependencies = 
    [   MemoryDep(name='convolution_47', index=c0, size=(4096,)),
        MemoryDep(name='primals_143', index=c1, size=(8, 512)),
        MemoryDep(name='relu_43', index=c0, size=(4096,))]
buf69.group.device = cpu
buf69.group.iteration = ((8, 512), ())
buf69.sizes = ([8, 512], [])
class buf69_loop_body:
    var_ranges = {z0: 8, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_43', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf64', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_47', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf10', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf67', get_index_4)
        constant_2 = ops.constant(0.125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf11', get_index_5)
        constant_3 = ops.constant(8, torch.float32)
        div = ops.div(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_4)
        rsqrt = ops.rsqrt(add)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf11', get_index_6)
        constant_5 = ops.constant(8, torch.float32)
        div_1 = ops.div(load_6, constant_5)
        constant_6 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(div_1, constant_6)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_1 = ops.mul(rsqrt, rsqrt_1)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf66', get_index_7)
        constant_7 = ops.constant(0.125, torch.float32)
        mul_4 = ops.mul(load_7, constant_7)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf11', get_index_8)
        constant_8 = ops.constant(8, torch.float32)
        div_2 = ops.div(load_8, constant_8)
        constant_9 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_2, constant_9)
        rsqrt_2 = ops.rsqrt(add_2)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_143', get_index_9)
        mul_5 = ops.mul(rsqrt_2, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf69', get_index_10, mul_6, None)
        return store


buf70: ExternKernelSchedulerNode(FallbackKernel)
buf70.writes = [StarDep(name='buf70')]
buf70.unmet_dependencies = [StarDep(name='buf69')]
buf70.met_dependencies = [StarDep(name='primals_142'), StarDep(name='relu_42')]
buf70.node.kernel = aten.convolution_backward


buf71: ExternKernelSchedulerNode(MultiOutput)
buf71.writes = [StarDep(name='buf71')]
buf71.unmet_dependencies = [StarDep(name='buf70')]
buf71.met_dependencies = []
buf71.node.kernel = None


buf72: ExternKernelSchedulerNode(MultiOutput)
buf72.writes = [StarDep(name='buf72')]
buf72.unmet_dependencies = [StarDep(name='buf70')]
buf72.met_dependencies = []
buf72.node.kernel = None


buf73: SchedulerNode(ComputedBuffer)
buf73.writes = [MemoryDep(name='buf73', index=c0, size=(16384,))]
buf73.unmet_dependencies = 
    [   MemoryDep(name='buf27', index=c0, size=(16384,)),
        MemoryDep(name='buf49', index=c0, size=(16384,)),
        MemoryDep(name='buf71', index=c0, size=(16384,))]
buf73.met_dependencies = 
    [   MemoryDep(name='le', index=c0, size=(16384,)),
        MemoryDep(name='relu_42', index=c0, size=(16384,)),
        MemoryDep(name='relu_45', index=c0, size=(16384,))]
buf73.group.device = cpu
buf73.group.iteration = ((16384,), ())
buf73.sizes = ([16384], [])
class buf73_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_42', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('relu_45', get_index_1)
        constant_2 = ops.constant(0, torch.float32)
        le_1 = ops.le(load_1, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('le', get_index_2)
        constant_4 = ops.constant(0.0, torch.float32)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf27', get_index_3)
        constant_5 = ops.constant(1, torch.float32)
        div = ops.div(load_3, constant_5)
        where = ops.where(load_2, constant_4, div)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf49', get_index_4)
        add = ops.add(where, load_4)
        where_1 = ops.where(le_1, constant_3, add)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf71', get_index_5)
        add_1 = ops.add(where_1, load_5)
        where_2 = ops.where(le, constant_1, add_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf73', get_index_6, where_2, None)
        return store


buf74: SchedulerNode(ComputedBuffer)
buf74.writes = 
    [   MemoryDep(name='buf74', index=c0, size=(2048, 8)),
        MemoryDep(name='buf74', index=c0, size=(2048,))]
buf74.unmet_dependencies = [MemoryDep(name='buf73', index=c0 + 2048*c1, size=(2048, 8))]
buf74.met_dependencies = []
buf74.group.device = cpu
buf74.group.iteration = ((2048,), (8,))
buf74.sizes = ([2048], [8])
class buf74_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf74', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf75: SchedulerNode(ComputedBuffer)
buf75.writes = 
    [   MemoryDep(name='buf75', index=c0, size=(2048, 8)),
        MemoryDep(name='buf75', index=c0, size=(2048,))]
buf75.unmet_dependencies = 
    [   MemoryDep(name='buf7', index=c0, size=(2048, 8)),
        MemoryDep(name='buf73', index=c0 + 2048*c1, size=(2048, 8))]
buf75.met_dependencies = [MemoryDep(name='convolution_46', index=c0 + 2048*c1, size=(2048, 8))]
buf75.group.device = cpu
buf75.group.iteration = ((2048,), (8,))
buf75.sizes = ([2048], [8])
class buf75_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_46', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf7', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf75', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf76: SchedulerNode(ComputedBuffer)
buf76.writes = [MemoryDep(name='buf76', index=c0, size=(2048,))]
buf76.unmet_dependencies = 
    [   MemoryDep(name='buf75', index=c0, size=(2048,)),
        MemoryDep(name='buf8', index=c0, size=(2048,))]
buf76.met_dependencies = []
buf76.group.device = cpu
buf76.group.iteration = ((2048,), ())
buf76.sizes = ([2048], [])
class buf76_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf8', get_index_1)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load, rsqrt)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf76', get_index_2, mul, None)
        return store


buf77: SchedulerNode(ComputedBuffer)
buf77.writes = [MemoryDep(name='buf77', index=c0, size=(16384,))]
buf77.unmet_dependencies = 
    [   MemoryDep(name='buf7', index=c1, size=(8, 2048)),
        MemoryDep(name='buf73', index=c0, size=(16384,)),
        MemoryDep(name='buf74', index=c1, size=(8, 2048)),
        MemoryDep(name='buf75', index=c1, size=(8, 2048)),
        MemoryDep(name='buf8', index=c1, size=(8, 2048))]
buf77.met_dependencies = 
    [   MemoryDep(name='convolution_46', index=c0, size=(16384,)),
        MemoryDep(name='primals_140', index=c1, size=(8, 2048))]
buf77.group.device = cpu
buf77.group.iteration = ((8, 2048), ())
buf77.sizes = ([8, 2048], [])
class buf77_loop_body:
    var_ranges = {z0: 8, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_46', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf7', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf8', get_index_4)
        constant_1 = ops.constant(8, torch.float32)
        div = ops.div(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_2)
        rsqrt = ops.rsqrt(add)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf8', get_index_5)
        constant_3 = ops.constant(8, torch.float32)
        div_1 = ops.div(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(div_1, constant_4)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_1 = ops.mul(rsqrt, rsqrt_1)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf74', get_index_6)
        constant_5 = ops.constant(0.125, torch.float32)
        mul_4 = ops.mul(load_6, constant_5)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf8', get_index_7)
        constant_6 = ops.constant(8, torch.float32)
        div_2 = ops.div(load_7, constant_6)
        constant_7 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_2, constant_7)
        rsqrt_2 = ops.rsqrt(add_2)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_140', get_index_8)
        mul_5 = ops.mul(rsqrt_2, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf77', get_index_9, mul_6, None)
        return store


buf78: ExternKernelSchedulerNode(FallbackKernel)
buf78.writes = [StarDep(name='buf78')]
buf78.unmet_dependencies = [StarDep(name='buf77')]
buf78.met_dependencies = [StarDep(name='primals_139'), StarDep(name='relu_39')]
buf78.node.kernel = aten.convolution_backward


buf79: ExternKernelSchedulerNode(MultiOutput)
buf79.writes = [StarDep(name='buf79')]
buf79.unmet_dependencies = [StarDep(name='buf78')]
buf79.met_dependencies = []
buf79.node.kernel = None


buf80: ExternKernelSchedulerNode(MultiOutput)
buf80.writes = [StarDep(name='buf80')]
buf80.unmet_dependencies = [StarDep(name='buf78')]
buf80.met_dependencies = []
buf80.node.kernel = None


buf81: SchedulerNode(ComputedBuffer)
buf81.writes = 
    [   MemoryDep(name='buf81', index=c0, size=(2048, 8)),
        MemoryDep(name='buf81', index=c0, size=(2048,))]
buf81.unmet_dependencies = 
    [   MemoryDep(name='buf4', index=c0, size=(2048, 8)),
        MemoryDep(name='buf73', index=c0 + 2048*c1, size=(2048, 8))]
buf81.met_dependencies = [MemoryDep(name='convolution_45', index=c0 + 2048*c1, size=(2048, 8))]
buf81.group.device = cpu
buf81.group.iteration = ((2048,), (8,))
buf81.sizes = ([2048], [8])
class buf81_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_45', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf4', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf81', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf82: SchedulerNode(ComputedBuffer)
buf82.writes = [MemoryDep(name='buf82', index=c0, size=(2048,))]
buf82.unmet_dependencies = 
    [   MemoryDep(name='buf5', index=c0, size=(2048,)),
        MemoryDep(name='buf81', index=c0, size=(2048,))]
buf82.met_dependencies = []
buf82.group.device = cpu
buf82.group.iteration = ((2048,), ())
buf82.sizes = ([2048], [])
class buf82_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf5', get_index_1)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load, rsqrt)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf82', get_index_2, mul, None)
        return store


buf83: SchedulerNode(ComputedBuffer)
buf83.writes = [MemoryDep(name='buf83', index=c0, size=(16384,))]
buf83.unmet_dependencies = 
    [   MemoryDep(name='buf4', index=c1, size=(8, 2048)),
        MemoryDep(name='buf5', index=c1, size=(8, 2048)),
        MemoryDep(name='buf73', index=c0, size=(16384,)),
        MemoryDep(name='buf74', index=c1, size=(8, 2048)),
        MemoryDep(name='buf81', index=c1, size=(8, 2048))]
buf83.met_dependencies = 
    [   MemoryDep(name='convolution_45', index=c0, size=(16384,)),
        MemoryDep(name='primals_137', index=c1, size=(8, 2048))]
buf83.group.device = cpu
buf83.group.iteration = ((8, 2048), ())
buf83.sizes = ([8, 2048], [])
class buf83_loop_body:
    var_ranges = {z0: 8, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_45', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf4', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf81', get_index_3)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf5', get_index_4)
        constant_1 = ops.constant(8, torch.float32)
        div = ops.div(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_2)
        rsqrt = ops.rsqrt(add)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf5', get_index_5)
        constant_3 = ops.constant(8, torch.float32)
        div_1 = ops.div(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(div_1, constant_4)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_1 = ops.mul(rsqrt, rsqrt_1)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf74', get_index_6)
        constant_5 = ops.constant(0.125, torch.float32)
        mul_4 = ops.mul(load_6, constant_5)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf5', get_index_7)
        constant_6 = ops.constant(8, torch.float32)
        div_2 = ops.div(load_7, constant_6)
        constant_7 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_2, constant_7)
        rsqrt_2 = ops.rsqrt(add_2)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_137', get_index_8)
        mul_5 = ops.mul(rsqrt_2, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf83', get_index_9, mul_6, None)
        return store


buf84: ExternKernelSchedulerNode(FallbackKernel)
buf84.writes = [StarDep(name='buf84')]
buf84.unmet_dependencies = [StarDep(name='buf83')]
buf84.met_dependencies = [StarDep(name='primals_136'), StarDep(name='relu_41')]
buf84.node.kernel = aten.convolution_backward


buf85: ExternKernelSchedulerNode(MultiOutput)
buf85.writes = [StarDep(name='buf85')]
buf85.unmet_dependencies = [StarDep(name='buf84')]
buf85.met_dependencies = []
buf85.node.kernel = None


buf86: ExternKernelSchedulerNode(MultiOutput)
buf86.writes = [StarDep(name='buf86')]
buf86.unmet_dependencies = [StarDep(name='buf84')]
buf86.met_dependencies = []
buf86.node.kernel = None


buf87: SchedulerNode(ComputedBuffer)
buf87.writes = 
    [   MemoryDep(name='buf87', index=c0, size=(512, 8)),
        MemoryDep(name='buf87', index=c0, size=(512,))]
buf87.unmet_dependencies = [MemoryDep(name='buf85', index=c0 + 512*c1, size=(512, 8))]
buf87.met_dependencies = [MemoryDep(name='relu_41', index=c0 + 512*c1, size=(512, 8))]
buf87.group.device = cpu
buf87.group.iteration = ((512,), (8,))
buf87.sizes = ([512], [8])
class buf87_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_41', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf85', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf87', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf88: SchedulerNode(ComputedBuffer)
buf88.writes = 
    [   MemoryDep(name='buf88', index=c0, size=(512, 8)),
        MemoryDep(name='buf88', index=c0, size=(512,))]
buf88.unmet_dependencies = 
    [   MemoryDep(name='buf1', index=c0, size=(512, 8)),
        MemoryDep(name='buf85', index=c0 + 512*c1, size=(512, 8))]
buf88.met_dependencies = 
    [   MemoryDep(name='convolution_44', index=c0 + 512*c1, size=(512, 8)),
        MemoryDep(name='relu_41', index=c0 + 512*c1, size=(512, 8))]
buf88.group.device = cpu
buf88.group.iteration = ((512,), (8,))
buf88.sizes = ([512], [8])
class buf88_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_41', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf85', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_44', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf88', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf89: SchedulerNode(ComputedBuffer)
buf89.writes = [MemoryDep(name='buf89', index=c0, size=(512,))]
buf89.unmet_dependencies = 
    [   MemoryDep(name='buf2', index=c0, size=(512,)),
        MemoryDep(name='buf88', index=c0, size=(512,))]
buf89.met_dependencies = []
buf89.group.device = cpu
buf89.group.iteration = ((512,), ())
buf89.sizes = ([512], [])
class buf89_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load, rsqrt)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf89', get_index_2, mul, None)
        return store


buf90: SchedulerNode(ComputedBuffer)
buf90.writes = [MemoryDep(name='buf90', index=c0, size=(4096,))]
buf90.unmet_dependencies = 
    [   MemoryDep(name='buf1', index=c1, size=(8, 512)),
        MemoryDep(name='buf2', index=c1, size=(8, 512)),
        MemoryDep(name='buf85', index=c0, size=(4096,)),
        MemoryDep(name='buf87', index=c1, size=(8, 512)),
        MemoryDep(name='buf88', index=c1, size=(8, 512))]
buf90.met_dependencies = 
    [   MemoryDep(name='convolution_44', index=c0, size=(4096,)),
        MemoryDep(name='primals_134', index=c1, size=(8, 512)),
        MemoryDep(name='relu_41', index=c0, size=(4096,))]
buf90.group.device = cpu
buf90.group.iteration = ((8, 512), ())
buf90.sizes = ([8, 512], [])
class buf90_loop_body:
    var_ranges = {z0: 8, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_41', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf85', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_44', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf88', get_index_4)
        constant_2 = ops.constant(0.125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf2', get_index_5)
        constant_3 = ops.constant(8, torch.float32)
        div = ops.div(load_5, constant_3)
        constant_4 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_4)
        rsqrt = ops.rsqrt(add)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf2', get_index_6)
        constant_5 = ops.constant(8, torch.float32)
        div_1 = ops.div(load_6, constant_5)
        constant_6 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(div_1, constant_6)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_1 = ops.mul(rsqrt, rsqrt_1)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf87', get_index_7)
        constant_7 = ops.constant(0.125, torch.float32)
        mul_4 = ops.mul(load_7, constant_7)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf2', get_index_8)
        constant_8 = ops.constant(8, torch.float32)
        div_2 = ops.div(load_8, constant_8)
        constant_9 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_2, constant_9)
        rsqrt_2 = ops.rsqrt(add_2)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_134', get_index_9)
        mul_5 = ops.mul(rsqrt_2, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf90', get_index_10, mul_6, None)
        return store


buf91: ExternKernelSchedulerNode(FallbackKernel)
buf91.writes = [StarDep(name='buf91')]
buf91.unmet_dependencies = [StarDep(name='buf90')]
buf91.met_dependencies = [StarDep(name='primals_133'), StarDep(name='relu_40')]
buf91.node.kernel = aten.convolution_backward


buf92: ExternKernelSchedulerNode(MultiOutput)
buf92.writes = [StarDep(name='buf92')]
buf92.unmet_dependencies = [StarDep(name='buf91')]
buf92.met_dependencies = []
buf92.node.kernel = None


buf93: ExternKernelSchedulerNode(MultiOutput)
buf93.writes = [StarDep(name='buf93')]
buf93.unmet_dependencies = [StarDep(name='buf91')]
buf93.met_dependencies = []
buf93.node.kernel = None


buf94: SchedulerNode(ComputedBuffer)
buf94.writes = 
    [   MemoryDep(name='buf94', index=c0, size=(512, 32)),
        MemoryDep(name='buf94', index=c0, size=(512,))]
buf94.unmet_dependencies = [MemoryDep(name='buf92', index=4*c0 + 2048*c1 + c2, size=(512, 8, 4))]
buf94.met_dependencies = [MemoryDep(name='relu_40', index=4*c0 + 2048*c1 + c2, size=(512, 8, 4))]
buf94.group.device = cpu
buf94.group.iteration = ((512,), (8, 4))
buf94.sizes = ([512], [8, 4])
class buf94_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 4}
    index0 = 4*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_40', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf92', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf94', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf95: SchedulerNode(ComputedBuffer)
buf95.writes = 
    [   MemoryDep(name='buf95', index=c0, size=(512, 32)),
        MemoryDep(name='buf95', index=c0, size=(512,))]
buf95.unmet_dependencies = [MemoryDep(name='buf92', index=4*c0 + 2048*c1 + c2, size=(512, 8, 4))]
buf95.met_dependencies = 
    [   MemoryDep(name='convolution_43', index=4*c0 + 2048*c1 + c2, size=(512, 8, 4)),
        MemoryDep(name='relu_40', index=4*c0 + 2048*c1 + c2, size=(512, 8, 4)),
        MemoryDep(name='unsqueeze_322', index=c0, size=(512, 32))]
buf95.group.device = cpu
buf95.group.iteration = ((512,), (8, 4))
buf95.sizes = ([512], [8, 4])
class buf95_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 4}
    index0 = 4*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_40', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf92', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_43', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_322', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf95', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf96: SchedulerNode(ComputedBuffer)
buf96.writes = [MemoryDep(name='buf96', index=c0, size=(512,))]
buf96.unmet_dependencies = [MemoryDep(name='buf95', index=c0, size=(512,))]
buf96.met_dependencies = [MemoryDep(name='squeeze_130', index=c0, size=(512,))]
buf96.group.device = cpu
buf96.group.iteration = ((512,), ())
buf96.sizes = ([512], [])
class buf96_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_130', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf96', get_index_2, mul, None)
        return store


buf97: SchedulerNode(ComputedBuffer)
buf97.writes = [MemoryDep(name='buf97', index=c0, size=(16384,))]
buf97.unmet_dependencies = 
    [   MemoryDep(name='buf92', index=c0, size=(16384,)),
        MemoryDep(name='buf94', index=c1, size=(8, 512, 4)),
        MemoryDep(name='buf95', index=c1, size=(8, 512, 4))]
buf97.met_dependencies = 
    [   MemoryDep(name='convolution_43', index=c0, size=(16384,)),
        MemoryDep(name='primals_131', index=c1, size=(8, 512, 4)),
        MemoryDep(name='relu_40', index=c0, size=(16384,)),
        MemoryDep(name='squeeze_130', index=c1, size=(8, 512, 4)),
        MemoryDep(name='unsqueeze_322', index=c1, size=(8, 512, 4))]
buf97.group.device = cpu
buf97.group.iteration = ((8, 512, 4), ())
buf97.sizes = ([8, 512, 4], [])
class buf97_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 4}
    index0 = 2048*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_40', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf92', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_43', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_322', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf95', get_index_4)
        constant_2 = ops.constant(0.03125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_130', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_130', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf94', get_index_7)
        constant_3 = ops.constant(0.03125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_130', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_131', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf97', get_index_10, mul_6, None)
        return store


buf98: ExternKernelSchedulerNode(FallbackKernel)
buf98.writes = [StarDep(name='buf98')]
buf98.unmet_dependencies = [StarDep(name='buf97')]
buf98.met_dependencies = [StarDep(name='primals_130'), StarDep(name='relu_39')]
buf98.node.kernel = aten.convolution_backward


buf99: ExternKernelSchedulerNode(MultiOutput)
buf99.writes = [StarDep(name='buf99')]
buf99.unmet_dependencies = [StarDep(name='buf98')]
buf99.met_dependencies = []
buf99.node.kernel = None


buf100: ExternKernelSchedulerNode(MultiOutput)
buf100.writes = [StarDep(name='buf100')]
buf100.unmet_dependencies = [StarDep(name='buf98')]
buf100.met_dependencies = []
buf100.node.kernel = None


buf101: SchedulerNode(ComputedBuffer)
buf101.writes = 
    [   MemoryDep(name='buf101', index=c0, size=(1024, 32)),
        MemoryDep(name='buf101', index=c0, size=(1024,))]
buf101.unmet_dependencies = 
    [   MemoryDep(name='buf79', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='buf99', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf101.met_dependencies = [MemoryDep(name='relu_39', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf101.group.device = cpu
buf101.group.iteration = ((1024,), (8, 4))
buf101.sizes = ([1024], [8, 4])
class buf101_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_39', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf79', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf99', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf101', torch.float32, torch.float32, 'sum', get_index_3, where)
        return reduction


buf102: SchedulerNode(ComputedBuffer)
buf102.writes = 
    [   MemoryDep(name='buf102', index=c0, size=(1024, 32)),
        MemoryDep(name='buf102', index=c0, size=(1024,))]
buf102.unmet_dependencies = 
    [   MemoryDep(name='buf79', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='buf99', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf102.met_dependencies = 
    [   MemoryDep(name='convolution_42', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='relu_39', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='unsqueeze_334', index=c0, size=(1024, 32))]
buf102.group.device = cpu
buf102.group.iteration = ((1024,), (8, 4))
buf102.sizes = ([1024], [8, 4])
class buf102_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_39', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf79', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf99', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_42', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_334', get_index_4)
        sub = ops.sub(load_3, load_4)
        mul = ops.mul(where, sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf102', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf103: SchedulerNode(ComputedBuffer)
buf103.writes = [MemoryDep(name='buf103', index=c0, size=(32768,))]
buf103.unmet_dependencies = 
    [   MemoryDep(name='buf101', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='buf102', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='buf79', index=c0, size=(32768,)),
        MemoryDep(name='buf99', index=c0, size=(32768,))]
buf103.met_dependencies = 
    [   MemoryDep(name='convolution_42', index=c0, size=(32768,)),
        MemoryDep(name='primals_128', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='relu_39', index=c0, size=(32768,)),
        MemoryDep(name='squeeze_127', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='unsqueeze_334', index=c1, size=(8, 1024, 4))]
buf103.group.device = cpu
buf103.group.iteration = ((8, 1024, 4), ())
buf103.sizes = ([8, 1024, 4], [])
class buf103_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_39', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf79', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf99', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_42', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_334', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf102', get_index_5)
        constant_2 = ops.constant(0.03125, torch.float32)
        mul = ops.mul(load_5, constant_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_127', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_127', get_index_7)
        mul_1 = ops.mul(load_6, load_7)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf101', get_index_8)
        constant_3 = ops.constant(0.03125, torch.float32)
        mul_4 = ops.mul(load_8, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('squeeze_127', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('primals_128', get_index_10)
        mul_5 = ops.mul(load_9, load_10)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf103', get_index_11, mul_6, None)
        return store


buf104: SchedulerNode(ComputedBuffer)
buf104.writes = [MemoryDep(name='buf104', index=c0, size=(1024,))]
buf104.unmet_dependencies = [MemoryDep(name='buf102', index=c0, size=(1024,))]
buf104.met_dependencies = [MemoryDep(name='squeeze_127', index=c0, size=(1024,))]
buf104.group.device = cpu
buf104.group.iteration = ((1024,), ())
buf104.sizes = ([1024], [])
class buf104_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_127', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf104', get_index_2, mul, None)
        return store


buf105: ExternKernelSchedulerNode(FallbackKernel)
buf105.writes = [StarDep(name='buf105')]
buf105.unmet_dependencies = [StarDep(name='buf103')]
buf105.met_dependencies = [StarDep(name='primals_127'), StarDep(name='relu_38')]
buf105.node.kernel = aten.convolution_backward


buf106: ExternKernelSchedulerNode(MultiOutput)
buf106.writes = [StarDep(name='buf106')]
buf106.unmet_dependencies = [StarDep(name='buf105')]
buf106.met_dependencies = []
buf106.node.kernel = None


buf107: ExternKernelSchedulerNode(MultiOutput)
buf107.writes = [StarDep(name='buf107')]
buf107.unmet_dependencies = [StarDep(name='buf105')]
buf107.met_dependencies = []
buf107.node.kernel = None


buf108: SchedulerNode(ComputedBuffer)
buf108.writes = 
    [   MemoryDep(name='buf108', index=c0, size=(256, 32)),
        MemoryDep(name='buf108', index=c0, size=(256,))]
buf108.unmet_dependencies = [MemoryDep(name='buf106', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf108.met_dependencies = [MemoryDep(name='relu_38', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf108.group.device = cpu
buf108.group.iteration = ((256,), (8, 4))
buf108.sizes = ([256], [8, 4])
class buf108_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_38', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf106', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf108', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf109: SchedulerNode(ComputedBuffer)
buf109.writes = 
    [   MemoryDep(name='buf109', index=c0, size=(256, 32)),
        MemoryDep(name='buf109', index=c0, size=(256,))]
buf109.unmet_dependencies = [MemoryDep(name='buf106', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf109.met_dependencies = 
    [   MemoryDep(name='convolution_41', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='relu_38', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='unsqueeze_346', index=c0, size=(256, 32))]
buf109.group.device = cpu
buf109.group.iteration = ((256,), (8, 4))
buf109.sizes = ([256], [8, 4])
class buf109_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_38', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf106', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_41', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_346', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf109', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf110: SchedulerNode(ComputedBuffer)
buf110.writes = [MemoryDep(name='buf110', index=c0, size=(256,))]
buf110.unmet_dependencies = [MemoryDep(name='buf109', index=c0, size=(256,))]
buf110.met_dependencies = [MemoryDep(name='squeeze_124', index=c0, size=(256,))]
buf110.group.device = cpu
buf110.group.iteration = ((256,), ())
buf110.sizes = ([256], [])
class buf110_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_124', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf110', get_index_2, mul, None)
        return store


buf111: SchedulerNode(ComputedBuffer)
buf111.writes = [MemoryDep(name='buf111', index=c0, size=(8192,))]
buf111.unmet_dependencies = 
    [   MemoryDep(name='buf106', index=c0, size=(8192,)),
        MemoryDep(name='buf108', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf109', index=c1, size=(8, 256, 4))]
buf111.met_dependencies = 
    [   MemoryDep(name='convolution_41', index=c0, size=(8192,)),
        MemoryDep(name='primals_125', index=c1, size=(8, 256, 4)),
        MemoryDep(name='relu_38', index=c0, size=(8192,)),
        MemoryDep(name='squeeze_124', index=c1, size=(8, 256, 4)),
        MemoryDep(name='unsqueeze_346', index=c1, size=(8, 256, 4))]
buf111.group.device = cpu
buf111.group.iteration = ((8, 256, 4), ())
buf111.sizes = ([8, 256, 4], [])
class buf111_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_38', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf106', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_41', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_346', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf109', get_index_4)
        constant_2 = ops.constant(0.03125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_124', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_124', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf108', get_index_7)
        constant_3 = ops.constant(0.03125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_124', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_125', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf111', get_index_10, mul_6, None)
        return store


buf112: ExternKernelSchedulerNode(FallbackKernel)
buf112.writes = [StarDep(name='buf112')]
buf112.unmet_dependencies = [StarDep(name='buf111')]
buf112.met_dependencies = [StarDep(name='primals_124'), StarDep(name='relu_37')]
buf112.node.kernel = aten.convolution_backward


buf113: ExternKernelSchedulerNode(MultiOutput)
buf113.writes = [StarDep(name='buf113')]
buf113.unmet_dependencies = [StarDep(name='buf112')]
buf113.met_dependencies = []
buf113.node.kernel = None


buf114: ExternKernelSchedulerNode(MultiOutput)
buf114.writes = [StarDep(name='buf114')]
buf114.unmet_dependencies = [StarDep(name='buf112')]
buf114.met_dependencies = []
buf114.node.kernel = None


buf115: SchedulerNode(ComputedBuffer)
buf115.writes = 
    [   MemoryDep(name='buf115', index=c0, size=(256, 32)),
        MemoryDep(name='buf115', index=c0, size=(256,))]
buf115.unmet_dependencies = [MemoryDep(name='buf113', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf115.met_dependencies = [MemoryDep(name='relu_37', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf115.group.device = cpu
buf115.group.iteration = ((256,), (8, 4))
buf115.sizes = ([256], [8, 4])
class buf115_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_37', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf113', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf115', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf116: SchedulerNode(ComputedBuffer)
buf116.writes = 
    [   MemoryDep(name='buf116', index=c0, size=(256, 32)),
        MemoryDep(name='buf116', index=c0, size=(256,))]
buf116.unmet_dependencies = [MemoryDep(name='buf113', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf116.met_dependencies = 
    [   MemoryDep(name='convolution_40', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='relu_37', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='unsqueeze_358', index=c0, size=(256, 32))]
buf116.group.device = cpu
buf116.group.iteration = ((256,), (8, 4))
buf116.sizes = ([256], [8, 4])
class buf116_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_37', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf113', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_40', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_358', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf116', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf117: SchedulerNode(ComputedBuffer)
buf117.writes = [MemoryDep(name='buf117', index=c0, size=(256,))]
buf117.unmet_dependencies = [MemoryDep(name='buf116', index=c0, size=(256,))]
buf117.met_dependencies = [MemoryDep(name='squeeze_121', index=c0, size=(256,))]
buf117.group.device = cpu
buf117.group.iteration = ((256,), ())
buf117.sizes = ([256], [])
class buf117_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_121', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf117', get_index_2, mul, None)
        return store


buf118: SchedulerNode(ComputedBuffer)
buf118.writes = [MemoryDep(name='buf118', index=c0, size=(8192,))]
buf118.unmet_dependencies = 
    [   MemoryDep(name='buf113', index=c0, size=(8192,)),
        MemoryDep(name='buf115', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf116', index=c1, size=(8, 256, 4))]
buf118.met_dependencies = 
    [   MemoryDep(name='convolution_40', index=c0, size=(8192,)),
        MemoryDep(name='primals_122', index=c1, size=(8, 256, 4)),
        MemoryDep(name='relu_37', index=c0, size=(8192,)),
        MemoryDep(name='squeeze_121', index=c1, size=(8, 256, 4)),
        MemoryDep(name='unsqueeze_358', index=c1, size=(8, 256, 4))]
buf118.group.device = cpu
buf118.group.iteration = ((8, 256, 4), ())
buf118.sizes = ([8, 256, 4], [])
class buf118_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_37', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf113', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_40', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_358', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf116', get_index_4)
        constant_2 = ops.constant(0.03125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_121', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_121', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf115', get_index_7)
        constant_3 = ops.constant(0.03125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_121', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_122', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf118', get_index_10, mul_6, None)
        return store


buf119: ExternKernelSchedulerNode(FallbackKernel)
buf119.writes = [StarDep(name='buf119')]
buf119.unmet_dependencies = [StarDep(name='buf118')]
buf119.met_dependencies = [StarDep(name='primals_121'), StarDep(name='relu_36')]
buf119.node.kernel = aten.convolution_backward


buf120: ExternKernelSchedulerNode(MultiOutput)
buf120.writes = [StarDep(name='buf120')]
buf120.unmet_dependencies = [StarDep(name='buf119')]
buf120.met_dependencies = []
buf120.node.kernel = None


buf121: ExternKernelSchedulerNode(MultiOutput)
buf121.writes = [StarDep(name='buf121')]
buf121.unmet_dependencies = [StarDep(name='buf119')]
buf121.met_dependencies = []
buf121.node.kernel = None


buf122: SchedulerNode(ComputedBuffer)
buf122.writes = [MemoryDep(name='buf122', index=c0, size=(32768,))]
buf122.unmet_dependencies = 
    [   MemoryDep(name='buf120', index=c0, size=(32768,)),
        MemoryDep(name='buf79', index=c0, size=(32768,)),
        MemoryDep(name='buf99', index=c0, size=(32768,))]
buf122.met_dependencies = 
    [   MemoryDep(name='relu_36', index=c0, size=(32768,)),
        MemoryDep(name='relu_39', index=c0, size=(32768,))]
buf122.group.device = cpu
buf122.group.iteration = ((32768,), ())
buf122.sizes = ([32768], [])
class buf122_loop_body:
    var_ranges = {z0: 32768}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_36', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('relu_39', get_index_1)
        constant_2 = ops.constant(0, torch.float32)
        le_1 = ops.le(load_1, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf79', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf99', get_index_3)
        add = ops.add(load_2, load_3)
        where = ops.where(le_1, constant_3, add)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf120', get_index_4)
        add_1 = ops.add(where, load_4)
        where_1 = ops.where(le, constant_1, add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf122', get_index_5, where_1, None)
        return store


buf123: SchedulerNode(ComputedBuffer)
buf123.writes = 
    [   MemoryDep(name='buf123', index=c0, size=(1024, 32)),
        MemoryDep(name='buf123', index=c0, size=(1024,))]
buf123.unmet_dependencies = [MemoryDep(name='buf122', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf123.met_dependencies = []
buf123.group.device = cpu
buf123.group.iteration = ((1024,), (8, 4))
buf123.sizes = ([1024], [8, 4])
class buf123_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf123', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf124: SchedulerNode(ComputedBuffer)
buf124.writes = 
    [   MemoryDep(name='buf124', index=c0, size=(1024, 32)),
        MemoryDep(name='buf124', index=c0, size=(1024,))]
buf124.unmet_dependencies = [MemoryDep(name='buf122', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf124.met_dependencies = 
    [   MemoryDep(name='convolution_39', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='unsqueeze_370', index=c0, size=(1024, 32))]
buf124.group.device = cpu
buf124.group.iteration = ((1024,), (8, 4))
buf124.sizes = ([1024], [8, 4])
class buf124_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_39', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_370', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf124', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf125: SchedulerNode(ComputedBuffer)
buf125.writes = [MemoryDep(name='buf125', index=c0, size=(1024,))]
buf125.unmet_dependencies = [MemoryDep(name='buf124', index=c0, size=(1024,))]
buf125.met_dependencies = [MemoryDep(name='squeeze_118', index=c0, size=(1024,))]
buf125.group.device = cpu
buf125.group.iteration = ((1024,), ())
buf125.sizes = ([1024], [])
class buf125_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_118', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf125', get_index_2, mul, None)
        return store


buf126: SchedulerNode(ComputedBuffer)
buf126.writes = [MemoryDep(name='buf126', index=c0, size=(32768,))]
buf126.unmet_dependencies = 
    [   MemoryDep(name='buf122', index=c0, size=(32768,)),
        MemoryDep(name='buf123', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='buf124', index=c1, size=(8, 1024, 4))]
buf126.met_dependencies = 
    [   MemoryDep(name='convolution_39', index=c0, size=(32768,)),
        MemoryDep(name='primals_119', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='squeeze_118', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='unsqueeze_370', index=c1, size=(8, 1024, 4))]
buf126.group.device = cpu
buf126.group.iteration = ((8, 1024, 4), ())
buf126.sizes = ([8, 1024, 4], [])
class buf126_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_39', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_370', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf124', get_index_3)
        constant = ops.constant(0.03125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('squeeze_118', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_118', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf123', get_index_6)
        constant_1 = ops.constant(0.03125, torch.float32)
        mul_4 = ops.mul(load_6, constant_1)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_118', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_119', get_index_8)
        mul_5 = ops.mul(load_7, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf126', get_index_9, mul_6, None)
        return store


buf127: ExternKernelSchedulerNode(FallbackKernel)
buf127.writes = [StarDep(name='buf127')]
buf127.unmet_dependencies = [StarDep(name='buf126')]
buf127.met_dependencies = [StarDep(name='primals_118'), StarDep(name='relu_35')]
buf127.node.kernel = aten.convolution_backward


buf128: ExternKernelSchedulerNode(MultiOutput)
buf128.writes = [StarDep(name='buf128')]
buf128.unmet_dependencies = [StarDep(name='buf127')]
buf128.met_dependencies = []
buf128.node.kernel = None


buf129: ExternKernelSchedulerNode(MultiOutput)
buf129.writes = [StarDep(name='buf129')]
buf129.unmet_dependencies = [StarDep(name='buf127')]
buf129.met_dependencies = []
buf129.node.kernel = None


buf130: SchedulerNode(ComputedBuffer)
buf130.writes = 
    [   MemoryDep(name='buf130', index=c0, size=(256, 32)),
        MemoryDep(name='buf130', index=c0, size=(256,))]
buf130.unmet_dependencies = [MemoryDep(name='buf128', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf130.met_dependencies = [MemoryDep(name='relu_35', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf130.group.device = cpu
buf130.group.iteration = ((256,), (8, 4))
buf130.sizes = ([256], [8, 4])
class buf130_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_35', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf128', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf130', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf131: SchedulerNode(ComputedBuffer)
buf131.writes = 
    [   MemoryDep(name='buf131', index=c0, size=(256, 32)),
        MemoryDep(name='buf131', index=c0, size=(256,))]
buf131.unmet_dependencies = [MemoryDep(name='buf128', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf131.met_dependencies = 
    [   MemoryDep(name='convolution_38', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='relu_35', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='unsqueeze_382', index=c0, size=(256, 32))]
buf131.group.device = cpu
buf131.group.iteration = ((256,), (8, 4))
buf131.sizes = ([256], [8, 4])
class buf131_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_35', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf128', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_38', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_382', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf131', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf132: SchedulerNode(ComputedBuffer)
buf132.writes = [MemoryDep(name='buf132', index=c0, size=(256,))]
buf132.unmet_dependencies = [MemoryDep(name='buf131', index=c0, size=(256,))]
buf132.met_dependencies = [MemoryDep(name='squeeze_115', index=c0, size=(256,))]
buf132.group.device = cpu
buf132.group.iteration = ((256,), ())
buf132.sizes = ([256], [])
class buf132_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_115', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf132', get_index_2, mul, None)
        return store


buf133: SchedulerNode(ComputedBuffer)
buf133.writes = [MemoryDep(name='buf133', index=c0, size=(8192,))]
buf133.unmet_dependencies = 
    [   MemoryDep(name='buf128', index=c0, size=(8192,)),
        MemoryDep(name='buf130', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf131', index=c1, size=(8, 256, 4))]
buf133.met_dependencies = 
    [   MemoryDep(name='convolution_38', index=c0, size=(8192,)),
        MemoryDep(name='primals_116', index=c1, size=(8, 256, 4)),
        MemoryDep(name='relu_35', index=c0, size=(8192,)),
        MemoryDep(name='squeeze_115', index=c1, size=(8, 256, 4)),
        MemoryDep(name='unsqueeze_382', index=c1, size=(8, 256, 4))]
buf133.group.device = cpu
buf133.group.iteration = ((8, 256, 4), ())
buf133.sizes = ([8, 256, 4], [])
class buf133_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_35', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf128', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_38', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_382', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf131', get_index_4)
        constant_2 = ops.constant(0.03125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_115', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_115', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf130', get_index_7)
        constant_3 = ops.constant(0.03125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_115', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_116', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf133', get_index_10, mul_6, None)
        return store


buf134: ExternKernelSchedulerNode(FallbackKernel)
buf134.writes = [StarDep(name='buf134')]
buf134.unmet_dependencies = [StarDep(name='buf133')]
buf134.met_dependencies = [StarDep(name='primals_115'), StarDep(name='relu_34')]
buf134.node.kernel = aten.convolution_backward


buf135: ExternKernelSchedulerNode(MultiOutput)
buf135.writes = [StarDep(name='buf135')]
buf135.unmet_dependencies = [StarDep(name='buf134')]
buf135.met_dependencies = []
buf135.node.kernel = None


buf136: ExternKernelSchedulerNode(MultiOutput)
buf136.writes = [StarDep(name='buf136')]
buf136.unmet_dependencies = [StarDep(name='buf134')]
buf136.met_dependencies = []
buf136.node.kernel = None


buf137: SchedulerNode(ComputedBuffer)
buf137.writes = 
    [   MemoryDep(name='buf137', index=c0, size=(256, 32)),
        MemoryDep(name='buf137', index=c0, size=(256,))]
buf137.unmet_dependencies = [MemoryDep(name='buf135', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf137.met_dependencies = [MemoryDep(name='relu_34', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf137.group.device = cpu
buf137.group.iteration = ((256,), (8, 4))
buf137.sizes = ([256], [8, 4])
class buf137_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_34', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf135', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf137', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf138: SchedulerNode(ComputedBuffer)
buf138.writes = 
    [   MemoryDep(name='buf138', index=c0, size=(256, 32)),
        MemoryDep(name='buf138', index=c0, size=(256,))]
buf138.unmet_dependencies = [MemoryDep(name='buf135', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf138.met_dependencies = 
    [   MemoryDep(name='convolution_37', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='relu_34', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='unsqueeze_394', index=c0, size=(256, 32))]
buf138.group.device = cpu
buf138.group.iteration = ((256,), (8, 4))
buf138.sizes = ([256], [8, 4])
class buf138_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_34', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf135', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_37', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_394', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf138', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf139: SchedulerNode(ComputedBuffer)
buf139.writes = [MemoryDep(name='buf139', index=c0, size=(256,))]
buf139.unmet_dependencies = [MemoryDep(name='buf138', index=c0, size=(256,))]
buf139.met_dependencies = [MemoryDep(name='squeeze_112', index=c0, size=(256,))]
buf139.group.device = cpu
buf139.group.iteration = ((256,), ())
buf139.sizes = ([256], [])
class buf139_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_112', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf139', get_index_2, mul, None)
        return store


buf140: SchedulerNode(ComputedBuffer)
buf140.writes = [MemoryDep(name='buf140', index=c0, size=(8192,))]
buf140.unmet_dependencies = 
    [   MemoryDep(name='buf135', index=c0, size=(8192,)),
        MemoryDep(name='buf137', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf138', index=c1, size=(8, 256, 4))]
buf140.met_dependencies = 
    [   MemoryDep(name='convolution_37', index=c0, size=(8192,)),
        MemoryDep(name='primals_113', index=c1, size=(8, 256, 4)),
        MemoryDep(name='relu_34', index=c0, size=(8192,)),
        MemoryDep(name='squeeze_112', index=c1, size=(8, 256, 4)),
        MemoryDep(name='unsqueeze_394', index=c1, size=(8, 256, 4))]
buf140.group.device = cpu
buf140.group.iteration = ((8, 256, 4), ())
buf140.sizes = ([8, 256, 4], [])
class buf140_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_34', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf135', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_37', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_394', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf138', get_index_4)
        constant_2 = ops.constant(0.03125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_112', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_112', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf137', get_index_7)
        constant_3 = ops.constant(0.03125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_112', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_113', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf140', get_index_10, mul_6, None)
        return store


buf141: ExternKernelSchedulerNode(FallbackKernel)
buf141.writes = [StarDep(name='buf141')]
buf141.unmet_dependencies = [StarDep(name='buf140')]
buf141.met_dependencies = [StarDep(name='primals_112'), StarDep(name='relu_33')]
buf141.node.kernel = aten.convolution_backward


buf142: ExternKernelSchedulerNode(MultiOutput)
buf142.writes = [StarDep(name='buf142')]
buf142.unmet_dependencies = [StarDep(name='buf141')]
buf142.met_dependencies = []
buf142.node.kernel = None


buf143: ExternKernelSchedulerNode(MultiOutput)
buf143.writes = [StarDep(name='buf143')]
buf143.unmet_dependencies = [StarDep(name='buf141')]
buf143.met_dependencies = []
buf143.node.kernel = None


buf144: SchedulerNode(ComputedBuffer)
buf144.writes = 
    [   MemoryDep(name='buf144', index=c0, size=(1024, 32)),
        MemoryDep(name='buf144', index=c0, size=(1024,))]
buf144.unmet_dependencies = 
    [   MemoryDep(name='buf122', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='buf142', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf144.met_dependencies = [MemoryDep(name='relu_33', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf144.group.device = cpu
buf144.group.iteration = ((1024,), (8, 4))
buf144.sizes = ([1024], [8, 4])
class buf144_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_33', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf122', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf142', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf144', torch.float32, torch.float32, 'sum', get_index_3, where)
        return reduction


buf145: SchedulerNode(ComputedBuffer)
buf145.writes = 
    [   MemoryDep(name='buf145', index=c0, size=(1024, 32)),
        MemoryDep(name='buf145', index=c0, size=(1024,))]
buf145.unmet_dependencies = 
    [   MemoryDep(name='buf122', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='buf142', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf145.met_dependencies = 
    [   MemoryDep(name='convolution_36', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='relu_33', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='unsqueeze_406', index=c0, size=(1024, 32))]
buf145.group.device = cpu
buf145.group.iteration = ((1024,), (8, 4))
buf145.sizes = ([1024], [8, 4])
class buf145_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_33', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf122', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf142', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_36', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_406', get_index_4)
        sub = ops.sub(load_3, load_4)
        mul = ops.mul(where, sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf145', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf146: SchedulerNode(ComputedBuffer)
buf146.writes = [MemoryDep(name='buf146', index=c0, size=(32768,))]
buf146.unmet_dependencies = 
    [   MemoryDep(name='buf122', index=c0, size=(32768,)),
        MemoryDep(name='buf142', index=c0, size=(32768,)),
        MemoryDep(name='buf144', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='buf145', index=c1, size=(8, 1024, 4))]
buf146.met_dependencies = 
    [   MemoryDep(name='convolution_36', index=c0, size=(32768,)),
        MemoryDep(name='primals_110', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='relu_33', index=c0, size=(32768,)),
        MemoryDep(name='squeeze_109', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='unsqueeze_406', index=c1, size=(8, 1024, 4))]
buf146.group.device = cpu
buf146.group.iteration = ((8, 1024, 4), ())
buf146.sizes = ([8, 1024, 4], [])
class buf146_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_33', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf122', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf142', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_36', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_406', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf145', get_index_5)
        constant_2 = ops.constant(0.03125, torch.float32)
        mul = ops.mul(load_5, constant_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_109', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_109', get_index_7)
        mul_1 = ops.mul(load_6, load_7)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf144', get_index_8)
        constant_3 = ops.constant(0.03125, torch.float32)
        mul_4 = ops.mul(load_8, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('squeeze_109', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('primals_110', get_index_10)
        mul_5 = ops.mul(load_9, load_10)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf146', get_index_11, mul_6, None)
        return store


buf147: SchedulerNode(ComputedBuffer)
buf147.writes = [MemoryDep(name='buf147', index=c0, size=(1024,))]
buf147.unmet_dependencies = [MemoryDep(name='buf145', index=c0, size=(1024,))]
buf147.met_dependencies = [MemoryDep(name='squeeze_109', index=c0, size=(1024,))]
buf147.group.device = cpu
buf147.group.iteration = ((1024,), ())
buf147.sizes = ([1024], [])
class buf147_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_109', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf147', get_index_2, mul, None)
        return store


buf148: ExternKernelSchedulerNode(FallbackKernel)
buf148.writes = [StarDep(name='buf148')]
buf148.unmet_dependencies = [StarDep(name='buf146')]
buf148.met_dependencies = [StarDep(name='primals_109'), StarDep(name='relu_32')]
buf148.node.kernel = aten.convolution_backward


buf149: ExternKernelSchedulerNode(MultiOutput)
buf149.writes = [StarDep(name='buf149')]
buf149.unmet_dependencies = [StarDep(name='buf148')]
buf149.met_dependencies = []
buf149.node.kernel = None


buf150: ExternKernelSchedulerNode(MultiOutput)
buf150.writes = [StarDep(name='buf150')]
buf150.unmet_dependencies = [StarDep(name='buf148')]
buf150.met_dependencies = []
buf150.node.kernel = None


buf151: SchedulerNode(ComputedBuffer)
buf151.writes = 
    [   MemoryDep(name='buf151', index=c0, size=(256, 32)),
        MemoryDep(name='buf151', index=c0, size=(256,))]
buf151.unmet_dependencies = [MemoryDep(name='buf149', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf151.met_dependencies = [MemoryDep(name='relu_32', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf151.group.device = cpu
buf151.group.iteration = ((256,), (8, 4))
buf151.sizes = ([256], [8, 4])
class buf151_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_32', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf151', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf152: SchedulerNode(ComputedBuffer)
buf152.writes = 
    [   MemoryDep(name='buf152', index=c0, size=(256, 32)),
        MemoryDep(name='buf152', index=c0, size=(256,))]
buf152.unmet_dependencies = [MemoryDep(name='buf149', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf152.met_dependencies = 
    [   MemoryDep(name='convolution_35', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='relu_32', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='unsqueeze_418', index=c0, size=(256, 32))]
buf152.group.device = cpu
buf152.group.iteration = ((256,), (8, 4))
buf152.sizes = ([256], [8, 4])
class buf152_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_32', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_35', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_418', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf152', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf153: SchedulerNode(ComputedBuffer)
buf153.writes = [MemoryDep(name='buf153', index=c0, size=(256,))]
buf153.unmet_dependencies = [MemoryDep(name='buf152', index=c0, size=(256,))]
buf153.met_dependencies = [MemoryDep(name='squeeze_106', index=c0, size=(256,))]
buf153.group.device = cpu
buf153.group.iteration = ((256,), ())
buf153.sizes = ([256], [])
class buf153_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_106', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf153', get_index_2, mul, None)
        return store


buf154: SchedulerNode(ComputedBuffer)
buf154.writes = [MemoryDep(name='buf154', index=c0, size=(8192,))]
buf154.unmet_dependencies = 
    [   MemoryDep(name='buf149', index=c0, size=(8192,)),
        MemoryDep(name='buf151', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf152', index=c1, size=(8, 256, 4))]
buf154.met_dependencies = 
    [   MemoryDep(name='convolution_35', index=c0, size=(8192,)),
        MemoryDep(name='primals_107', index=c1, size=(8, 256, 4)),
        MemoryDep(name='relu_32', index=c0, size=(8192,)),
        MemoryDep(name='squeeze_106', index=c1, size=(8, 256, 4)),
        MemoryDep(name='unsqueeze_418', index=c1, size=(8, 256, 4))]
buf154.group.device = cpu
buf154.group.iteration = ((8, 256, 4), ())
buf154.sizes = ([8, 256, 4], [])
class buf154_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_32', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_35', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_418', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf152', get_index_4)
        constant_2 = ops.constant(0.03125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_106', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_106', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf151', get_index_7)
        constant_3 = ops.constant(0.03125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_106', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_107', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf154', get_index_10, mul_6, None)
        return store


buf155: ExternKernelSchedulerNode(FallbackKernel)
buf155.writes = [StarDep(name='buf155')]
buf155.unmet_dependencies = [StarDep(name='buf154')]
buf155.met_dependencies = [StarDep(name='primals_106'), StarDep(name='relu_31')]
buf155.node.kernel = aten.convolution_backward


buf156: ExternKernelSchedulerNode(MultiOutput)
buf156.writes = [StarDep(name='buf156')]
buf156.unmet_dependencies = [StarDep(name='buf155')]
buf156.met_dependencies = []
buf156.node.kernel = None


buf157: ExternKernelSchedulerNode(MultiOutput)
buf157.writes = [StarDep(name='buf157')]
buf157.unmet_dependencies = [StarDep(name='buf155')]
buf157.met_dependencies = []
buf157.node.kernel = None


buf158: SchedulerNode(ComputedBuffer)
buf158.writes = 
    [   MemoryDep(name='buf158', index=c0, size=(256, 32)),
        MemoryDep(name='buf158', index=c0, size=(256,))]
buf158.unmet_dependencies = [MemoryDep(name='buf156', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf158.met_dependencies = [MemoryDep(name='relu_31', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf158.group.device = cpu
buf158.group.iteration = ((256,), (8, 4))
buf158.sizes = ([256], [8, 4])
class buf158_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_31', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf156', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf158', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf159: SchedulerNode(ComputedBuffer)
buf159.writes = 
    [   MemoryDep(name='buf159', index=c0, size=(256, 32)),
        MemoryDep(name='buf159', index=c0, size=(256,))]
buf159.unmet_dependencies = [MemoryDep(name='buf156', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf159.met_dependencies = 
    [   MemoryDep(name='convolution_34', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='relu_31', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='unsqueeze_430', index=c0, size=(256, 32))]
buf159.group.device = cpu
buf159.group.iteration = ((256,), (8, 4))
buf159.sizes = ([256], [8, 4])
class buf159_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_31', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf156', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_34', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_430', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf159', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf160: SchedulerNode(ComputedBuffer)
buf160.writes = [MemoryDep(name='buf160', index=c0, size=(256,))]
buf160.unmet_dependencies = [MemoryDep(name='buf159', index=c0, size=(256,))]
buf160.met_dependencies = [MemoryDep(name='squeeze_103', index=c0, size=(256,))]
buf160.group.device = cpu
buf160.group.iteration = ((256,), ())
buf160.sizes = ([256], [])
class buf160_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_103', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf160', get_index_2, mul, None)
        return store


buf161: SchedulerNode(ComputedBuffer)
buf161.writes = [MemoryDep(name='buf161', index=c0, size=(8192,))]
buf161.unmet_dependencies = 
    [   MemoryDep(name='buf156', index=c0, size=(8192,)),
        MemoryDep(name='buf158', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf159', index=c1, size=(8, 256, 4))]
buf161.met_dependencies = 
    [   MemoryDep(name='convolution_34', index=c0, size=(8192,)),
        MemoryDep(name='primals_104', index=c1, size=(8, 256, 4)),
        MemoryDep(name='relu_31', index=c0, size=(8192,)),
        MemoryDep(name='squeeze_103', index=c1, size=(8, 256, 4)),
        MemoryDep(name='unsqueeze_430', index=c1, size=(8, 256, 4))]
buf161.group.device = cpu
buf161.group.iteration = ((8, 256, 4), ())
buf161.sizes = ([8, 256, 4], [])
class buf161_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_31', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf156', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_34', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_430', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf159', get_index_4)
        constant_2 = ops.constant(0.03125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_103', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_103', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf158', get_index_7)
        constant_3 = ops.constant(0.03125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_103', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_104', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf161', get_index_10, mul_6, None)
        return store


buf162: ExternKernelSchedulerNode(FallbackKernel)
buf162.writes = [StarDep(name='buf162')]
buf162.unmet_dependencies = [StarDep(name='buf161')]
buf162.met_dependencies = [StarDep(name='primals_103'), StarDep(name='relu_30')]
buf162.node.kernel = aten.convolution_backward


buf163: ExternKernelSchedulerNode(MultiOutput)
buf163.writes = [StarDep(name='buf163')]
buf163.unmet_dependencies = [StarDep(name='buf162')]
buf163.met_dependencies = []
buf163.node.kernel = None


buf164: ExternKernelSchedulerNode(MultiOutput)
buf164.writes = [StarDep(name='buf164')]
buf164.unmet_dependencies = [StarDep(name='buf162')]
buf164.met_dependencies = []
buf164.node.kernel = None


buf165: SchedulerNode(ComputedBuffer)
buf165.writes = [MemoryDep(name='buf165', index=c0, size=(32768,))]
buf165.unmet_dependencies = 
    [   MemoryDep(name='buf122', index=c0, size=(32768,)),
        MemoryDep(name='buf142', index=c0, size=(32768,)),
        MemoryDep(name='buf163', index=c0, size=(32768,))]
buf165.met_dependencies = 
    [   MemoryDep(name='relu_30', index=c0, size=(32768,)),
        MemoryDep(name='relu_33', index=c0, size=(32768,))]
buf165.group.device = cpu
buf165.group.iteration = ((32768,), ())
buf165.sizes = ([32768], [])
class buf165_loop_body:
    var_ranges = {z0: 32768}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_30', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('relu_33', get_index_1)
        constant_2 = ops.constant(0, torch.float32)
        le_1 = ops.le(load_1, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf122', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf142', get_index_3)
        add = ops.add(load_2, load_3)
        where = ops.where(le_1, constant_3, add)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf163', get_index_4)
        add_1 = ops.add(where, load_4)
        where_1 = ops.where(le, constant_1, add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf165', get_index_5, where_1, None)
        return store


buf166: SchedulerNode(ComputedBuffer)
buf166.writes = 
    [   MemoryDep(name='buf166', index=c0, size=(1024, 32)),
        MemoryDep(name='buf166', index=c0, size=(1024,))]
buf166.unmet_dependencies = [MemoryDep(name='buf165', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf166.met_dependencies = []
buf166.group.device = cpu
buf166.group.iteration = ((1024,), (8, 4))
buf166.sizes = ([1024], [8, 4])
class buf166_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf166', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf167: SchedulerNode(ComputedBuffer)
buf167.writes = 
    [   MemoryDep(name='buf167', index=c0, size=(1024, 32)),
        MemoryDep(name='buf167', index=c0, size=(1024,))]
buf167.unmet_dependencies = [MemoryDep(name='buf165', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf167.met_dependencies = 
    [   MemoryDep(name='convolution_33', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='unsqueeze_442', index=c0, size=(1024, 32))]
buf167.group.device = cpu
buf167.group.iteration = ((1024,), (8, 4))
buf167.sizes = ([1024], [8, 4])
class buf167_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_33', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_442', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf167', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf168: SchedulerNode(ComputedBuffer)
buf168.writes = [MemoryDep(name='buf168', index=c0, size=(1024,))]
buf168.unmet_dependencies = [MemoryDep(name='buf167', index=c0, size=(1024,))]
buf168.met_dependencies = [MemoryDep(name='squeeze_100', index=c0, size=(1024,))]
buf168.group.device = cpu
buf168.group.iteration = ((1024,), ())
buf168.sizes = ([1024], [])
class buf168_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_100', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf168', get_index_2, mul, None)
        return store


buf169: SchedulerNode(ComputedBuffer)
buf169.writes = [MemoryDep(name='buf169', index=c0, size=(32768,))]
buf169.unmet_dependencies = 
    [   MemoryDep(name='buf165', index=c0, size=(32768,)),
        MemoryDep(name='buf166', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='buf167', index=c1, size=(8, 1024, 4))]
buf169.met_dependencies = 
    [   MemoryDep(name='convolution_33', index=c0, size=(32768,)),
        MemoryDep(name='primals_101', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='squeeze_100', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='unsqueeze_442', index=c1, size=(8, 1024, 4))]
buf169.group.device = cpu
buf169.group.iteration = ((8, 1024, 4), ())
buf169.sizes = ([8, 1024, 4], [])
class buf169_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_33', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_442', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf167', get_index_3)
        constant = ops.constant(0.03125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('squeeze_100', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_100', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf166', get_index_6)
        constant_1 = ops.constant(0.03125, torch.float32)
        mul_4 = ops.mul(load_6, constant_1)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_100', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_101', get_index_8)
        mul_5 = ops.mul(load_7, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf169', get_index_9, mul_6, None)
        return store


buf170: ExternKernelSchedulerNode(FallbackKernel)
buf170.writes = [StarDep(name='buf170')]
buf170.unmet_dependencies = [StarDep(name='buf169')]
buf170.met_dependencies = [StarDep(name='primals_100'), StarDep(name='relu_29')]
buf170.node.kernel = aten.convolution_backward


buf171: ExternKernelSchedulerNode(MultiOutput)
buf171.writes = [StarDep(name='buf171')]
buf171.unmet_dependencies = [StarDep(name='buf170')]
buf171.met_dependencies = []
buf171.node.kernel = None


buf172: ExternKernelSchedulerNode(MultiOutput)
buf172.writes = [StarDep(name='buf172')]
buf172.unmet_dependencies = [StarDep(name='buf170')]
buf172.met_dependencies = []
buf172.node.kernel = None


buf173: SchedulerNode(ComputedBuffer)
buf173.writes = 
    [   MemoryDep(name='buf173', index=c0, size=(256, 32)),
        MemoryDep(name='buf173', index=c0, size=(256,))]
buf173.unmet_dependencies = [MemoryDep(name='buf171', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf173.met_dependencies = [MemoryDep(name='relu_29', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf173.group.device = cpu
buf173.group.iteration = ((256,), (8, 4))
buf173.sizes = ([256], [8, 4])
class buf173_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_29', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf171', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf173', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf174: SchedulerNode(ComputedBuffer)
buf174.writes = 
    [   MemoryDep(name='buf174', index=c0, size=(256, 32)),
        MemoryDep(name='buf174', index=c0, size=(256,))]
buf174.unmet_dependencies = [MemoryDep(name='buf171', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf174.met_dependencies = 
    [   MemoryDep(name='convolution_32', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='relu_29', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='unsqueeze_454', index=c0, size=(256, 32))]
buf174.group.device = cpu
buf174.group.iteration = ((256,), (8, 4))
buf174.sizes = ([256], [8, 4])
class buf174_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_29', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf171', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_32', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_454', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf174', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf175: SchedulerNode(ComputedBuffer)
buf175.writes = [MemoryDep(name='buf175', index=c0, size=(256,))]
buf175.unmet_dependencies = [MemoryDep(name='buf174', index=c0, size=(256,))]
buf175.met_dependencies = [MemoryDep(name='squeeze_97', index=c0, size=(256,))]
buf175.group.device = cpu
buf175.group.iteration = ((256,), ())
buf175.sizes = ([256], [])
class buf175_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_97', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf175', get_index_2, mul, None)
        return store


buf176: SchedulerNode(ComputedBuffer)
buf176.writes = [MemoryDep(name='buf176', index=c0, size=(8192,))]
buf176.unmet_dependencies = 
    [   MemoryDep(name='buf171', index=c0, size=(8192,)),
        MemoryDep(name='buf173', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf174', index=c1, size=(8, 256, 4))]
buf176.met_dependencies = 
    [   MemoryDep(name='convolution_32', index=c0, size=(8192,)),
        MemoryDep(name='primals_98', index=c1, size=(8, 256, 4)),
        MemoryDep(name='relu_29', index=c0, size=(8192,)),
        MemoryDep(name='squeeze_97', index=c1, size=(8, 256, 4)),
        MemoryDep(name='unsqueeze_454', index=c1, size=(8, 256, 4))]
buf176.group.device = cpu
buf176.group.iteration = ((8, 256, 4), ())
buf176.sizes = ([8, 256, 4], [])
class buf176_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_29', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf171', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_32', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_454', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf174', get_index_4)
        constant_2 = ops.constant(0.03125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_97', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_97', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf173', get_index_7)
        constant_3 = ops.constant(0.03125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_97', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_98', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf176', get_index_10, mul_6, None)
        return store


buf177: ExternKernelSchedulerNode(FallbackKernel)
buf177.writes = [StarDep(name='buf177')]
buf177.unmet_dependencies = [StarDep(name='buf176')]
buf177.met_dependencies = [StarDep(name='primals_97'), StarDep(name='relu_28')]
buf177.node.kernel = aten.convolution_backward


buf178: ExternKernelSchedulerNode(MultiOutput)
buf178.writes = [StarDep(name='buf178')]
buf178.unmet_dependencies = [StarDep(name='buf177')]
buf178.met_dependencies = []
buf178.node.kernel = None


buf179: ExternKernelSchedulerNode(MultiOutput)
buf179.writes = [StarDep(name='buf179')]
buf179.unmet_dependencies = [StarDep(name='buf177')]
buf179.met_dependencies = []
buf179.node.kernel = None


buf180: SchedulerNode(ComputedBuffer)
buf180.writes = 
    [   MemoryDep(name='buf180', index=c0, size=(256, 32)),
        MemoryDep(name='buf180', index=c0, size=(256,))]
buf180.unmet_dependencies = [MemoryDep(name='buf178', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf180.met_dependencies = [MemoryDep(name='relu_28', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf180.group.device = cpu
buf180.group.iteration = ((256,), (8, 4))
buf180.sizes = ([256], [8, 4])
class buf180_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_28', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf180', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf181: SchedulerNode(ComputedBuffer)
buf181.writes = 
    [   MemoryDep(name='buf181', index=c0, size=(256, 32)),
        MemoryDep(name='buf181', index=c0, size=(256,))]
buf181.unmet_dependencies = [MemoryDep(name='buf178', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf181.met_dependencies = 
    [   MemoryDep(name='convolution_31', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='relu_28', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='unsqueeze_466', index=c0, size=(256, 32))]
buf181.group.device = cpu
buf181.group.iteration = ((256,), (8, 4))
buf181.sizes = ([256], [8, 4])
class buf181_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_28', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_31', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_466', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf181', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf182: SchedulerNode(ComputedBuffer)
buf182.writes = [MemoryDep(name='buf182', index=c0, size=(256,))]
buf182.unmet_dependencies = [MemoryDep(name='buf181', index=c0, size=(256,))]
buf182.met_dependencies = [MemoryDep(name='squeeze_94', index=c0, size=(256,))]
buf182.group.device = cpu
buf182.group.iteration = ((256,), ())
buf182.sizes = ([256], [])
class buf182_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_94', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf182', get_index_2, mul, None)
        return store


buf183: SchedulerNode(ComputedBuffer)
buf183.writes = [MemoryDep(name='buf183', index=c0, size=(8192,))]
buf183.unmet_dependencies = 
    [   MemoryDep(name='buf178', index=c0, size=(8192,)),
        MemoryDep(name='buf180', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf181', index=c1, size=(8, 256, 4))]
buf183.met_dependencies = 
    [   MemoryDep(name='convolution_31', index=c0, size=(8192,)),
        MemoryDep(name='primals_95', index=c1, size=(8, 256, 4)),
        MemoryDep(name='relu_28', index=c0, size=(8192,)),
        MemoryDep(name='squeeze_94', index=c1, size=(8, 256, 4)),
        MemoryDep(name='unsqueeze_466', index=c1, size=(8, 256, 4))]
buf183.group.device = cpu
buf183.group.iteration = ((8, 256, 4), ())
buf183.sizes = ([8, 256, 4], [])
class buf183_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_28', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_31', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_466', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf181', get_index_4)
        constant_2 = ops.constant(0.03125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_94', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_94', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf180', get_index_7)
        constant_3 = ops.constant(0.03125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_94', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_95', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf183', get_index_10, mul_6, None)
        return store


buf184: ExternKernelSchedulerNode(FallbackKernel)
buf184.writes = [StarDep(name='buf184')]
buf184.unmet_dependencies = [StarDep(name='buf183')]
buf184.met_dependencies = [StarDep(name='primals_94'), StarDep(name='relu_27')]
buf184.node.kernel = aten.convolution_backward


buf185: ExternKernelSchedulerNode(MultiOutput)
buf185.writes = [StarDep(name='buf185')]
buf185.unmet_dependencies = [StarDep(name='buf184')]
buf185.met_dependencies = []
buf185.node.kernel = None


buf186: ExternKernelSchedulerNode(MultiOutput)
buf186.writes = [StarDep(name='buf186')]
buf186.unmet_dependencies = [StarDep(name='buf184')]
buf186.met_dependencies = []
buf186.node.kernel = None


buf187: SchedulerNode(ComputedBuffer)
buf187.writes = 
    [   MemoryDep(name='buf187', index=c0, size=(1024, 32)),
        MemoryDep(name='buf187', index=c0, size=(1024,))]
buf187.unmet_dependencies = 
    [   MemoryDep(name='buf165', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='buf185', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf187.met_dependencies = [MemoryDep(name='relu_27', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf187.group.device = cpu
buf187.group.iteration = ((1024,), (8, 4))
buf187.sizes = ([1024], [8, 4])
class buf187_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_27', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf165', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf185', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf187', torch.float32, torch.float32, 'sum', get_index_3, where)
        return reduction


buf188: SchedulerNode(ComputedBuffer)
buf188.writes = 
    [   MemoryDep(name='buf188', index=c0, size=(1024, 32)),
        MemoryDep(name='buf188', index=c0, size=(1024,))]
buf188.unmet_dependencies = 
    [   MemoryDep(name='buf165', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='buf185', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf188.met_dependencies = 
    [   MemoryDep(name='convolution_30', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='relu_27', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='unsqueeze_478', index=c0, size=(1024, 32))]
buf188.group.device = cpu
buf188.group.iteration = ((1024,), (8, 4))
buf188.sizes = ([1024], [8, 4])
class buf188_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_27', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf165', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf185', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_30', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_478', get_index_4)
        sub = ops.sub(load_3, load_4)
        mul = ops.mul(where, sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf188', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf189: SchedulerNode(ComputedBuffer)
buf189.writes = [MemoryDep(name='buf189', index=c0, size=(32768,))]
buf189.unmet_dependencies = 
    [   MemoryDep(name='buf165', index=c0, size=(32768,)),
        MemoryDep(name='buf185', index=c0, size=(32768,)),
        MemoryDep(name='buf187', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='buf188', index=c1, size=(8, 1024, 4))]
buf189.met_dependencies = 
    [   MemoryDep(name='convolution_30', index=c0, size=(32768,)),
        MemoryDep(name='primals_92', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='relu_27', index=c0, size=(32768,)),
        MemoryDep(name='squeeze_91', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='unsqueeze_478', index=c1, size=(8, 1024, 4))]
buf189.group.device = cpu
buf189.group.iteration = ((8, 1024, 4), ())
buf189.sizes = ([8, 1024, 4], [])
class buf189_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_27', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf165', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf185', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_30', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_478', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf188', get_index_5)
        constant_2 = ops.constant(0.03125, torch.float32)
        mul = ops.mul(load_5, constant_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_91', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_91', get_index_7)
        mul_1 = ops.mul(load_6, load_7)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf187', get_index_8)
        constant_3 = ops.constant(0.03125, torch.float32)
        mul_4 = ops.mul(load_8, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('squeeze_91', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('primals_92', get_index_10)
        mul_5 = ops.mul(load_9, load_10)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf189', get_index_11, mul_6, None)
        return store


buf190: SchedulerNode(ComputedBuffer)
buf190.writes = [MemoryDep(name='buf190', index=c0, size=(1024,))]
buf190.unmet_dependencies = [MemoryDep(name='buf188', index=c0, size=(1024,))]
buf190.met_dependencies = [MemoryDep(name='squeeze_91', index=c0, size=(1024,))]
buf190.group.device = cpu
buf190.group.iteration = ((1024,), ())
buf190.sizes = ([1024], [])
class buf190_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_91', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf190', get_index_2, mul, None)
        return store


buf191: ExternKernelSchedulerNode(FallbackKernel)
buf191.writes = [StarDep(name='buf191')]
buf191.unmet_dependencies = [StarDep(name='buf189')]
buf191.met_dependencies = [StarDep(name='primals_91'), StarDep(name='relu_26')]
buf191.node.kernel = aten.convolution_backward


buf192: ExternKernelSchedulerNode(MultiOutput)
buf192.writes = [StarDep(name='buf192')]
buf192.unmet_dependencies = [StarDep(name='buf191')]
buf192.met_dependencies = []
buf192.node.kernel = None


buf193: ExternKernelSchedulerNode(MultiOutput)
buf193.writes = [StarDep(name='buf193')]
buf193.unmet_dependencies = [StarDep(name='buf191')]
buf193.met_dependencies = []
buf193.node.kernel = None


buf194: SchedulerNode(ComputedBuffer)
buf194.writes = 
    [   MemoryDep(name='buf194', index=c0, size=(256, 32)),
        MemoryDep(name='buf194', index=c0, size=(256,))]
buf194.unmet_dependencies = [MemoryDep(name='buf192', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf194.met_dependencies = [MemoryDep(name='relu_26', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf194.group.device = cpu
buf194.group.iteration = ((256,), (8, 4))
buf194.sizes = ([256], [8, 4])
class buf194_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_26', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf192', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf194', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf195: SchedulerNode(ComputedBuffer)
buf195.writes = 
    [   MemoryDep(name='buf195', index=c0, size=(256, 32)),
        MemoryDep(name='buf195', index=c0, size=(256,))]
buf195.unmet_dependencies = [MemoryDep(name='buf192', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf195.met_dependencies = 
    [   MemoryDep(name='convolution_29', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='relu_26', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='unsqueeze_490', index=c0, size=(256, 32))]
buf195.group.device = cpu
buf195.group.iteration = ((256,), (8, 4))
buf195.sizes = ([256], [8, 4])
class buf195_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_26', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf192', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_29', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_490', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf195', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf196: SchedulerNode(ComputedBuffer)
buf196.writes = [MemoryDep(name='buf196', index=c0, size=(256,))]
buf196.unmet_dependencies = [MemoryDep(name='buf195', index=c0, size=(256,))]
buf196.met_dependencies = [MemoryDep(name='squeeze_88', index=c0, size=(256,))]
buf196.group.device = cpu
buf196.group.iteration = ((256,), ())
buf196.sizes = ([256], [])
class buf196_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_88', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf196', get_index_2, mul, None)
        return store


buf197: SchedulerNode(ComputedBuffer)
buf197.writes = [MemoryDep(name='buf197', index=c0, size=(8192,))]
buf197.unmet_dependencies = 
    [   MemoryDep(name='buf192', index=c0, size=(8192,)),
        MemoryDep(name='buf194', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf195', index=c1, size=(8, 256, 4))]
buf197.met_dependencies = 
    [   MemoryDep(name='convolution_29', index=c0, size=(8192,)),
        MemoryDep(name='primals_89', index=c1, size=(8, 256, 4)),
        MemoryDep(name='relu_26', index=c0, size=(8192,)),
        MemoryDep(name='squeeze_88', index=c1, size=(8, 256, 4)),
        MemoryDep(name='unsqueeze_490', index=c1, size=(8, 256, 4))]
buf197.group.device = cpu
buf197.group.iteration = ((8, 256, 4), ())
buf197.sizes = ([8, 256, 4], [])
class buf197_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_26', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf192', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_29', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_490', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf195', get_index_4)
        constant_2 = ops.constant(0.03125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_88', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_88', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf194', get_index_7)
        constant_3 = ops.constant(0.03125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_88', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_89', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf197', get_index_10, mul_6, None)
        return store


buf198: ExternKernelSchedulerNode(FallbackKernel)
buf198.writes = [StarDep(name='buf198')]
buf198.unmet_dependencies = [StarDep(name='buf197')]
buf198.met_dependencies = [StarDep(name='primals_88'), StarDep(name='relu_25')]
buf198.node.kernel = aten.convolution_backward


buf199: ExternKernelSchedulerNode(MultiOutput)
buf199.writes = [StarDep(name='buf199')]
buf199.unmet_dependencies = [StarDep(name='buf198')]
buf199.met_dependencies = []
buf199.node.kernel = None


buf200: ExternKernelSchedulerNode(MultiOutput)
buf200.writes = [StarDep(name='buf200')]
buf200.unmet_dependencies = [StarDep(name='buf198')]
buf200.met_dependencies = []
buf200.node.kernel = None


buf201: SchedulerNode(ComputedBuffer)
buf201.writes = 
    [   MemoryDep(name='buf201', index=c0, size=(256, 32)),
        MemoryDep(name='buf201', index=c0, size=(256,))]
buf201.unmet_dependencies = [MemoryDep(name='buf199', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf201.met_dependencies = [MemoryDep(name='relu_25', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf201.group.device = cpu
buf201.group.iteration = ((256,), (8, 4))
buf201.sizes = ([256], [8, 4])
class buf201_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_25', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf201', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf202: SchedulerNode(ComputedBuffer)
buf202.writes = 
    [   MemoryDep(name='buf202', index=c0, size=(256, 32)),
        MemoryDep(name='buf202', index=c0, size=(256,))]
buf202.unmet_dependencies = [MemoryDep(name='buf199', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf202.met_dependencies = 
    [   MemoryDep(name='convolution_28', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='relu_25', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='unsqueeze_502', index=c0, size=(256, 32))]
buf202.group.device = cpu
buf202.group.iteration = ((256,), (8, 4))
buf202.sizes = ([256], [8, 4])
class buf202_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_25', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_28', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_502', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf202', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf203: SchedulerNode(ComputedBuffer)
buf203.writes = [MemoryDep(name='buf203', index=c0, size=(256,))]
buf203.unmet_dependencies = [MemoryDep(name='buf202', index=c0, size=(256,))]
buf203.met_dependencies = [MemoryDep(name='squeeze_85', index=c0, size=(256,))]
buf203.group.device = cpu
buf203.group.iteration = ((256,), ())
buf203.sizes = ([256], [])
class buf203_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_85', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf203', get_index_2, mul, None)
        return store


buf204: SchedulerNode(ComputedBuffer)
buf204.writes = [MemoryDep(name='buf204', index=c0, size=(8192,))]
buf204.unmet_dependencies = 
    [   MemoryDep(name='buf199', index=c0, size=(8192,)),
        MemoryDep(name='buf201', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf202', index=c1, size=(8, 256, 4))]
buf204.met_dependencies = 
    [   MemoryDep(name='convolution_28', index=c0, size=(8192,)),
        MemoryDep(name='primals_86', index=c1, size=(8, 256, 4)),
        MemoryDep(name='relu_25', index=c0, size=(8192,)),
        MemoryDep(name='squeeze_85', index=c1, size=(8, 256, 4)),
        MemoryDep(name='unsqueeze_502', index=c1, size=(8, 256, 4))]
buf204.group.device = cpu
buf204.group.iteration = ((8, 256, 4), ())
buf204.sizes = ([8, 256, 4], [])
class buf204_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_25', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_28', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_502', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf202', get_index_4)
        constant_2 = ops.constant(0.03125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_85', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_85', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf201', get_index_7)
        constant_3 = ops.constant(0.03125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_85', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_86', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf204', get_index_10, mul_6, None)
        return store


buf205: ExternKernelSchedulerNode(FallbackKernel)
buf205.writes = [StarDep(name='buf205')]
buf205.unmet_dependencies = [StarDep(name='buf204')]
buf205.met_dependencies = [StarDep(name='primals_85'), StarDep(name='relu_24')]
buf205.node.kernel = aten.convolution_backward


buf206: ExternKernelSchedulerNode(MultiOutput)
buf206.writes = [StarDep(name='buf206')]
buf206.unmet_dependencies = [StarDep(name='buf205')]
buf206.met_dependencies = []
buf206.node.kernel = None


buf207: ExternKernelSchedulerNode(MultiOutput)
buf207.writes = [StarDep(name='buf207')]
buf207.unmet_dependencies = [StarDep(name='buf205')]
buf207.met_dependencies = []
buf207.node.kernel = None


buf208: SchedulerNode(ComputedBuffer)
buf208.writes = [MemoryDep(name='buf208', index=c0, size=(32768,))]
buf208.unmet_dependencies = 
    [   MemoryDep(name='buf165', index=c0, size=(32768,)),
        MemoryDep(name='buf185', index=c0, size=(32768,)),
        MemoryDep(name='buf206', index=c0, size=(32768,))]
buf208.met_dependencies = 
    [   MemoryDep(name='relu_24', index=c0, size=(32768,)),
        MemoryDep(name='relu_27', index=c0, size=(32768,))]
buf208.group.device = cpu
buf208.group.iteration = ((32768,), ())
buf208.sizes = ([32768], [])
class buf208_loop_body:
    var_ranges = {z0: 32768}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_24', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('relu_27', get_index_1)
        constant_2 = ops.constant(0, torch.float32)
        le_1 = ops.le(load_1, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf165', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf185', get_index_3)
        add = ops.add(load_2, load_3)
        where = ops.where(le_1, constant_3, add)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf206', get_index_4)
        add_1 = ops.add(where, load_4)
        where_1 = ops.where(le, constant_1, add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf208', get_index_5, where_1, None)
        return store


buf209: SchedulerNode(ComputedBuffer)
buf209.writes = 
    [   MemoryDep(name='buf209', index=c0, size=(1024, 32)),
        MemoryDep(name='buf209', index=c0, size=(1024,))]
buf209.unmet_dependencies = [MemoryDep(name='buf208', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf209.met_dependencies = []
buf209.group.device = cpu
buf209.group.iteration = ((1024,), (8, 4))
buf209.sizes = ([1024], [8, 4])
class buf209_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf209', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf210: SchedulerNode(ComputedBuffer)
buf210.writes = 
    [   MemoryDep(name='buf210', index=c0, size=(1024, 32)),
        MemoryDep(name='buf210', index=c0, size=(1024,))]
buf210.unmet_dependencies = [MemoryDep(name='buf208', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf210.met_dependencies = 
    [   MemoryDep(name='convolution_27', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='unsqueeze_514', index=c0, size=(1024, 32))]
buf210.group.device = cpu
buf210.group.iteration = ((1024,), (8, 4))
buf210.sizes = ([1024], [8, 4])
class buf210_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_27', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_514', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf210', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf211: SchedulerNode(ComputedBuffer)
buf211.writes = [MemoryDep(name='buf211', index=c0, size=(1024,))]
buf211.unmet_dependencies = [MemoryDep(name='buf210', index=c0, size=(1024,))]
buf211.met_dependencies = [MemoryDep(name='squeeze_82', index=c0, size=(1024,))]
buf211.group.device = cpu
buf211.group.iteration = ((1024,), ())
buf211.sizes = ([1024], [])
class buf211_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_82', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf211', get_index_2, mul, None)
        return store


buf212: SchedulerNode(ComputedBuffer)
buf212.writes = [MemoryDep(name='buf212', index=c0, size=(32768,))]
buf212.unmet_dependencies = 
    [   MemoryDep(name='buf208', index=c0, size=(32768,)),
        MemoryDep(name='buf209', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='buf210', index=c1, size=(8, 1024, 4))]
buf212.met_dependencies = 
    [   MemoryDep(name='convolution_27', index=c0, size=(32768,)),
        MemoryDep(name='primals_83', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='squeeze_82', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='unsqueeze_514', index=c1, size=(8, 1024, 4))]
buf212.group.device = cpu
buf212.group.iteration = ((8, 1024, 4), ())
buf212.sizes = ([8, 1024, 4], [])
class buf212_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_27', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_514', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf210', get_index_3)
        constant = ops.constant(0.03125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('squeeze_82', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_82', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf209', get_index_6)
        constant_1 = ops.constant(0.03125, torch.float32)
        mul_4 = ops.mul(load_6, constant_1)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_82', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_83', get_index_8)
        mul_5 = ops.mul(load_7, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf212', get_index_9, mul_6, None)
        return store


buf213: ExternKernelSchedulerNode(FallbackKernel)
buf213.writes = [StarDep(name='buf213')]
buf213.unmet_dependencies = [StarDep(name='buf212')]
buf213.met_dependencies = [StarDep(name='primals_82'), StarDep(name='relu_21')]
buf213.node.kernel = aten.convolution_backward


buf214: ExternKernelSchedulerNode(MultiOutput)
buf214.writes = [StarDep(name='buf214')]
buf214.unmet_dependencies = [StarDep(name='buf213')]
buf214.met_dependencies = []
buf214.node.kernel = None


buf215: ExternKernelSchedulerNode(MultiOutput)
buf215.writes = [StarDep(name='buf215')]
buf215.unmet_dependencies = [StarDep(name='buf213')]
buf215.met_dependencies = []
buf215.node.kernel = None


buf216: SchedulerNode(ComputedBuffer)
buf216.writes = 
    [   MemoryDep(name='buf216', index=c0, size=(1024, 32)),
        MemoryDep(name='buf216', index=c0, size=(1024,))]
buf216.unmet_dependencies = [MemoryDep(name='buf208', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf216.met_dependencies = 
    [   MemoryDep(name='convolution_26', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='unsqueeze_526', index=c0, size=(1024, 32))]
buf216.group.device = cpu
buf216.group.iteration = ((1024,), (8, 4))
buf216.sizes = ([1024], [8, 4])
class buf216_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_26', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_526', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf216', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf217: SchedulerNode(ComputedBuffer)
buf217.writes = [MemoryDep(name='buf217', index=c0, size=(1024,))]
buf217.unmet_dependencies = [MemoryDep(name='buf216', index=c0, size=(1024,))]
buf217.met_dependencies = [MemoryDep(name='squeeze_79', index=c0, size=(1024,))]
buf217.group.device = cpu
buf217.group.iteration = ((1024,), ())
buf217.sizes = ([1024], [])
class buf217_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_79', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf217', get_index_2, mul, None)
        return store


buf218: SchedulerNode(ComputedBuffer)
buf218.writes = [MemoryDep(name='buf218', index=c0, size=(32768,))]
buf218.unmet_dependencies = 
    [   MemoryDep(name='buf208', index=c0, size=(32768,)),
        MemoryDep(name='buf209', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='buf216', index=c1, size=(8, 1024, 4))]
buf218.met_dependencies = 
    [   MemoryDep(name='convolution_26', index=c0, size=(32768,)),
        MemoryDep(name='primals_80', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='squeeze_79', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='unsqueeze_526', index=c1, size=(8, 1024, 4))]
buf218.group.device = cpu
buf218.group.iteration = ((8, 1024, 4), ())
buf218.sizes = ([8, 1024, 4], [])
class buf218_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_26', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_526', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf216', get_index_3)
        constant = ops.constant(0.03125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('squeeze_79', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_79', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf209', get_index_6)
        constant_1 = ops.constant(0.03125, torch.float32)
        mul_4 = ops.mul(load_6, constant_1)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_79', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_80', get_index_8)
        mul_5 = ops.mul(load_7, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf218', get_index_9, mul_6, None)
        return store


buf219: ExternKernelSchedulerNode(FallbackKernel)
buf219.writes = [StarDep(name='buf219')]
buf219.unmet_dependencies = [StarDep(name='buf218')]
buf219.met_dependencies = [StarDep(name='primals_79'), StarDep(name='relu_23')]
buf219.node.kernel = aten.convolution_backward


buf220: ExternKernelSchedulerNode(MultiOutput)
buf220.writes = [StarDep(name='buf220')]
buf220.unmet_dependencies = [StarDep(name='buf219')]
buf220.met_dependencies = []
buf220.node.kernel = None


buf221: ExternKernelSchedulerNode(MultiOutput)
buf221.writes = [StarDep(name='buf221')]
buf221.unmet_dependencies = [StarDep(name='buf219')]
buf221.met_dependencies = []
buf221.node.kernel = None


buf222: SchedulerNode(ComputedBuffer)
buf222.writes = 
    [   MemoryDep(name='buf222', index=c0, size=(256, 32)),
        MemoryDep(name='buf222', index=c0, size=(256,))]
buf222.unmet_dependencies = [MemoryDep(name='buf220', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf222.met_dependencies = [MemoryDep(name='relu_23', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf222.group.device = cpu
buf222.group.iteration = ((256,), (8, 4))
buf222.sizes = ([256], [8, 4])
class buf222_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_23', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf220', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf222', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf223: SchedulerNode(ComputedBuffer)
buf223.writes = 
    [   MemoryDep(name='buf223', index=c0, size=(256, 32)),
        MemoryDep(name='buf223', index=c0, size=(256,))]
buf223.unmet_dependencies = [MemoryDep(name='buf220', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf223.met_dependencies = 
    [   MemoryDep(name='convolution_25', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='relu_23', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='unsqueeze_538', index=c0, size=(256, 32))]
buf223.group.device = cpu
buf223.group.iteration = ((256,), (8, 4))
buf223.sizes = ([256], [8, 4])
class buf223_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_23', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf220', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_25', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_538', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf223', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf224: SchedulerNode(ComputedBuffer)
buf224.writes = [MemoryDep(name='buf224', index=c0, size=(256,))]
buf224.unmet_dependencies = [MemoryDep(name='buf223', index=c0, size=(256,))]
buf224.met_dependencies = [MemoryDep(name='squeeze_76', index=c0, size=(256,))]
buf224.group.device = cpu
buf224.group.iteration = ((256,), ())
buf224.sizes = ([256], [])
class buf224_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_76', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf224', get_index_2, mul, None)
        return store


buf225: SchedulerNode(ComputedBuffer)
buf225.writes = [MemoryDep(name='buf225', index=c0, size=(8192,))]
buf225.unmet_dependencies = 
    [   MemoryDep(name='buf220', index=c0, size=(8192,)),
        MemoryDep(name='buf222', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf223', index=c1, size=(8, 256, 4))]
buf225.met_dependencies = 
    [   MemoryDep(name='convolution_25', index=c0, size=(8192,)),
        MemoryDep(name='primals_77', index=c1, size=(8, 256, 4)),
        MemoryDep(name='relu_23', index=c0, size=(8192,)),
        MemoryDep(name='squeeze_76', index=c1, size=(8, 256, 4)),
        MemoryDep(name='unsqueeze_538', index=c1, size=(8, 256, 4))]
buf225.group.device = cpu
buf225.group.iteration = ((8, 256, 4), ())
buf225.sizes = ([8, 256, 4], [])
class buf225_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_23', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf220', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_25', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_538', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf223', get_index_4)
        constant_2 = ops.constant(0.03125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_76', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_76', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf222', get_index_7)
        constant_3 = ops.constant(0.03125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_76', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_77', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf225', get_index_10, mul_6, None)
        return store


buf226: ExternKernelSchedulerNode(FallbackKernel)
buf226.writes = [StarDep(name='buf226')]
buf226.unmet_dependencies = [StarDep(name='buf225')]
buf226.met_dependencies = [StarDep(name='primals_76'), StarDep(name='relu_22')]
buf226.node.kernel = aten.convolution_backward


buf227: ExternKernelSchedulerNode(MultiOutput)
buf227.writes = [StarDep(name='buf227')]
buf227.unmet_dependencies = [StarDep(name='buf226')]
buf227.met_dependencies = []
buf227.node.kernel = None


buf228: ExternKernelSchedulerNode(MultiOutput)
buf228.writes = [StarDep(name='buf228')]
buf228.unmet_dependencies = [StarDep(name='buf226')]
buf228.met_dependencies = []
buf228.node.kernel = None


buf229: SchedulerNode(ComputedBuffer)
buf229.writes = 
    [   MemoryDep(name='buf229', index=c0, size=(256, 128)),
        MemoryDep(name='buf229', index=c0, size=(256,))]
buf229.unmet_dependencies = [MemoryDep(name='buf227', index=16*c0 + 4096*c1 + c2, size=(256, 8, 16))]
buf229.met_dependencies = [MemoryDep(name='relu_22', index=16*c0 + 4096*c1 + c2, size=(256, 8, 16))]
buf229.group.device = cpu
buf229.group.iteration = ((256,), (8, 16))
buf229.sizes = ([256], [8, 16])
class buf229_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 16}
    index0 = 16*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_22', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf227', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf229', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf230: SchedulerNode(ComputedBuffer)
buf230.writes = 
    [   MemoryDep(name='buf230', index=c0, size=(256, 128)),
        MemoryDep(name='buf230', index=c0, size=(256,))]
buf230.unmet_dependencies = [MemoryDep(name='buf227', index=16*c0 + 4096*c1 + c2, size=(256, 8, 16))]
buf230.met_dependencies = 
    [   MemoryDep(name='convolution_24', index=16*c0 + 4096*c1 + c2, size=(256, 8, 16)),
        MemoryDep(name='relu_22', index=16*c0 + 4096*c1 + c2, size=(256, 8, 16)),
        MemoryDep(name='unsqueeze_550', index=c0, size=(256, 128))]
buf230.group.device = cpu
buf230.group.iteration = ((256,), (8, 16))
buf230.sizes = ([256], [8, 16])
class buf230_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 16}
    index0 = 16*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_22', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf227', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_24', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_550', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf230', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf231: SchedulerNode(ComputedBuffer)
buf231.writes = [MemoryDep(name='buf231', index=c0, size=(256,))]
buf231.unmet_dependencies = [MemoryDep(name='buf230', index=c0, size=(256,))]
buf231.met_dependencies = [MemoryDep(name='squeeze_73', index=c0, size=(256,))]
buf231.group.device = cpu
buf231.group.iteration = ((256,), ())
buf231.sizes = ([256], [])
class buf231_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_73', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf231', get_index_2, mul, None)
        return store


buf232: SchedulerNode(ComputedBuffer)
buf232.writes = [MemoryDep(name='buf232', index=c0, size=(32768,))]
buf232.unmet_dependencies = 
    [   MemoryDep(name='buf227', index=c0, size=(32768,)),
        MemoryDep(name='buf229', index=c1, size=(8, 256, 16)),
        MemoryDep(name='buf230', index=c1, size=(8, 256, 16))]
buf232.met_dependencies = 
    [   MemoryDep(name='convolution_24', index=c0, size=(32768,)),
        MemoryDep(name='primals_74', index=c1, size=(8, 256, 16)),
        MemoryDep(name='relu_22', index=c0, size=(32768,)),
        MemoryDep(name='squeeze_73', index=c1, size=(8, 256, 16)),
        MemoryDep(name='unsqueeze_550', index=c1, size=(8, 256, 16))]
buf232.group.device = cpu
buf232.group.iteration = ((8, 256, 16), ())
buf232.sizes = ([8, 256, 16], [])
class buf232_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 16}
    index0 = 4096*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_22', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf227', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_24', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_550', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf230', get_index_4)
        constant_2 = ops.constant(0.0078125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_73', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_73', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf229', get_index_7)
        constant_3 = ops.constant(0.0078125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_73', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_74', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf232', get_index_10, mul_6, None)
        return store


buf233: ExternKernelSchedulerNode(FallbackKernel)
buf233.writes = [StarDep(name='buf233')]
buf233.unmet_dependencies = [StarDep(name='buf232')]
buf233.met_dependencies = [StarDep(name='primals_73'), StarDep(name='relu_21')]
buf233.node.kernel = aten.convolution_backward


buf234: ExternKernelSchedulerNode(MultiOutput)
buf234.writes = [StarDep(name='buf234')]
buf234.unmet_dependencies = [StarDep(name='buf233')]
buf234.met_dependencies = []
buf234.node.kernel = None


buf235: ExternKernelSchedulerNode(MultiOutput)
buf235.writes = [StarDep(name='buf235')]
buf235.unmet_dependencies = [StarDep(name='buf233')]
buf235.met_dependencies = []
buf235.node.kernel = None


buf236: SchedulerNode(ComputedBuffer)
buf236.writes = 
    [   MemoryDep(name='buf236', index=c0, size=(512, 128)),
        MemoryDep(name='buf236', index=c0, size=(512,))]
buf236.unmet_dependencies = 
    [   MemoryDep(name='buf214', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16)),
        MemoryDep(name='buf234', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16))]
buf236.met_dependencies = [MemoryDep(name='relu_21', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16))]
buf236.group.device = cpu
buf236.group.iteration = ((512,), (8, 16))
buf236.sizes = ([512], [8, 16])
class buf236_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_21', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf214', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf234', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf236', torch.float32, torch.float32, 'sum', get_index_3, where)
        return reduction


buf237: SchedulerNode(ComputedBuffer)
buf237.writes = 
    [   MemoryDep(name='buf237', index=c0, size=(512, 128)),
        MemoryDep(name='buf237', index=c0, size=(512,))]
buf237.unmet_dependencies = 
    [   MemoryDep(name='buf214', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16)),
        MemoryDep(name='buf234', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16))]
buf237.met_dependencies = 
    [   MemoryDep(name='convolution_23', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16)),
        MemoryDep(name='relu_21', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16)),
        MemoryDep(name='unsqueeze_562', index=c0, size=(512, 128))]
buf237.group.device = cpu
buf237.group.iteration = ((512,), (8, 16))
buf237.sizes = ([512], [8, 16])
class buf237_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_21', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf214', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf234', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_23', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_562', get_index_4)
        sub = ops.sub(load_3, load_4)
        mul = ops.mul(where, sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf237', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf238: SchedulerNode(ComputedBuffer)
buf238.writes = [MemoryDep(name='buf238', index=c0, size=(65536,))]
buf238.unmet_dependencies = 
    [   MemoryDep(name='buf214', index=c0, size=(65536,)),
        MemoryDep(name='buf234', index=c0, size=(65536,)),
        MemoryDep(name='buf236', index=c1, size=(8, 512, 16)),
        MemoryDep(name='buf237', index=c1, size=(8, 512, 16))]
buf238.met_dependencies = 
    [   MemoryDep(name='convolution_23', index=c0, size=(65536,)),
        MemoryDep(name='primals_71', index=c1, size=(8, 512, 16)),
        MemoryDep(name='relu_21', index=c0, size=(65536,)),
        MemoryDep(name='squeeze_70', index=c1, size=(8, 512, 16)),
        MemoryDep(name='unsqueeze_562', index=c1, size=(8, 512, 16))]
buf238.group.device = cpu
buf238.group.iteration = ((8, 512, 16), ())
buf238.sizes = ([8, 512, 16], [])
class buf238_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 16}
    index0 = 8192*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_21', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf214', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf234', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_23', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_562', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf237', get_index_5)
        constant_2 = ops.constant(0.0078125, torch.float32)
        mul = ops.mul(load_5, constant_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_70', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_70', get_index_7)
        mul_1 = ops.mul(load_6, load_7)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf236', get_index_8)
        constant_3 = ops.constant(0.0078125, torch.float32)
        mul_4 = ops.mul(load_8, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('squeeze_70', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('primals_71', get_index_10)
        mul_5 = ops.mul(load_9, load_10)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf238', get_index_11, mul_6, None)
        return store


buf239: SchedulerNode(ComputedBuffer)
buf239.writes = [MemoryDep(name='buf239', index=c0, size=(512,))]
buf239.unmet_dependencies = [MemoryDep(name='buf237', index=c0, size=(512,))]
buf239.met_dependencies = [MemoryDep(name='squeeze_70', index=c0, size=(512,))]
buf239.group.device = cpu
buf239.group.iteration = ((512,), ())
buf239.sizes = ([512], [])
class buf239_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_70', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf239', get_index_2, mul, None)
        return store


buf240: ExternKernelSchedulerNode(FallbackKernel)
buf240.writes = [StarDep(name='buf240')]
buf240.unmet_dependencies = [StarDep(name='buf238')]
buf240.met_dependencies = [StarDep(name='primals_70'), StarDep(name='relu_20')]
buf240.node.kernel = aten.convolution_backward


buf241: ExternKernelSchedulerNode(MultiOutput)
buf241.writes = [StarDep(name='buf241')]
buf241.unmet_dependencies = [StarDep(name='buf240')]
buf241.met_dependencies = []
buf241.node.kernel = None


buf242: ExternKernelSchedulerNode(MultiOutput)
buf242.writes = [StarDep(name='buf242')]
buf242.unmet_dependencies = [StarDep(name='buf240')]
buf242.met_dependencies = []
buf242.node.kernel = None


buf243: SchedulerNode(ComputedBuffer)
buf243.writes = 
    [   MemoryDep(name='buf243', index=c0, size=(128, 128)),
        MemoryDep(name='buf243', index=c0, size=(128,))]
buf243.unmet_dependencies = [MemoryDep(name='buf241', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf243.met_dependencies = [MemoryDep(name='relu_20', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf243.group.device = cpu
buf243.group.iteration = ((128,), (8, 16))
buf243.sizes = ([128], [8, 16])
class buf243_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_20', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf241', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf243', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf244: SchedulerNode(ComputedBuffer)
buf244.writes = 
    [   MemoryDep(name='buf244', index=c0, size=(128, 128)),
        MemoryDep(name='buf244', index=c0, size=(128,))]
buf244.unmet_dependencies = [MemoryDep(name='buf241', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf244.met_dependencies = 
    [   MemoryDep(name='convolution_22', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='relu_20', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='unsqueeze_574', index=c0, size=(128, 128))]
buf244.group.device = cpu
buf244.group.iteration = ((128,), (8, 16))
buf244.sizes = ([128], [8, 16])
class buf244_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_20', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf241', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_22', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_574', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf244', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf245: SchedulerNode(ComputedBuffer)
buf245.writes = [MemoryDep(name='buf245', index=c0, size=(128,))]
buf245.unmet_dependencies = [MemoryDep(name='buf244', index=c0, size=(128,))]
buf245.met_dependencies = [MemoryDep(name='squeeze_67', index=c0, size=(128,))]
buf245.group.device = cpu
buf245.group.iteration = ((128,), ())
buf245.sizes = ([128], [])
class buf245_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_67', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf245', get_index_2, mul, None)
        return store


buf246: SchedulerNode(ComputedBuffer)
buf246.writes = [MemoryDep(name='buf246', index=c0, size=(16384,))]
buf246.unmet_dependencies = 
    [   MemoryDep(name='buf241', index=c0, size=(16384,)),
        MemoryDep(name='buf243', index=c1, size=(8, 128, 16)),
        MemoryDep(name='buf244', index=c1, size=(8, 128, 16))]
buf246.met_dependencies = 
    [   MemoryDep(name='convolution_22', index=c0, size=(16384,)),
        MemoryDep(name='primals_68', index=c1, size=(8, 128, 16)),
        MemoryDep(name='relu_20', index=c0, size=(16384,)),
        MemoryDep(name='squeeze_67', index=c1, size=(8, 128, 16)),
        MemoryDep(name='unsqueeze_574', index=c1, size=(8, 128, 16))]
buf246.group.device = cpu
buf246.group.iteration = ((8, 128, 16), ())
buf246.sizes = ([8, 128, 16], [])
class buf246_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_20', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf241', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_22', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_574', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf244', get_index_4)
        constant_2 = ops.constant(0.0078125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_67', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_67', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf243', get_index_7)
        constant_3 = ops.constant(0.0078125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_67', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_68', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf246', get_index_10, mul_6, None)
        return store


buf247: ExternKernelSchedulerNode(FallbackKernel)
buf247.writes = [StarDep(name='buf247')]
buf247.unmet_dependencies = [StarDep(name='buf246')]
buf247.met_dependencies = [StarDep(name='primals_67'), StarDep(name='relu_19')]
buf247.node.kernel = aten.convolution_backward


buf248: ExternKernelSchedulerNode(MultiOutput)
buf248.writes = [StarDep(name='buf248')]
buf248.unmet_dependencies = [StarDep(name='buf247')]
buf248.met_dependencies = []
buf248.node.kernel = None


buf249: ExternKernelSchedulerNode(MultiOutput)
buf249.writes = [StarDep(name='buf249')]
buf249.unmet_dependencies = [StarDep(name='buf247')]
buf249.met_dependencies = []
buf249.node.kernel = None


buf250: SchedulerNode(ComputedBuffer)
buf250.writes = 
    [   MemoryDep(name='buf250', index=c0, size=(128, 128)),
        MemoryDep(name='buf250', index=c0, size=(128,))]
buf250.unmet_dependencies = [MemoryDep(name='buf248', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf250.met_dependencies = [MemoryDep(name='relu_19', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf250.group.device = cpu
buf250.group.iteration = ((128,), (8, 16))
buf250.sizes = ([128], [8, 16])
class buf250_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_19', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf248', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf250', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf251: SchedulerNode(ComputedBuffer)
buf251.writes = 
    [   MemoryDep(name='buf251', index=c0, size=(128, 128)),
        MemoryDep(name='buf251', index=c0, size=(128,))]
buf251.unmet_dependencies = [MemoryDep(name='buf248', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf251.met_dependencies = 
    [   MemoryDep(name='convolution_21', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='relu_19', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='unsqueeze_586', index=c0, size=(128, 128))]
buf251.group.device = cpu
buf251.group.iteration = ((128,), (8, 16))
buf251.sizes = ([128], [8, 16])
class buf251_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_19', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf248', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_21', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_586', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf251', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf252: SchedulerNode(ComputedBuffer)
buf252.writes = [MemoryDep(name='buf252', index=c0, size=(128,))]
buf252.unmet_dependencies = [MemoryDep(name='buf251', index=c0, size=(128,))]
buf252.met_dependencies = [MemoryDep(name='squeeze_64', index=c0, size=(128,))]
buf252.group.device = cpu
buf252.group.iteration = ((128,), ())
buf252.sizes = ([128], [])
class buf252_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_64', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf252', get_index_2, mul, None)
        return store


buf253: SchedulerNode(ComputedBuffer)
buf253.writes = [MemoryDep(name='buf253', index=c0, size=(16384,))]
buf253.unmet_dependencies = 
    [   MemoryDep(name='buf248', index=c0, size=(16384,)),
        MemoryDep(name='buf250', index=c1, size=(8, 128, 16)),
        MemoryDep(name='buf251', index=c1, size=(8, 128, 16))]
buf253.met_dependencies = 
    [   MemoryDep(name='convolution_21', index=c0, size=(16384,)),
        MemoryDep(name='primals_65', index=c1, size=(8, 128, 16)),
        MemoryDep(name='relu_19', index=c0, size=(16384,)),
        MemoryDep(name='squeeze_64', index=c1, size=(8, 128, 16)),
        MemoryDep(name='unsqueeze_586', index=c1, size=(8, 128, 16))]
buf253.group.device = cpu
buf253.group.iteration = ((8, 128, 16), ())
buf253.sizes = ([8, 128, 16], [])
class buf253_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_19', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf248', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_21', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_586', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf251', get_index_4)
        constant_2 = ops.constant(0.0078125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_64', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_64', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf250', get_index_7)
        constant_3 = ops.constant(0.0078125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_64', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_65', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf253', get_index_10, mul_6, None)
        return store


buf254: ExternKernelSchedulerNode(FallbackKernel)
buf254.writes = [StarDep(name='buf254')]
buf254.unmet_dependencies = [StarDep(name='buf253')]
buf254.met_dependencies = [StarDep(name='primals_64'), StarDep(name='relu_18')]
buf254.node.kernel = aten.convolution_backward


buf255: ExternKernelSchedulerNode(MultiOutput)
buf255.writes = [StarDep(name='buf255')]
buf255.unmet_dependencies = [StarDep(name='buf254')]
buf255.met_dependencies = []
buf255.node.kernel = None


buf256: ExternKernelSchedulerNode(MultiOutput)
buf256.writes = [StarDep(name='buf256')]
buf256.unmet_dependencies = [StarDep(name='buf254')]
buf256.met_dependencies = []
buf256.node.kernel = None


buf257: SchedulerNode(ComputedBuffer)
buf257.writes = [MemoryDep(name='buf257', index=c0, size=(65536,))]
buf257.unmet_dependencies = 
    [   MemoryDep(name='buf214', index=c0, size=(65536,)),
        MemoryDep(name='buf234', index=c0, size=(65536,)),
        MemoryDep(name='buf255', index=c0, size=(65536,))]
buf257.met_dependencies = 
    [   MemoryDep(name='relu_18', index=c0, size=(65536,)),
        MemoryDep(name='relu_21', index=c0, size=(65536,))]
buf257.group.device = cpu
buf257.group.iteration = ((65536,), ())
buf257.sizes = ([65536], [])
class buf257_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_18', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('relu_21', get_index_1)
        constant_2 = ops.constant(0, torch.float32)
        le_1 = ops.le(load_1, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf214', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf234', get_index_3)
        add = ops.add(load_2, load_3)
        where = ops.where(le_1, constant_3, add)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf255', get_index_4)
        add_1 = ops.add(where, load_4)
        where_1 = ops.where(le, constant_1, add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf257', get_index_5, where_1, None)
        return store


buf258: SchedulerNode(ComputedBuffer)
buf258.writes = 
    [   MemoryDep(name='buf258', index=c0, size=(512, 128)),
        MemoryDep(name='buf258', index=c0, size=(512,))]
buf258.unmet_dependencies = [MemoryDep(name='buf257', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16))]
buf258.met_dependencies = []
buf258.group.device = cpu
buf258.group.iteration = ((512,), (8, 16))
buf258.sizes = ([512], [8, 16])
class buf258_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf258', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf259: SchedulerNode(ComputedBuffer)
buf259.writes = 
    [   MemoryDep(name='buf259', index=c0, size=(512, 128)),
        MemoryDep(name='buf259', index=c0, size=(512,))]
buf259.unmet_dependencies = [MemoryDep(name='buf257', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16))]
buf259.met_dependencies = 
    [   MemoryDep(name='convolution_20', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16)),
        MemoryDep(name='unsqueeze_598', index=c0, size=(512, 128))]
buf259.group.device = cpu
buf259.group.iteration = ((512,), (8, 16))
buf259.sizes = ([512], [8, 16])
class buf259_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_20', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_598', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf259', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf260: SchedulerNode(ComputedBuffer)
buf260.writes = [MemoryDep(name='buf260', index=c0, size=(512,))]
buf260.unmet_dependencies = [MemoryDep(name='buf259', index=c0, size=(512,))]
buf260.met_dependencies = [MemoryDep(name='squeeze_61', index=c0, size=(512,))]
buf260.group.device = cpu
buf260.group.iteration = ((512,), ())
buf260.sizes = ([512], [])
class buf260_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_61', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf260', get_index_2, mul, None)
        return store


buf261: SchedulerNode(ComputedBuffer)
buf261.writes = [MemoryDep(name='buf261', index=c0, size=(65536,))]
buf261.unmet_dependencies = 
    [   MemoryDep(name='buf257', index=c0, size=(65536,)),
        MemoryDep(name='buf258', index=c1, size=(8, 512, 16)),
        MemoryDep(name='buf259', index=c1, size=(8, 512, 16))]
buf261.met_dependencies = 
    [   MemoryDep(name='convolution_20', index=c0, size=(65536,)),
        MemoryDep(name='primals_62', index=c1, size=(8, 512, 16)),
        MemoryDep(name='squeeze_61', index=c1, size=(8, 512, 16)),
        MemoryDep(name='unsqueeze_598', index=c1, size=(8, 512, 16))]
buf261.group.device = cpu
buf261.group.iteration = ((8, 512, 16), ())
buf261.sizes = ([8, 512, 16], [])
class buf261_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 16}
    index0 = 8192*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_20', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_598', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf259', get_index_3)
        constant = ops.constant(0.0078125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('squeeze_61', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_61', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf258', get_index_6)
        constant_1 = ops.constant(0.0078125, torch.float32)
        mul_4 = ops.mul(load_6, constant_1)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_61', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_62', get_index_8)
        mul_5 = ops.mul(load_7, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf261', get_index_9, mul_6, None)
        return store


buf262: ExternKernelSchedulerNode(FallbackKernel)
buf262.writes = [StarDep(name='buf262')]
buf262.unmet_dependencies = [StarDep(name='buf261')]
buf262.met_dependencies = [StarDep(name='primals_61'), StarDep(name='relu_17')]
buf262.node.kernel = aten.convolution_backward


buf263: ExternKernelSchedulerNode(MultiOutput)
buf263.writes = [StarDep(name='buf263')]
buf263.unmet_dependencies = [StarDep(name='buf262')]
buf263.met_dependencies = []
buf263.node.kernel = None


buf264: ExternKernelSchedulerNode(MultiOutput)
buf264.writes = [StarDep(name='buf264')]
buf264.unmet_dependencies = [StarDep(name='buf262')]
buf264.met_dependencies = []
buf264.node.kernel = None


buf265: SchedulerNode(ComputedBuffer)
buf265.writes = 
    [   MemoryDep(name='buf265', index=c0, size=(128, 128)),
        MemoryDep(name='buf265', index=c0, size=(128,))]
buf265.unmet_dependencies = [MemoryDep(name='buf263', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf265.met_dependencies = [MemoryDep(name='relu_17', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf265.group.device = cpu
buf265.group.iteration = ((128,), (8, 16))
buf265.sizes = ([128], [8, 16])
class buf265_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_17', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf263', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf265', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf266: SchedulerNode(ComputedBuffer)
buf266.writes = 
    [   MemoryDep(name='buf266', index=c0, size=(128, 128)),
        MemoryDep(name='buf266', index=c0, size=(128,))]
buf266.unmet_dependencies = [MemoryDep(name='buf263', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf266.met_dependencies = 
    [   MemoryDep(name='convolution_19', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='relu_17', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='unsqueeze_610', index=c0, size=(128, 128))]
buf266.group.device = cpu
buf266.group.iteration = ((128,), (8, 16))
buf266.sizes = ([128], [8, 16])
class buf266_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_17', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf263', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_19', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_610', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf266', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf267: SchedulerNode(ComputedBuffer)
buf267.writes = [MemoryDep(name='buf267', index=c0, size=(128,))]
buf267.unmet_dependencies = [MemoryDep(name='buf266', index=c0, size=(128,))]
buf267.met_dependencies = [MemoryDep(name='squeeze_58', index=c0, size=(128,))]
buf267.group.device = cpu
buf267.group.iteration = ((128,), ())
buf267.sizes = ([128], [])
class buf267_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_58', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf267', get_index_2, mul, None)
        return store


buf268: SchedulerNode(ComputedBuffer)
buf268.writes = [MemoryDep(name='buf268', index=c0, size=(16384,))]
buf268.unmet_dependencies = 
    [   MemoryDep(name='buf263', index=c0, size=(16384,)),
        MemoryDep(name='buf265', index=c1, size=(8, 128, 16)),
        MemoryDep(name='buf266', index=c1, size=(8, 128, 16))]
buf268.met_dependencies = 
    [   MemoryDep(name='convolution_19', index=c0, size=(16384,)),
        MemoryDep(name='primals_59', index=c1, size=(8, 128, 16)),
        MemoryDep(name='relu_17', index=c0, size=(16384,)),
        MemoryDep(name='squeeze_58', index=c1, size=(8, 128, 16)),
        MemoryDep(name='unsqueeze_610', index=c1, size=(8, 128, 16))]
buf268.group.device = cpu
buf268.group.iteration = ((8, 128, 16), ())
buf268.sizes = ([8, 128, 16], [])
class buf268_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_17', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf263', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_19', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_610', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf266', get_index_4)
        constant_2 = ops.constant(0.0078125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_58', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_58', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf265', get_index_7)
        constant_3 = ops.constant(0.0078125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_58', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_59', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf268', get_index_10, mul_6, None)
        return store


buf269: ExternKernelSchedulerNode(FallbackKernel)
buf269.writes = [StarDep(name='buf269')]
buf269.unmet_dependencies = [StarDep(name='buf268')]
buf269.met_dependencies = [StarDep(name='primals_58'), StarDep(name='relu_16')]
buf269.node.kernel = aten.convolution_backward


buf270: ExternKernelSchedulerNode(MultiOutput)
buf270.writes = [StarDep(name='buf270')]
buf270.unmet_dependencies = [StarDep(name='buf269')]
buf270.met_dependencies = []
buf270.node.kernel = None


buf271: ExternKernelSchedulerNode(MultiOutput)
buf271.writes = [StarDep(name='buf271')]
buf271.unmet_dependencies = [StarDep(name='buf269')]
buf271.met_dependencies = []
buf271.node.kernel = None


buf272: SchedulerNode(ComputedBuffer)
buf272.writes = 
    [   MemoryDep(name='buf272', index=c0, size=(128, 128)),
        MemoryDep(name='buf272', index=c0, size=(128,))]
buf272.unmet_dependencies = [MemoryDep(name='buf270', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf272.met_dependencies = [MemoryDep(name='relu_16', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf272.group.device = cpu
buf272.group.iteration = ((128,), (8, 16))
buf272.sizes = ([128], [8, 16])
class buf272_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_16', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf270', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf272', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf273: SchedulerNode(ComputedBuffer)
buf273.writes = 
    [   MemoryDep(name='buf273', index=c0, size=(128, 128)),
        MemoryDep(name='buf273', index=c0, size=(128,))]
buf273.unmet_dependencies = [MemoryDep(name='buf270', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf273.met_dependencies = 
    [   MemoryDep(name='convolution_18', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='relu_16', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='unsqueeze_622', index=c0, size=(128, 128))]
buf273.group.device = cpu
buf273.group.iteration = ((128,), (8, 16))
buf273.sizes = ([128], [8, 16])
class buf273_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_16', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf270', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_18', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_622', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf273', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf274: SchedulerNode(ComputedBuffer)
buf274.writes = [MemoryDep(name='buf274', index=c0, size=(128,))]
buf274.unmet_dependencies = [MemoryDep(name='buf273', index=c0, size=(128,))]
buf274.met_dependencies = [MemoryDep(name='squeeze_55', index=c0, size=(128,))]
buf274.group.device = cpu
buf274.group.iteration = ((128,), ())
buf274.sizes = ([128], [])
class buf274_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_55', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf274', get_index_2, mul, None)
        return store


buf275: SchedulerNode(ComputedBuffer)
buf275.writes = [MemoryDep(name='buf275', index=c0, size=(16384,))]
buf275.unmet_dependencies = 
    [   MemoryDep(name='buf270', index=c0, size=(16384,)),
        MemoryDep(name='buf272', index=c1, size=(8, 128, 16)),
        MemoryDep(name='buf273', index=c1, size=(8, 128, 16))]
buf275.met_dependencies = 
    [   MemoryDep(name='convolution_18', index=c0, size=(16384,)),
        MemoryDep(name='primals_56', index=c1, size=(8, 128, 16)),
        MemoryDep(name='relu_16', index=c0, size=(16384,)),
        MemoryDep(name='squeeze_55', index=c1, size=(8, 128, 16)),
        MemoryDep(name='unsqueeze_622', index=c1, size=(8, 128, 16))]
buf275.group.device = cpu
buf275.group.iteration = ((8, 128, 16), ())
buf275.sizes = ([8, 128, 16], [])
class buf275_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_16', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf270', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_18', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_622', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf273', get_index_4)
        constant_2 = ops.constant(0.0078125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_55', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_55', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf272', get_index_7)
        constant_3 = ops.constant(0.0078125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_55', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_56', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf275', get_index_10, mul_6, None)
        return store


buf276: ExternKernelSchedulerNode(FallbackKernel)
buf276.writes = [StarDep(name='buf276')]
buf276.unmet_dependencies = [StarDep(name='buf275')]
buf276.met_dependencies = [StarDep(name='primals_55'), StarDep(name='relu_15')]
buf276.node.kernel = aten.convolution_backward


buf277: ExternKernelSchedulerNode(MultiOutput)
buf277.writes = [StarDep(name='buf277')]
buf277.unmet_dependencies = [StarDep(name='buf276')]
buf277.met_dependencies = []
buf277.node.kernel = None


buf278: ExternKernelSchedulerNode(MultiOutput)
buf278.writes = [StarDep(name='buf278')]
buf278.unmet_dependencies = [StarDep(name='buf276')]
buf278.met_dependencies = []
buf278.node.kernel = None


buf279: SchedulerNode(ComputedBuffer)
buf279.writes = 
    [   MemoryDep(name='buf279', index=c0, size=(512, 128)),
        MemoryDep(name='buf279', index=c0, size=(512,))]
buf279.unmet_dependencies = 
    [   MemoryDep(name='buf257', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16)),
        MemoryDep(name='buf277', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16))]
buf279.met_dependencies = [MemoryDep(name='relu_15', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16))]
buf279.group.device = cpu
buf279.group.iteration = ((512,), (8, 16))
buf279.sizes = ([512], [8, 16])
class buf279_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_15', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf277', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf279', torch.float32, torch.float32, 'sum', get_index_3, where)
        return reduction


buf280: SchedulerNode(ComputedBuffer)
buf280.writes = 
    [   MemoryDep(name='buf280', index=c0, size=(512, 128)),
        MemoryDep(name='buf280', index=c0, size=(512,))]
buf280.unmet_dependencies = 
    [   MemoryDep(name='buf257', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16)),
        MemoryDep(name='buf277', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16))]
buf280.met_dependencies = 
    [   MemoryDep(name='convolution_17', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16)),
        MemoryDep(name='relu_15', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16)),
        MemoryDep(name='unsqueeze_634', index=c0, size=(512, 128))]
buf280.group.device = cpu
buf280.group.iteration = ((512,), (8, 16))
buf280.sizes = ([512], [8, 16])
class buf280_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_15', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf277', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_17', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_634', get_index_4)
        sub = ops.sub(load_3, load_4)
        mul = ops.mul(where, sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf280', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf281: SchedulerNode(ComputedBuffer)
buf281.writes = [MemoryDep(name='buf281', index=c0, size=(65536,))]
buf281.unmet_dependencies = 
    [   MemoryDep(name='buf257', index=c0, size=(65536,)),
        MemoryDep(name='buf277', index=c0, size=(65536,)),
        MemoryDep(name='buf279', index=c1, size=(8, 512, 16)),
        MemoryDep(name='buf280', index=c1, size=(8, 512, 16))]
buf281.met_dependencies = 
    [   MemoryDep(name='convolution_17', index=c0, size=(65536,)),
        MemoryDep(name='primals_53', index=c1, size=(8, 512, 16)),
        MemoryDep(name='relu_15', index=c0, size=(65536,)),
        MemoryDep(name='squeeze_52', index=c1, size=(8, 512, 16)),
        MemoryDep(name='unsqueeze_634', index=c1, size=(8, 512, 16))]
buf281.group.device = cpu
buf281.group.iteration = ((8, 512, 16), ())
buf281.sizes = ([8, 512, 16], [])
class buf281_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 16}
    index0 = 8192*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_15', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf277', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_17', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_634', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf280', get_index_5)
        constant_2 = ops.constant(0.0078125, torch.float32)
        mul = ops.mul(load_5, constant_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_52', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_52', get_index_7)
        mul_1 = ops.mul(load_6, load_7)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf279', get_index_8)
        constant_3 = ops.constant(0.0078125, torch.float32)
        mul_4 = ops.mul(load_8, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('squeeze_52', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('primals_53', get_index_10)
        mul_5 = ops.mul(load_9, load_10)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf281', get_index_11, mul_6, None)
        return store


buf282: SchedulerNode(ComputedBuffer)
buf282.writes = [MemoryDep(name='buf282', index=c0, size=(512,))]
buf282.unmet_dependencies = [MemoryDep(name='buf280', index=c0, size=(512,))]
buf282.met_dependencies = [MemoryDep(name='squeeze_52', index=c0, size=(512,))]
buf282.group.device = cpu
buf282.group.iteration = ((512,), ())
buf282.sizes = ([512], [])
class buf282_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_52', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf282', get_index_2, mul, None)
        return store


buf283: ExternKernelSchedulerNode(FallbackKernel)
buf283.writes = [StarDep(name='buf283')]
buf283.unmet_dependencies = [StarDep(name='buf281')]
buf283.met_dependencies = [StarDep(name='primals_52'), StarDep(name='relu_14')]
buf283.node.kernel = aten.convolution_backward


buf284: ExternKernelSchedulerNode(MultiOutput)
buf284.writes = [StarDep(name='buf284')]
buf284.unmet_dependencies = [StarDep(name='buf283')]
buf284.met_dependencies = []
buf284.node.kernel = None


buf285: ExternKernelSchedulerNode(MultiOutput)
buf285.writes = [StarDep(name='buf285')]
buf285.unmet_dependencies = [StarDep(name='buf283')]
buf285.met_dependencies = []
buf285.node.kernel = None


buf286: SchedulerNode(ComputedBuffer)
buf286.writes = 
    [   MemoryDep(name='buf286', index=c0, size=(128, 128)),
        MemoryDep(name='buf286', index=c0, size=(128,))]
buf286.unmet_dependencies = [MemoryDep(name='buf284', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf286.met_dependencies = [MemoryDep(name='relu_14', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf286.group.device = cpu
buf286.group.iteration = ((128,), (8, 16))
buf286.sizes = ([128], [8, 16])
class buf286_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_14', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf284', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf286', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf287: SchedulerNode(ComputedBuffer)
buf287.writes = 
    [   MemoryDep(name='buf287', index=c0, size=(128, 128)),
        MemoryDep(name='buf287', index=c0, size=(128,))]
buf287.unmet_dependencies = [MemoryDep(name='buf284', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf287.met_dependencies = 
    [   MemoryDep(name='convolution_16', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='relu_14', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='unsqueeze_646', index=c0, size=(128, 128))]
buf287.group.device = cpu
buf287.group.iteration = ((128,), (8, 16))
buf287.sizes = ([128], [8, 16])
class buf287_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_14', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf284', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_16', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_646', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf287', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf288: SchedulerNode(ComputedBuffer)
buf288.writes = [MemoryDep(name='buf288', index=c0, size=(128,))]
buf288.unmet_dependencies = [MemoryDep(name='buf287', index=c0, size=(128,))]
buf288.met_dependencies = [MemoryDep(name='squeeze_49', index=c0, size=(128,))]
buf288.group.device = cpu
buf288.group.iteration = ((128,), ())
buf288.sizes = ([128], [])
class buf288_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf287', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_49', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf288', get_index_2, mul, None)
        return store


buf289: SchedulerNode(ComputedBuffer)
buf289.writes = [MemoryDep(name='buf289', index=c0, size=(16384,))]
buf289.unmet_dependencies = 
    [   MemoryDep(name='buf284', index=c0, size=(16384,)),
        MemoryDep(name='buf286', index=c1, size=(8, 128, 16)),
        MemoryDep(name='buf287', index=c1, size=(8, 128, 16))]
buf289.met_dependencies = 
    [   MemoryDep(name='convolution_16', index=c0, size=(16384,)),
        MemoryDep(name='primals_50', index=c1, size=(8, 128, 16)),
        MemoryDep(name='relu_14', index=c0, size=(16384,)),
        MemoryDep(name='squeeze_49', index=c1, size=(8, 128, 16)),
        MemoryDep(name='unsqueeze_646', index=c1, size=(8, 128, 16))]
buf289.group.device = cpu
buf289.group.iteration = ((8, 128, 16), ())
buf289.sizes = ([8, 128, 16], [])
class buf289_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_14', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf284', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_16', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_646', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf287', get_index_4)
        constant_2 = ops.constant(0.0078125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_49', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_49', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf286', get_index_7)
        constant_3 = ops.constant(0.0078125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_49', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_50', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf289', get_index_10, mul_6, None)
        return store


buf290: ExternKernelSchedulerNode(FallbackKernel)
buf290.writes = [StarDep(name='buf290')]
buf290.unmet_dependencies = [StarDep(name='buf289')]
buf290.met_dependencies = [StarDep(name='primals_49'), StarDep(name='relu_13')]
buf290.node.kernel = aten.convolution_backward


buf291: ExternKernelSchedulerNode(MultiOutput)
buf291.writes = [StarDep(name='buf291')]
buf291.unmet_dependencies = [StarDep(name='buf290')]
buf291.met_dependencies = []
buf291.node.kernel = None


buf292: ExternKernelSchedulerNode(MultiOutput)
buf292.writes = [StarDep(name='buf292')]
buf292.unmet_dependencies = [StarDep(name='buf290')]
buf292.met_dependencies = []
buf292.node.kernel = None


buf293: SchedulerNode(ComputedBuffer)
buf293.writes = 
    [   MemoryDep(name='buf293', index=c0, size=(128, 128)),
        MemoryDep(name='buf293', index=c0, size=(128,))]
buf293.unmet_dependencies = [MemoryDep(name='buf291', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf293.met_dependencies = [MemoryDep(name='relu_13', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf293.group.device = cpu
buf293.group.iteration = ((128,), (8, 16))
buf293.sizes = ([128], [8, 16])
class buf293_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_13', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf291', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf293', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf294: SchedulerNode(ComputedBuffer)
buf294.writes = 
    [   MemoryDep(name='buf294', index=c0, size=(128, 128)),
        MemoryDep(name='buf294', index=c0, size=(128,))]
buf294.unmet_dependencies = [MemoryDep(name='buf291', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf294.met_dependencies = 
    [   MemoryDep(name='convolution_15', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='relu_13', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='unsqueeze_658', index=c0, size=(128, 128))]
buf294.group.device = cpu
buf294.group.iteration = ((128,), (8, 16))
buf294.sizes = ([128], [8, 16])
class buf294_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_13', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf291', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_15', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_658', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf294', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf295: SchedulerNode(ComputedBuffer)
buf295.writes = [MemoryDep(name='buf295', index=c0, size=(128,))]
buf295.unmet_dependencies = [MemoryDep(name='buf294', index=c0, size=(128,))]
buf295.met_dependencies = [MemoryDep(name='squeeze_46', index=c0, size=(128,))]
buf295.group.device = cpu
buf295.group.iteration = ((128,), ())
buf295.sizes = ([128], [])
class buf295_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_46', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf295', get_index_2, mul, None)
        return store


buf296: SchedulerNode(ComputedBuffer)
buf296.writes = [MemoryDep(name='buf296', index=c0, size=(16384,))]
buf296.unmet_dependencies = 
    [   MemoryDep(name='buf291', index=c0, size=(16384,)),
        MemoryDep(name='buf293', index=c1, size=(8, 128, 16)),
        MemoryDep(name='buf294', index=c1, size=(8, 128, 16))]
buf296.met_dependencies = 
    [   MemoryDep(name='convolution_15', index=c0, size=(16384,)),
        MemoryDep(name='primals_47', index=c1, size=(8, 128, 16)),
        MemoryDep(name='relu_13', index=c0, size=(16384,)),
        MemoryDep(name='squeeze_46', index=c1, size=(8, 128, 16)),
        MemoryDep(name='unsqueeze_658', index=c1, size=(8, 128, 16))]
buf296.group.device = cpu
buf296.group.iteration = ((8, 128, 16), ())
buf296.sizes = ([8, 128, 16], [])
class buf296_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_13', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf291', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_15', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_658', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf294', get_index_4)
        constant_2 = ops.constant(0.0078125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_46', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_46', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf293', get_index_7)
        constant_3 = ops.constant(0.0078125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_46', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_47', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf296', get_index_10, mul_6, None)
        return store


buf297: ExternKernelSchedulerNode(FallbackKernel)
buf297.writes = [StarDep(name='buf297')]
buf297.unmet_dependencies = [StarDep(name='buf296')]
buf297.met_dependencies = [StarDep(name='primals_46'), StarDep(name='relu_12')]
buf297.node.kernel = aten.convolution_backward


buf298: ExternKernelSchedulerNode(MultiOutput)
buf298.writes = [StarDep(name='buf298')]
buf298.unmet_dependencies = [StarDep(name='buf297')]
buf298.met_dependencies = []
buf298.node.kernel = None


buf299: ExternKernelSchedulerNode(MultiOutput)
buf299.writes = [StarDep(name='buf299')]
buf299.unmet_dependencies = [StarDep(name='buf297')]
buf299.met_dependencies = []
buf299.node.kernel = None


buf300: SchedulerNode(ComputedBuffer)
buf300.writes = [MemoryDep(name='buf300', index=c0, size=(65536,))]
buf300.unmet_dependencies = 
    [   MemoryDep(name='buf257', index=c0, size=(65536,)),
        MemoryDep(name='buf277', index=c0, size=(65536,)),
        MemoryDep(name='buf298', index=c0, size=(65536,))]
buf300.met_dependencies = 
    [   MemoryDep(name='relu_12', index=c0, size=(65536,)),
        MemoryDep(name='relu_15', index=c0, size=(65536,))]
buf300.group.device = cpu
buf300.group.iteration = ((65536,), ())
buf300.sizes = ([65536], [])
class buf300_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_12', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('relu_15', get_index_1)
        constant_2 = ops.constant(0, torch.float32)
        le_1 = ops.le(load_1, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf257', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf277', get_index_3)
        add = ops.add(load_2, load_3)
        where = ops.where(le_1, constant_3, add)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf298', get_index_4)
        add_1 = ops.add(where, load_4)
        where_1 = ops.where(le, constant_1, add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf300', get_index_5, where_1, None)
        return store


buf301: SchedulerNode(ComputedBuffer)
buf301.writes = 
    [   MemoryDep(name='buf301', index=c0, size=(512, 128)),
        MemoryDep(name='buf301', index=c0, size=(512,))]
buf301.unmet_dependencies = [MemoryDep(name='buf300', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16))]
buf301.met_dependencies = []
buf301.group.device = cpu
buf301.group.iteration = ((512,), (8, 16))
buf301.sizes = ([512], [8, 16])
class buf301_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf301', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf302: SchedulerNode(ComputedBuffer)
buf302.writes = 
    [   MemoryDep(name='buf302', index=c0, size=(512, 128)),
        MemoryDep(name='buf302', index=c0, size=(512,))]
buf302.unmet_dependencies = [MemoryDep(name='buf300', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16))]
buf302.met_dependencies = 
    [   MemoryDep(name='convolution_14', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16)),
        MemoryDep(name='unsqueeze_670', index=c0, size=(512, 128))]
buf302.group.device = cpu
buf302.group.iteration = ((512,), (8, 16))
buf302.sizes = ([512], [8, 16])
class buf302_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_14', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_670', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf302', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf303: SchedulerNode(ComputedBuffer)
buf303.writes = [MemoryDep(name='buf303', index=c0, size=(512,))]
buf303.unmet_dependencies = [MemoryDep(name='buf302', index=c0, size=(512,))]
buf303.met_dependencies = [MemoryDep(name='squeeze_43', index=c0, size=(512,))]
buf303.group.device = cpu
buf303.group.iteration = ((512,), ())
buf303.sizes = ([512], [])
class buf303_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_43', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf303', get_index_2, mul, None)
        return store


buf304: SchedulerNode(ComputedBuffer)
buf304.writes = [MemoryDep(name='buf304', index=c0, size=(65536,))]
buf304.unmet_dependencies = 
    [   MemoryDep(name='buf300', index=c0, size=(65536,)),
        MemoryDep(name='buf301', index=c1, size=(8, 512, 16)),
        MemoryDep(name='buf302', index=c1, size=(8, 512, 16))]
buf304.met_dependencies = 
    [   MemoryDep(name='convolution_14', index=c0, size=(65536,)),
        MemoryDep(name='primals_44', index=c1, size=(8, 512, 16)),
        MemoryDep(name='squeeze_43', index=c1, size=(8, 512, 16)),
        MemoryDep(name='unsqueeze_670', index=c1, size=(8, 512, 16))]
buf304.group.device = cpu
buf304.group.iteration = ((8, 512, 16), ())
buf304.sizes = ([8, 512, 16], [])
class buf304_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 16}
    index0 = 8192*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_14', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_670', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf302', get_index_3)
        constant = ops.constant(0.0078125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('squeeze_43', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_43', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf301', get_index_6)
        constant_1 = ops.constant(0.0078125, torch.float32)
        mul_4 = ops.mul(load_6, constant_1)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_43', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_44', get_index_8)
        mul_5 = ops.mul(load_7, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf304', get_index_9, mul_6, None)
        return store


buf305: ExternKernelSchedulerNode(FallbackKernel)
buf305.writes = [StarDep(name='buf305')]
buf305.unmet_dependencies = [StarDep(name='buf304')]
buf305.met_dependencies = [StarDep(name='primals_43'), StarDep(name='relu_9')]
buf305.node.kernel = aten.convolution_backward


buf306: ExternKernelSchedulerNode(MultiOutput)
buf306.writes = [StarDep(name='buf306')]
buf306.unmet_dependencies = [StarDep(name='buf305')]
buf306.met_dependencies = []
buf306.node.kernel = None


buf307: ExternKernelSchedulerNode(MultiOutput)
buf307.writes = [StarDep(name='buf307')]
buf307.unmet_dependencies = [StarDep(name='buf305')]
buf307.met_dependencies = []
buf307.node.kernel = None


buf308: SchedulerNode(ComputedBuffer)
buf308.writes = 
    [   MemoryDep(name='buf308', index=c0, size=(512, 128)),
        MemoryDep(name='buf308', index=c0, size=(512,))]
buf308.unmet_dependencies = [MemoryDep(name='buf300', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16))]
buf308.met_dependencies = 
    [   MemoryDep(name='convolution_13', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16)),
        MemoryDep(name='unsqueeze_682', index=c0, size=(512, 128))]
buf308.group.device = cpu
buf308.group.iteration = ((512,), (8, 16))
buf308.sizes = ([512], [8, 16])
class buf308_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_13', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_682', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf308', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf309: SchedulerNode(ComputedBuffer)
buf309.writes = [MemoryDep(name='buf309', index=c0, size=(512,))]
buf309.unmet_dependencies = [MemoryDep(name='buf308', index=c0, size=(512,))]
buf309.met_dependencies = [MemoryDep(name='squeeze_40', index=c0, size=(512,))]
buf309.group.device = cpu
buf309.group.iteration = ((512,), ())
buf309.sizes = ([512], [])
class buf309_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_40', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf309', get_index_2, mul, None)
        return store


buf310: SchedulerNode(ComputedBuffer)
buf310.writes = [MemoryDep(name='buf310', index=c0, size=(65536,))]
buf310.unmet_dependencies = 
    [   MemoryDep(name='buf300', index=c0, size=(65536,)),
        MemoryDep(name='buf301', index=c1, size=(8, 512, 16)),
        MemoryDep(name='buf308', index=c1, size=(8, 512, 16))]
buf310.met_dependencies = 
    [   MemoryDep(name='convolution_13', index=c0, size=(65536,)),
        MemoryDep(name='primals_41', index=c1, size=(8, 512, 16)),
        MemoryDep(name='squeeze_40', index=c1, size=(8, 512, 16)),
        MemoryDep(name='unsqueeze_682', index=c1, size=(8, 512, 16))]
buf310.group.device = cpu
buf310.group.iteration = ((8, 512, 16), ())
buf310.sizes = ([8, 512, 16], [])
class buf310_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 16}
    index0 = 8192*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_13', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_682', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf308', get_index_3)
        constant = ops.constant(0.0078125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('squeeze_40', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_40', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf301', get_index_6)
        constant_1 = ops.constant(0.0078125, torch.float32)
        mul_4 = ops.mul(load_6, constant_1)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_40', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_41', get_index_8)
        mul_5 = ops.mul(load_7, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf310', get_index_9, mul_6, None)
        return store


buf311: ExternKernelSchedulerNode(FallbackKernel)
buf311.writes = [StarDep(name='buf311')]
buf311.unmet_dependencies = [StarDep(name='buf310')]
buf311.met_dependencies = [StarDep(name='primals_40'), StarDep(name='relu_11')]
buf311.node.kernel = aten.convolution_backward


buf312: ExternKernelSchedulerNode(MultiOutput)
buf312.writes = [StarDep(name='buf312')]
buf312.unmet_dependencies = [StarDep(name='buf311')]
buf312.met_dependencies = []
buf312.node.kernel = None


buf313: ExternKernelSchedulerNode(MultiOutput)
buf313.writes = [StarDep(name='buf313')]
buf313.unmet_dependencies = [StarDep(name='buf311')]
buf313.met_dependencies = []
buf313.node.kernel = None


buf314: SchedulerNode(ComputedBuffer)
buf314.writes = 
    [   MemoryDep(name='buf314', index=c0, size=(128, 128)),
        MemoryDep(name='buf314', index=c0, size=(128,))]
buf314.unmet_dependencies = [MemoryDep(name='buf312', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf314.met_dependencies = [MemoryDep(name='relu_11', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf314.group.device = cpu
buf314.group.iteration = ((128,), (8, 16))
buf314.sizes = ([128], [8, 16])
class buf314_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_11', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf312', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf314', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf315: SchedulerNode(ComputedBuffer)
buf315.writes = 
    [   MemoryDep(name='buf315', index=c0, size=(128, 128)),
        MemoryDep(name='buf315', index=c0, size=(128,))]
buf315.unmet_dependencies = [MemoryDep(name='buf312', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf315.met_dependencies = 
    [   MemoryDep(name='convolution_12', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='relu_11', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='unsqueeze_694', index=c0, size=(128, 128))]
buf315.group.device = cpu
buf315.group.iteration = ((128,), (8, 16))
buf315.sizes = ([128], [8, 16])
class buf315_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_11', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf312', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_12', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_694', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf315', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf316: SchedulerNode(ComputedBuffer)
buf316.writes = [MemoryDep(name='buf316', index=c0, size=(128,))]
buf316.unmet_dependencies = [MemoryDep(name='buf315', index=c0, size=(128,))]
buf316.met_dependencies = [MemoryDep(name='squeeze_37', index=c0, size=(128,))]
buf316.group.device = cpu
buf316.group.iteration = ((128,), ())
buf316.sizes = ([128], [])
class buf316_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_37', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf316', get_index_2, mul, None)
        return store


buf317: SchedulerNode(ComputedBuffer)
buf317.writes = [MemoryDep(name='buf317', index=c0, size=(16384,))]
buf317.unmet_dependencies = 
    [   MemoryDep(name='buf312', index=c0, size=(16384,)),
        MemoryDep(name='buf314', index=c1, size=(8, 128, 16)),
        MemoryDep(name='buf315', index=c1, size=(8, 128, 16))]
buf317.met_dependencies = 
    [   MemoryDep(name='convolution_12', index=c0, size=(16384,)),
        MemoryDep(name='primals_38', index=c1, size=(8, 128, 16)),
        MemoryDep(name='relu_11', index=c0, size=(16384,)),
        MemoryDep(name='squeeze_37', index=c1, size=(8, 128, 16)),
        MemoryDep(name='unsqueeze_694', index=c1, size=(8, 128, 16))]
buf317.group.device = cpu
buf317.group.iteration = ((8, 128, 16), ())
buf317.sizes = ([8, 128, 16], [])
class buf317_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_11', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf312', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_12', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_694', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf315', get_index_4)
        constant_2 = ops.constant(0.0078125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_37', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_37', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf314', get_index_7)
        constant_3 = ops.constant(0.0078125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_37', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_38', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf317', get_index_10, mul_6, None)
        return store


buf318: ExternKernelSchedulerNode(FallbackKernel)
buf318.writes = [StarDep(name='buf318')]
buf318.unmet_dependencies = [StarDep(name='buf317')]
buf318.met_dependencies = [StarDep(name='primals_37'), StarDep(name='relu_10')]
buf318.node.kernel = aten.convolution_backward


buf319: ExternKernelSchedulerNode(MultiOutput)
buf319.writes = [StarDep(name='buf319')]
buf319.unmet_dependencies = [StarDep(name='buf318')]
buf319.met_dependencies = []
buf319.node.kernel = None


buf320: ExternKernelSchedulerNode(MultiOutput)
buf320.writes = [StarDep(name='buf320')]
buf320.unmet_dependencies = [StarDep(name='buf318')]
buf320.met_dependencies = []
buf320.node.kernel = None


buf321: SchedulerNode(ComputedBuffer)
buf321.writes = 
    [   MemoryDep(name='buf321', index=c0, size=(128, 512)),
        MemoryDep(name='buf321', index=c0, size=(128,))]
buf321.unmet_dependencies = [MemoryDep(name='buf319', index=64*c0 + 8192*c1 + c2, size=(128, 8, 64))]
buf321.met_dependencies = [MemoryDep(name='relu_10', index=64*c0 + 8192*c1 + c2, size=(128, 8, 64))]
buf321.group.device = cpu
buf321.group.iteration = ((128,), (8, 64))
buf321.sizes = ([128], [8, 64])
class buf321_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 64}
    index0 = 64*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_10', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf319', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf321', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf322: SchedulerNode(ComputedBuffer)
buf322.writes = 
    [   MemoryDep(name='buf322', index=c0, size=(128, 512)),
        MemoryDep(name='buf322', index=c0, size=(128,))]
buf322.unmet_dependencies = [MemoryDep(name='buf319', index=64*c0 + 8192*c1 + c2, size=(128, 8, 64))]
buf322.met_dependencies = 
    [   MemoryDep(name='convolution_11', index=64*c0 + 8192*c1 + c2, size=(128, 8, 64)),
        MemoryDep(name='relu_10', index=64*c0 + 8192*c1 + c2, size=(128, 8, 64)),
        MemoryDep(name='unsqueeze_706', index=c0, size=(128, 512))]
buf322.group.device = cpu
buf322.group.iteration = ((128,), (8, 64))
buf322.sizes = ([128], [8, 64])
class buf322_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 64}
    index0 = 64*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_10', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf319', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_11', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_706', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf322', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf323: SchedulerNode(ComputedBuffer)
buf323.writes = [MemoryDep(name='buf323', index=c0, size=(128,))]
buf323.unmet_dependencies = [MemoryDep(name='buf322', index=c0, size=(128,))]
buf323.met_dependencies = [MemoryDep(name='squeeze_34', index=c0, size=(128,))]
buf323.group.device = cpu
buf323.group.iteration = ((128,), ())
buf323.sizes = ([128], [])
class buf323_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_34', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf323', get_index_2, mul, None)
        return store


buf324: SchedulerNode(ComputedBuffer)
buf324.writes = [MemoryDep(name='buf324', index=c0, size=(65536,))]
buf324.unmet_dependencies = 
    [   MemoryDep(name='buf319', index=c0, size=(65536,)),
        MemoryDep(name='buf321', index=c1, size=(8, 128, 64)),
        MemoryDep(name='buf322', index=c1, size=(8, 128, 64))]
buf324.met_dependencies = 
    [   MemoryDep(name='convolution_11', index=c0, size=(65536,)),
        MemoryDep(name='primals_35', index=c1, size=(8, 128, 64)),
        MemoryDep(name='relu_10', index=c0, size=(65536,)),
        MemoryDep(name='squeeze_34', index=c1, size=(8, 128, 64)),
        MemoryDep(name='unsqueeze_706', index=c1, size=(8, 128, 64))]
buf324.group.device = cpu
buf324.group.iteration = ((8, 128, 64), ())
buf324.sizes = ([8, 128, 64], [])
class buf324_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 64}
    index0 = 8192*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_10', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf319', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_11', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_706', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf322', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_34', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_34', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf321', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_34', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_35', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf324', get_index_10, mul_6, None)
        return store


buf325: ExternKernelSchedulerNode(FallbackKernel)
buf325.writes = [StarDep(name='buf325')]
buf325.unmet_dependencies = [StarDep(name='buf324')]
buf325.met_dependencies = [StarDep(name='primals_34'), StarDep(name='relu_9')]
buf325.node.kernel = aten.convolution_backward


buf326: ExternKernelSchedulerNode(MultiOutput)
buf326.writes = [StarDep(name='buf326')]
buf326.unmet_dependencies = [StarDep(name='buf325')]
buf326.met_dependencies = []
buf326.node.kernel = None


buf327: ExternKernelSchedulerNode(MultiOutput)
buf327.writes = [StarDep(name='buf327')]
buf327.unmet_dependencies = [StarDep(name='buf325')]
buf327.met_dependencies = []
buf327.node.kernel = None


buf328: SchedulerNode(ComputedBuffer)
buf328.writes = 
    [   MemoryDep(name='buf328', index=c0, size=(256, 512)),
        MemoryDep(name='buf328', index=c0, size=(256,))]
buf328.unmet_dependencies = 
    [   MemoryDep(name='buf306', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64)),
        MemoryDep(name='buf326', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64))]
buf328.met_dependencies = [MemoryDep(name='relu_9', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64))]
buf328.group.device = cpu
buf328.group.iteration = ((256,), (8, 64))
buf328.sizes = ([256], [8, 64])
class buf328_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_9', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf306', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf326', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf328', torch.float32, torch.float32, 'sum', get_index_3, where)
        return reduction


buf329: SchedulerNode(ComputedBuffer)
buf329.writes = 
    [   MemoryDep(name='buf329', index=c0, size=(256, 512)),
        MemoryDep(name='buf329', index=c0, size=(256,))]
buf329.unmet_dependencies = 
    [   MemoryDep(name='buf306', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64)),
        MemoryDep(name='buf326', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64))]
buf329.met_dependencies = 
    [   MemoryDep(name='convolution_10', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64)),
        MemoryDep(name='relu_9', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64)),
        MemoryDep(name='unsqueeze_718', index=c0, size=(256, 512))]
buf329.group.device = cpu
buf329.group.iteration = ((256,), (8, 64))
buf329.sizes = ([256], [8, 64])
class buf329_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_9', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf306', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf326', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_10', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_718', get_index_4)
        sub = ops.sub(load_3, load_4)
        mul = ops.mul(where, sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf329', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf330: SchedulerNode(ComputedBuffer)
buf330.writes = [MemoryDep(name='buf330', index=c0, size=(131072,))]
buf330.unmet_dependencies = 
    [   MemoryDep(name='buf306', index=c0, size=(131072,)),
        MemoryDep(name='buf326', index=c0, size=(131072,)),
        MemoryDep(name='buf328', index=c1, size=(8, 256, 64)),
        MemoryDep(name='buf329', index=c1, size=(8, 256, 64))]
buf330.met_dependencies = 
    [   MemoryDep(name='convolution_10', index=c0, size=(131072,)),
        MemoryDep(name='primals_32', index=c1, size=(8, 256, 64)),
        MemoryDep(name='relu_9', index=c0, size=(131072,)),
        MemoryDep(name='squeeze_31', index=c1, size=(8, 256, 64)),
        MemoryDep(name='unsqueeze_718', index=c1, size=(8, 256, 64))]
buf330.group.device = cpu
buf330.group.iteration = ((8, 256, 64), ())
buf330.sizes = ([8, 256, 64], [])
class buf330_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 64}
    index0 = 16384*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_9', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf306', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf326', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_10', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_718', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf329', get_index_5)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_5, constant_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_31', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_31', get_index_7)
        mul_1 = ops.mul(load_6, load_7)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf328', get_index_8)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_8, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('squeeze_31', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('primals_32', get_index_10)
        mul_5 = ops.mul(load_9, load_10)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf330', get_index_11, mul_6, None)
        return store


buf331: SchedulerNode(ComputedBuffer)
buf331.writes = [MemoryDep(name='buf331', index=c0, size=(256,))]
buf331.unmet_dependencies = [MemoryDep(name='buf329', index=c0, size=(256,))]
buf331.met_dependencies = [MemoryDep(name='squeeze_31', index=c0, size=(256,))]
buf331.group.device = cpu
buf331.group.iteration = ((256,), ())
buf331.sizes = ([256], [])
class buf331_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_31', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf331', get_index_2, mul, None)
        return store


buf332: ExternKernelSchedulerNode(FallbackKernel)
buf332.writes = [StarDep(name='buf332')]
buf332.unmet_dependencies = [StarDep(name='buf330')]
buf332.met_dependencies = [StarDep(name='primals_31'), StarDep(name='relu_8')]
buf332.node.kernel = aten.convolution_backward


buf333: ExternKernelSchedulerNode(MultiOutput)
buf333.writes = [StarDep(name='buf333')]
buf333.unmet_dependencies = [StarDep(name='buf332')]
buf333.met_dependencies = []
buf333.node.kernel = None


buf334: ExternKernelSchedulerNode(MultiOutput)
buf334.writes = [StarDep(name='buf334')]
buf334.unmet_dependencies = [StarDep(name='buf332')]
buf334.met_dependencies = []
buf334.node.kernel = None


buf335: SchedulerNode(ComputedBuffer)
buf335.writes = 
    [   MemoryDep(name='buf335', index=c0, size=(64, 512)),
        MemoryDep(name='buf335', index=c0, size=(64,))]
buf335.unmet_dependencies = [MemoryDep(name='buf333', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf335.met_dependencies = [MemoryDep(name='relu_8', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf335.group.device = cpu
buf335.group.iteration = ((64,), (8, 64))
buf335.sizes = ([64], [8, 64])
class buf335_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_8', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf333', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf335', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf336: SchedulerNode(ComputedBuffer)
buf336.writes = 
    [   MemoryDep(name='buf336', index=c0, size=(64, 512)),
        MemoryDep(name='buf336', index=c0, size=(64,))]
buf336.unmet_dependencies = [MemoryDep(name='buf333', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf336.met_dependencies = 
    [   MemoryDep(name='convolution_9', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64)),
        MemoryDep(name='relu_8', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64)),
        MemoryDep(name='unsqueeze_730', index=c0, size=(64, 512))]
buf336.group.device = cpu
buf336.group.iteration = ((64,), (8, 64))
buf336.sizes = ([64], [8, 64])
class buf336_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_8', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf333', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_9', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_730', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf336', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf337: SchedulerNode(ComputedBuffer)
buf337.writes = [MemoryDep(name='buf337', index=c0, size=(64,))]
buf337.unmet_dependencies = [MemoryDep(name='buf336', index=c0, size=(64,))]
buf337.met_dependencies = [MemoryDep(name='squeeze_28', index=c0, size=(64,))]
buf337.group.device = cpu
buf337.group.iteration = ((64,), ())
buf337.sizes = ([64], [])
class buf337_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_28', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf337', get_index_2, mul, None)
        return store


buf338: SchedulerNode(ComputedBuffer)
buf338.writes = [MemoryDep(name='buf338', index=c0, size=(32768,))]
buf338.unmet_dependencies = 
    [   MemoryDep(name='buf333', index=c0, size=(32768,)),
        MemoryDep(name='buf335', index=c1, size=(8, 64, 64)),
        MemoryDep(name='buf336', index=c1, size=(8, 64, 64))]
buf338.met_dependencies = 
    [   MemoryDep(name='convolution_9', index=c0, size=(32768,)),
        MemoryDep(name='primals_29', index=c1, size=(8, 64, 64)),
        MemoryDep(name='relu_8', index=c0, size=(32768,)),
        MemoryDep(name='squeeze_28', index=c1, size=(8, 64, 64)),
        MemoryDep(name='unsqueeze_730', index=c1, size=(8, 64, 64))]
buf338.group.device = cpu
buf338.group.iteration = ((8, 64, 64), ())
buf338.sizes = ([8, 64, 64], [])
class buf338_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_8', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf333', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_9', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_730', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf336', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_28', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_28', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf335', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_28', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_29', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf338', get_index_10, mul_6, None)
        return store


buf339: ExternKernelSchedulerNode(FallbackKernel)
buf339.writes = [StarDep(name='buf339')]
buf339.unmet_dependencies = [StarDep(name='buf338')]
buf339.met_dependencies = [StarDep(name='primals_28'), StarDep(name='relu_7')]
buf339.node.kernel = aten.convolution_backward


buf340: ExternKernelSchedulerNode(MultiOutput)
buf340.writes = [StarDep(name='buf340')]
buf340.unmet_dependencies = [StarDep(name='buf339')]
buf340.met_dependencies = []
buf340.node.kernel = None


buf341: ExternKernelSchedulerNode(MultiOutput)
buf341.writes = [StarDep(name='buf341')]
buf341.unmet_dependencies = [StarDep(name='buf339')]
buf341.met_dependencies = []
buf341.node.kernel = None


buf342: SchedulerNode(ComputedBuffer)
buf342.writes = 
    [   MemoryDep(name='buf342', index=c0, size=(64, 512)),
        MemoryDep(name='buf342', index=c0, size=(64,))]
buf342.unmet_dependencies = [MemoryDep(name='buf340', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf342.met_dependencies = [MemoryDep(name='relu_7', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf342.group.device = cpu
buf342.group.iteration = ((64,), (8, 64))
buf342.sizes = ([64], [8, 64])
class buf342_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_7', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf340', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf342', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf343: SchedulerNode(ComputedBuffer)
buf343.writes = 
    [   MemoryDep(name='buf343', index=c0, size=(64, 512)),
        MemoryDep(name='buf343', index=c0, size=(64,))]
buf343.unmet_dependencies = [MemoryDep(name='buf340', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf343.met_dependencies = 
    [   MemoryDep(name='convolution_8', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64)),
        MemoryDep(name='relu_7', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64)),
        MemoryDep(name='unsqueeze_742', index=c0, size=(64, 512))]
buf343.group.device = cpu
buf343.group.iteration = ((64,), (8, 64))
buf343.sizes = ([64], [8, 64])
class buf343_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_7', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf340', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_8', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_742', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf343', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf344: SchedulerNode(ComputedBuffer)
buf344.writes = [MemoryDep(name='buf344', index=c0, size=(64,))]
buf344.unmet_dependencies = [MemoryDep(name='buf343', index=c0, size=(64,))]
buf344.met_dependencies = [MemoryDep(name='squeeze_25', index=c0, size=(64,))]
buf344.group.device = cpu
buf344.group.iteration = ((64,), ())
buf344.sizes = ([64], [])
class buf344_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf343', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_25', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf344', get_index_2, mul, None)
        return store


buf345: SchedulerNode(ComputedBuffer)
buf345.writes = [MemoryDep(name='buf345', index=c0, size=(32768,))]
buf345.unmet_dependencies = 
    [   MemoryDep(name='buf340', index=c0, size=(32768,)),
        MemoryDep(name='buf342', index=c1, size=(8, 64, 64)),
        MemoryDep(name='buf343', index=c1, size=(8, 64, 64))]
buf345.met_dependencies = 
    [   MemoryDep(name='convolution_8', index=c0, size=(32768,)),
        MemoryDep(name='primals_26', index=c1, size=(8, 64, 64)),
        MemoryDep(name='relu_7', index=c0, size=(32768,)),
        MemoryDep(name='squeeze_25', index=c1, size=(8, 64, 64)),
        MemoryDep(name='unsqueeze_742', index=c1, size=(8, 64, 64))]
buf345.group.device = cpu
buf345.group.iteration = ((8, 64, 64), ())
buf345.sizes = ([8, 64, 64], [])
class buf345_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_7', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf340', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_8', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_742', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf343', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_25', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_25', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf342', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_25', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_26', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf345', get_index_10, mul_6, None)
        return store


buf346: ExternKernelSchedulerNode(FallbackKernel)
buf346.writes = [StarDep(name='buf346')]
buf346.unmet_dependencies = [StarDep(name='buf345')]
buf346.met_dependencies = [StarDep(name='primals_25'), StarDep(name='relu_6')]
buf346.node.kernel = aten.convolution_backward


buf347: ExternKernelSchedulerNode(MultiOutput)
buf347.writes = [StarDep(name='buf347')]
buf347.unmet_dependencies = [StarDep(name='buf346')]
buf347.met_dependencies = []
buf347.node.kernel = None


buf348: ExternKernelSchedulerNode(MultiOutput)
buf348.writes = [StarDep(name='buf348')]
buf348.unmet_dependencies = [StarDep(name='buf346')]
buf348.met_dependencies = []
buf348.node.kernel = None


buf349: SchedulerNode(ComputedBuffer)
buf349.writes = [MemoryDep(name='buf349', index=c0, size=(131072,))]
buf349.unmet_dependencies = 
    [   MemoryDep(name='buf306', index=c0, size=(131072,)),
        MemoryDep(name='buf326', index=c0, size=(131072,)),
        MemoryDep(name='buf347', index=c0, size=(131072,))]
buf349.met_dependencies = 
    [   MemoryDep(name='relu_6', index=c0, size=(131072,)),
        MemoryDep(name='relu_9', index=c0, size=(131072,))]
buf349.group.device = cpu
buf349.group.iteration = ((131072,), ())
buf349.sizes = ([131072], [])
class buf349_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_6', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('relu_9', get_index_1)
        constant_2 = ops.constant(0, torch.float32)
        le_1 = ops.le(load_1, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf306', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf326', get_index_3)
        add = ops.add(load_2, load_3)
        where = ops.where(le_1, constant_3, add)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf347', get_index_4)
        add_1 = ops.add(where, load_4)
        where_1 = ops.where(le, constant_1, add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf349', get_index_5, where_1, None)
        return store


buf350: SchedulerNode(ComputedBuffer)
buf350.writes = 
    [   MemoryDep(name='buf350', index=c0, size=(256, 512)),
        MemoryDep(name='buf350', index=c0, size=(256,))]
buf350.unmet_dependencies = [MemoryDep(name='buf349', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64))]
buf350.met_dependencies = []
buf350.group.device = cpu
buf350.group.iteration = ((256,), (8, 64))
buf350.sizes = ([256], [8, 64])
class buf350_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf349', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf350', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf351: SchedulerNode(ComputedBuffer)
buf351.writes = 
    [   MemoryDep(name='buf351', index=c0, size=(256, 512)),
        MemoryDep(name='buf351', index=c0, size=(256,))]
buf351.unmet_dependencies = [MemoryDep(name='buf349', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64))]
buf351.met_dependencies = 
    [   MemoryDep(name='convolution_7', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64)),
        MemoryDep(name='unsqueeze_754', index=c0, size=(256, 512))]
buf351.group.device = cpu
buf351.group.iteration = ((256,), (8, 64))
buf351.sizes = ([256], [8, 64])
class buf351_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf349', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_7', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_754', get_index_2)
        sub = ops.sub(load_1, load_2)
        mul = ops.mul(load, sub)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf351', torch.float32, torch.float32, 'sum', get_index_3, mul)
        return reduction


buf352: SchedulerNode(ComputedBuffer)
buf352.writes = [MemoryDep(name='buf352', index=c0, size=(256,))]
buf352.unmet_dependencies = [MemoryDep(name='buf351', index=c0, size=(256,))]
buf352.met_dependencies = [MemoryDep(name='squeeze_22', index=c0, size=(256,))]
buf352.group.device = cpu
buf352.group.iteration = ((256,), ())
buf352.sizes = ([256], [])
class buf352_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf351', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_22', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf352', get_index_2, mul, None)
        return store


buf353: SchedulerNode(ComputedBuffer)
buf353.writes = [MemoryDep(name='buf353', index=c0, size=(131072,))]
buf353.unmet_dependencies = 
    [   MemoryDep(name='buf349', index=c0, size=(131072,)),
        MemoryDep(name='buf350', index=c1, size=(8, 256, 64)),
        MemoryDep(name='buf351', index=c1, size=(8, 256, 64))]
buf353.met_dependencies = 
    [   MemoryDep(name='convolution_7', index=c0, size=(131072,)),
        MemoryDep(name='primals_23', index=c1, size=(8, 256, 64)),
        MemoryDep(name='squeeze_22', index=c1, size=(8, 256, 64)),
        MemoryDep(name='unsqueeze_754', index=c1, size=(8, 256, 64))]
buf353.group.device = cpu
buf353.group.iteration = ((8, 256, 64), ())
buf353.sizes = ([8, 256, 64], [])
class buf353_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 64}
    index0 = 16384*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf349', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('convolution_7', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('unsqueeze_754', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf351', get_index_3)
        constant = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('squeeze_22', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_22', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(load, mul_3)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf350', get_index_6)
        constant_1 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_6, constant_1)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_22', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_23', get_index_8)
        mul_5 = ops.mul(load_7, load_8)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf353', get_index_9, mul_6, None)
        return store


buf354: ExternKernelSchedulerNode(FallbackKernel)
buf354.writes = [StarDep(name='buf354')]
buf354.unmet_dependencies = [StarDep(name='buf353')]
buf354.met_dependencies = [StarDep(name='primals_22'), StarDep(name='relu_5')]
buf354.node.kernel = aten.convolution_backward


buf355: ExternKernelSchedulerNode(MultiOutput)
buf355.writes = [StarDep(name='buf355')]
buf355.unmet_dependencies = [StarDep(name='buf354')]
buf355.met_dependencies = []
buf355.node.kernel = None


buf356: ExternKernelSchedulerNode(MultiOutput)
buf356.writes = [StarDep(name='buf356')]
buf356.unmet_dependencies = [StarDep(name='buf354')]
buf356.met_dependencies = []
buf356.node.kernel = None


buf357: SchedulerNode(ComputedBuffer)
buf357.writes = 
    [   MemoryDep(name='buf357', index=c0, size=(64, 512)),
        MemoryDep(name='buf357', index=c0, size=(64,))]
buf357.unmet_dependencies = [MemoryDep(name='buf355', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf357.met_dependencies = [MemoryDep(name='relu_5', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf357.group.device = cpu
buf357.group.iteration = ((64,), (8, 64))
buf357.sizes = ([64], [8, 64])
class buf357_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_5', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf355', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf357', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf358: SchedulerNode(ComputedBuffer)
buf358.writes = 
    [   MemoryDep(name='buf358', index=c0, size=(64, 512)),
        MemoryDep(name='buf358', index=c0, size=(64,))]
buf358.unmet_dependencies = [MemoryDep(name='buf355', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf358.met_dependencies = 
    [   MemoryDep(name='convolution_6', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64)),
        MemoryDep(name='relu_5', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64)),
        MemoryDep(name='unsqueeze_766', index=c0, size=(64, 512))]
buf358.group.device = cpu
buf358.group.iteration = ((64,), (8, 64))
buf358.sizes = ([64], [8, 64])
class buf358_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_5', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf355', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_6', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_766', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf358', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf359: SchedulerNode(ComputedBuffer)
buf359.writes = [MemoryDep(name='buf359', index=c0, size=(64,))]
buf359.unmet_dependencies = [MemoryDep(name='buf358', index=c0, size=(64,))]
buf359.met_dependencies = [MemoryDep(name='squeeze_19', index=c0, size=(64,))]
buf359.group.device = cpu
buf359.group.iteration = ((64,), ())
buf359.sizes = ([64], [])
class buf359_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_19', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf359', get_index_2, mul, None)
        return store


buf360: SchedulerNode(ComputedBuffer)
buf360.writes = [MemoryDep(name='buf360', index=c0, size=(32768,))]
buf360.unmet_dependencies = 
    [   MemoryDep(name='buf355', index=c0, size=(32768,)),
        MemoryDep(name='buf357', index=c1, size=(8, 64, 64)),
        MemoryDep(name='buf358', index=c1, size=(8, 64, 64))]
buf360.met_dependencies = 
    [   MemoryDep(name='convolution_6', index=c0, size=(32768,)),
        MemoryDep(name='primals_20', index=c1, size=(8, 64, 64)),
        MemoryDep(name='relu_5', index=c0, size=(32768,)),
        MemoryDep(name='squeeze_19', index=c1, size=(8, 64, 64)),
        MemoryDep(name='unsqueeze_766', index=c1, size=(8, 64, 64))]
buf360.group.device = cpu
buf360.group.iteration = ((8, 64, 64), ())
buf360.sizes = ([8, 64, 64], [])
class buf360_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_5', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf355', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_6', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_766', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf358', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_19', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_19', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf357', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_19', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_20', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf360', get_index_10, mul_6, None)
        return store


buf361: ExternKernelSchedulerNode(FallbackKernel)
buf361.writes = [StarDep(name='buf361')]
buf361.unmet_dependencies = [StarDep(name='buf360')]
buf361.met_dependencies = [StarDep(name='primals_19'), StarDep(name='relu_4')]
buf361.node.kernel = aten.convolution_backward


buf362: ExternKernelSchedulerNode(MultiOutput)
buf362.writes = [StarDep(name='buf362')]
buf362.unmet_dependencies = [StarDep(name='buf361')]
buf362.met_dependencies = []
buf362.node.kernel = None


buf363: ExternKernelSchedulerNode(MultiOutput)
buf363.writes = [StarDep(name='buf363')]
buf363.unmet_dependencies = [StarDep(name='buf361')]
buf363.met_dependencies = []
buf363.node.kernel = None


buf364: SchedulerNode(ComputedBuffer)
buf364.writes = 
    [   MemoryDep(name='buf364', index=c0, size=(64, 512)),
        MemoryDep(name='buf364', index=c0, size=(64,))]
buf364.unmet_dependencies = [MemoryDep(name='buf362', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf364.met_dependencies = [MemoryDep(name='relu_4', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf364.group.device = cpu
buf364.group.iteration = ((64,), (8, 64))
buf364.sizes = ([64], [8, 64])
class buf364_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_4', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf362', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf364', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf365: SchedulerNode(ComputedBuffer)
buf365.writes = 
    [   MemoryDep(name='buf365', index=c0, size=(64, 512)),
        MemoryDep(name='buf365', index=c0, size=(64,))]
buf365.unmet_dependencies = [MemoryDep(name='buf362', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf365.met_dependencies = 
    [   MemoryDep(name='convolution_5', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64)),
        MemoryDep(name='relu_4', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64)),
        MemoryDep(name='unsqueeze_778', index=c0, size=(64, 512))]
buf365.group.device = cpu
buf365.group.iteration = ((64,), (8, 64))
buf365.sizes = ([64], [8, 64])
class buf365_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_4', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf362', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_5', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_778', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf365', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf366: SchedulerNode(ComputedBuffer)
buf366.writes = [MemoryDep(name='buf366', index=c0, size=(64,))]
buf366.unmet_dependencies = [MemoryDep(name='buf365', index=c0, size=(64,))]
buf366.met_dependencies = [MemoryDep(name='squeeze_16', index=c0, size=(64,))]
buf366.group.device = cpu
buf366.group.iteration = ((64,), ())
buf366.sizes = ([64], [])
class buf366_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf365', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_16', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf366', get_index_2, mul, None)
        return store


buf367: SchedulerNode(ComputedBuffer)
buf367.writes = [MemoryDep(name='buf367', index=c0, size=(32768,))]
buf367.unmet_dependencies = 
    [   MemoryDep(name='buf362', index=c0, size=(32768,)),
        MemoryDep(name='buf364', index=c1, size=(8, 64, 64)),
        MemoryDep(name='buf365', index=c1, size=(8, 64, 64))]
buf367.met_dependencies = 
    [   MemoryDep(name='convolution_5', index=c0, size=(32768,)),
        MemoryDep(name='primals_17', index=c1, size=(8, 64, 64)),
        MemoryDep(name='relu_4', index=c0, size=(32768,)),
        MemoryDep(name='squeeze_16', index=c1, size=(8, 64, 64)),
        MemoryDep(name='unsqueeze_778', index=c1, size=(8, 64, 64))]
buf367.group.device = cpu
buf367.group.iteration = ((8, 64, 64), ())
buf367.sizes = ([8, 64, 64], [])
class buf367_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_4', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf362', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_5', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_778', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf365', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_16', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_16', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf364', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_16', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_17', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf367', get_index_10, mul_6, None)
        return store


buf368: ExternKernelSchedulerNode(FallbackKernel)
buf368.writes = [StarDep(name='buf368')]
buf368.unmet_dependencies = [StarDep(name='buf367')]
buf368.met_dependencies = [StarDep(name='primals_16'), StarDep(name='relu_3')]
buf368.node.kernel = aten.convolution_backward


buf369: ExternKernelSchedulerNode(MultiOutput)
buf369.writes = [StarDep(name='buf369')]
buf369.unmet_dependencies = [StarDep(name='buf368')]
buf369.met_dependencies = []
buf369.node.kernel = None


buf370: ExternKernelSchedulerNode(MultiOutput)
buf370.writes = [StarDep(name='buf370')]
buf370.unmet_dependencies = [StarDep(name='buf368')]
buf370.met_dependencies = []
buf370.node.kernel = None


buf371: SchedulerNode(ComputedBuffer)
buf371.writes = 
    [   MemoryDep(name='buf371', index=c0, size=(256, 512)),
        MemoryDep(name='buf371', index=c0, size=(256,))]
buf371.unmet_dependencies = 
    [   MemoryDep(name='buf349', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64)),
        MemoryDep(name='buf369', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64))]
buf371.met_dependencies = [MemoryDep(name='relu_3', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64))]
buf371.group.device = cpu
buf371.group.iteration = ((256,), (8, 64))
buf371.sizes = ([256], [8, 64])
class buf371_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_3', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf349', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf369', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index1')
        reduction = ops.reduction('buf371', torch.float32, torch.float32, 'sum', get_index_3, where)
        return reduction


buf372: SchedulerNode(ComputedBuffer)
buf372.writes = 
    [   MemoryDep(name='buf372', index=c0, size=(256, 512)),
        MemoryDep(name='buf372', index=c0, size=(256,))]
buf372.unmet_dependencies = 
    [   MemoryDep(name='buf349', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64)),
        MemoryDep(name='buf369', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64))]
buf372.met_dependencies = 
    [   MemoryDep(name='convolution_4', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64)),
        MemoryDep(name='relu_3', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64)),
        MemoryDep(name='unsqueeze_790', index=c0, size=(256, 512))]
buf372.group.device = cpu
buf372.group.iteration = ((256,), (8, 64))
buf372.sizes = ([256], [8, 64])
class buf372_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_3', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf349', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf369', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_4', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_790', get_index_4)
        sub = ops.sub(load_3, load_4)
        mul = ops.mul(where, sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf372', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf373: SchedulerNode(ComputedBuffer)
buf373.writes = [MemoryDep(name='buf373', index=c0, size=(131072,))]
buf373.unmet_dependencies = 
    [   MemoryDep(name='buf349', index=c0, size=(131072,)),
        MemoryDep(name='buf369', index=c0, size=(131072,)),
        MemoryDep(name='buf371', index=c1, size=(8, 256, 64)),
        MemoryDep(name='buf372', index=c1, size=(8, 256, 64))]
buf373.met_dependencies = 
    [   MemoryDep(name='convolution_4', index=c0, size=(131072,)),
        MemoryDep(name='primals_14', index=c1, size=(8, 256, 64)),
        MemoryDep(name='relu_3', index=c0, size=(131072,)),
        MemoryDep(name='squeeze_13', index=c1, size=(8, 256, 64)),
        MemoryDep(name='unsqueeze_790', index=c1, size=(8, 256, 64))]
buf373.group.device = cpu
buf373.group.iteration = ((8, 256, 64), ())
buf373.sizes = ([8, 256, 64], [])
class buf373_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 64}
    index0 = 16384*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_3', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf349', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf369', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_4', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_790', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf372', get_index_5)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_5, constant_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_13', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_13', get_index_7)
        mul_1 = ops.mul(load_6, load_7)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf371', get_index_8)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_8, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('squeeze_13', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('primals_14', get_index_10)
        mul_5 = ops.mul(load_9, load_10)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf373', get_index_11, mul_6, None)
        return store


buf374: SchedulerNode(ComputedBuffer)
buf374.writes = [MemoryDep(name='buf374', index=c0, size=(256,))]
buf374.unmet_dependencies = [MemoryDep(name='buf372', index=c0, size=(256,))]
buf374.met_dependencies = [MemoryDep(name='squeeze_13', index=c0, size=(256,))]
buf374.group.device = cpu
buf374.group.iteration = ((256,), ())
buf374.sizes = ([256], [])
class buf374_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_13', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf374', get_index_2, mul, None)
        return store


buf375: ExternKernelSchedulerNode(FallbackKernel)
buf375.writes = [StarDep(name='buf375')]
buf375.unmet_dependencies = [StarDep(name='buf373')]
buf375.met_dependencies = [StarDep(name='getitem_2'), StarDep(name='primals_13')]
buf375.node.kernel = aten.convolution_backward


buf376: ExternKernelSchedulerNode(MultiOutput)
buf376.writes = [StarDep(name='buf376')]
buf376.unmet_dependencies = [StarDep(name='buf375')]
buf376.met_dependencies = []
buf376.node.kernel = None


buf377: ExternKernelSchedulerNode(MultiOutput)
buf377.writes = [StarDep(name='buf377')]
buf377.unmet_dependencies = [StarDep(name='buf375')]
buf377.met_dependencies = []
buf377.node.kernel = None


buf378: SchedulerNode(ComputedBuffer)
buf378.writes = 
    [   MemoryDep(name='buf378', index=c0, size=(256, 512)),
        MemoryDep(name='buf378', index=c0, size=(256,))]
buf378.unmet_dependencies = 
    [   MemoryDep(name='buf349', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64)),
        MemoryDep(name='buf369', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64))]
buf378.met_dependencies = 
    [   MemoryDep(name='convolution_3', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64)),
        MemoryDep(name='relu_3', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64)),
        MemoryDep(name='unsqueeze_802', index=c0, size=(256, 512))]
buf378.group.device = cpu
buf378.group.iteration = ((256,), (8, 64))
buf378.sizes = ([256], [8, 64])
class buf378_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_3', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf349', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf369', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_3', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_802', get_index_4)
        sub = ops.sub(load_3, load_4)
        mul = ops.mul(where, sub)
        get_index_5 = self.get_index('index1')
        reduction = ops.reduction('buf378', torch.float32, torch.float32, 'sum', get_index_5, mul)
        return reduction


buf379: SchedulerNode(ComputedBuffer)
buf379.writes = [MemoryDep(name='buf379', index=c0, size=(131072,))]
buf379.unmet_dependencies = 
    [   MemoryDep(name='buf349', index=c0, size=(131072,)),
        MemoryDep(name='buf369', index=c0, size=(131072,)),
        MemoryDep(name='buf371', index=c1, size=(8, 256, 64)),
        MemoryDep(name='buf378', index=c1, size=(8, 256, 64))]
buf379.met_dependencies = 
    [   MemoryDep(name='convolution_3', index=c0, size=(131072,)),
        MemoryDep(name='primals_11', index=c1, size=(8, 256, 64)),
        MemoryDep(name='relu_3', index=c0, size=(131072,)),
        MemoryDep(name='squeeze_10', index=c1, size=(8, 256, 64)),
        MemoryDep(name='unsqueeze_802', index=c1, size=(8, 256, 64))]
buf379.group.device = cpu
buf379.group.iteration = ((8, 256, 64), ())
buf379.sizes = ([8, 256, 64], [])
class buf379_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 64}
    index0 = 16384*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_3', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf349', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf369', get_index_2)
        add = ops.add(load_1, load_2)
        where = ops.where(le, constant_1, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('convolution_3', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('unsqueeze_802', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf378', get_index_5)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_5, constant_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_10', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('squeeze_10', get_index_7)
        mul_1 = ops.mul(load_6, load_7)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf371', get_index_8)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_8, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('squeeze_10', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('primals_11', get_index_10)
        mul_5 = ops.mul(load_9, load_10)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf379', get_index_11, mul_6, None)
        return store


buf380: SchedulerNode(ComputedBuffer)
buf380.writes = [MemoryDep(name='buf380', index=c0, size=(256,))]
buf380.unmet_dependencies = [MemoryDep(name='buf378', index=c0, size=(256,))]
buf380.met_dependencies = [MemoryDep(name='squeeze_10', index=c0, size=(256,))]
buf380.group.device = cpu
buf380.group.iteration = ((256,), ())
buf380.sizes = ([256], [])
class buf380_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_10', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf380', get_index_2, mul, None)
        return store


buf381: ExternKernelSchedulerNode(FallbackKernel)
buf381.writes = [StarDep(name='buf381')]
buf381.unmet_dependencies = [StarDep(name='buf379')]
buf381.met_dependencies = [StarDep(name='primals_10'), StarDep(name='relu_2')]
buf381.node.kernel = aten.convolution_backward


buf382: ExternKernelSchedulerNode(MultiOutput)
buf382.writes = [StarDep(name='buf382')]
buf382.unmet_dependencies = [StarDep(name='buf381')]
buf382.met_dependencies = []
buf382.node.kernel = None


buf383: ExternKernelSchedulerNode(MultiOutput)
buf383.writes = [StarDep(name='buf383')]
buf383.unmet_dependencies = [StarDep(name='buf381')]
buf383.met_dependencies = []
buf383.node.kernel = None


buf384: SchedulerNode(ComputedBuffer)
buf384.writes = 
    [   MemoryDep(name='buf384', index=c0, size=(64, 512)),
        MemoryDep(name='buf384', index=c0, size=(64,))]
buf384.unmet_dependencies = [MemoryDep(name='buf382', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf384.met_dependencies = [MemoryDep(name='relu_2', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf384.group.device = cpu
buf384.group.iteration = ((64,), (8, 64))
buf384.sizes = ([64], [8, 64])
class buf384_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_2', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf382', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf384', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf385: SchedulerNode(ComputedBuffer)
buf385.writes = 
    [   MemoryDep(name='buf385', index=c0, size=(64, 512)),
        MemoryDep(name='buf385', index=c0, size=(64,))]
buf385.unmet_dependencies = [MemoryDep(name='buf382', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf385.met_dependencies = 
    [   MemoryDep(name='convolution_2', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64)),
        MemoryDep(name='relu_2', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64)),
        MemoryDep(name='unsqueeze_814', index=c0, size=(64, 512))]
buf385.group.device = cpu
buf385.group.iteration = ((64,), (8, 64))
buf385.sizes = ([64], [8, 64])
class buf385_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_2', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf382', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_2', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_814', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf385', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf386: SchedulerNode(ComputedBuffer)
buf386.writes = [MemoryDep(name='buf386', index=c0, size=(64,))]
buf386.unmet_dependencies = [MemoryDep(name='buf385', index=c0, size=(64,))]
buf386.met_dependencies = [MemoryDep(name='squeeze_7', index=c0, size=(64,))]
buf386.group.device = cpu
buf386.group.iteration = ((64,), ())
buf386.sizes = ([64], [])
class buf386_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf385', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_7', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf386', get_index_2, mul, None)
        return store


buf387: SchedulerNode(ComputedBuffer)
buf387.writes = [MemoryDep(name='buf387', index=c0, size=(32768,))]
buf387.unmet_dependencies = 
    [   MemoryDep(name='buf382', index=c0, size=(32768,)),
        MemoryDep(name='buf384', index=c1, size=(8, 64, 64)),
        MemoryDep(name='buf385', index=c1, size=(8, 64, 64))]
buf387.met_dependencies = 
    [   MemoryDep(name='convolution_2', index=c0, size=(32768,)),
        MemoryDep(name='primals_8', index=c1, size=(8, 64, 64)),
        MemoryDep(name='relu_2', index=c0, size=(32768,)),
        MemoryDep(name='squeeze_7', index=c1, size=(8, 64, 64)),
        MemoryDep(name='unsqueeze_814', index=c1, size=(8, 64, 64))]
buf387.group.device = cpu
buf387.group.iteration = ((8, 64, 64), ())
buf387.sizes = ([8, 64, 64], [])
class buf387_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_2', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf382', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_2', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_814', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf385', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_7', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_7', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf384', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_7', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_8', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf387', get_index_10, mul_6, None)
        return store


buf388: ExternKernelSchedulerNode(FallbackKernel)
buf388.writes = [StarDep(name='buf388')]
buf388.unmet_dependencies = [StarDep(name='buf387')]
buf388.met_dependencies = [StarDep(name='primals_7'), StarDep(name='relu_1')]
buf388.node.kernel = aten.convolution_backward


buf389: ExternKernelSchedulerNode(MultiOutput)
buf389.writes = [StarDep(name='buf389')]
buf389.unmet_dependencies = [StarDep(name='buf388')]
buf389.met_dependencies = []
buf389.node.kernel = None


buf390: ExternKernelSchedulerNode(MultiOutput)
buf390.writes = [StarDep(name='buf390')]
buf390.unmet_dependencies = [StarDep(name='buf388')]
buf390.met_dependencies = []
buf390.node.kernel = None


buf391: SchedulerNode(ComputedBuffer)
buf391.writes = 
    [   MemoryDep(name='buf391', index=c0, size=(64, 512)),
        MemoryDep(name='buf391', index=c0, size=(64,))]
buf391.unmet_dependencies = [MemoryDep(name='buf389', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf391.met_dependencies = [MemoryDep(name='relu_1', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf391.group.device = cpu
buf391.group.iteration = ((64,), (8, 64))
buf391.sizes = ([64], [8, 64])
class buf391_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_1', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf389', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf391', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf392: SchedulerNode(ComputedBuffer)
buf392.writes = 
    [   MemoryDep(name='buf392', index=c0, size=(64, 512)),
        MemoryDep(name='buf392', index=c0, size=(64,))]
buf392.unmet_dependencies = [MemoryDep(name='buf389', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf392.met_dependencies = 
    [   MemoryDep(name='convolution_1', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64)),
        MemoryDep(name='relu_1', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64)),
        MemoryDep(name='unsqueeze_826', index=c0, size=(64, 512))]
buf392.group.device = cpu
buf392.group.iteration = ((64,), (8, 64))
buf392.sizes = ([64], [8, 64])
class buf392_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_1', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf389', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_1', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_826', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf392', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf393: SchedulerNode(ComputedBuffer)
buf393.writes = [MemoryDep(name='buf393', index=c0, size=(64,))]
buf393.unmet_dependencies = [MemoryDep(name='buf392', index=c0, size=(64,))]
buf393.met_dependencies = [MemoryDep(name='squeeze_4', index=c0, size=(64,))]
buf393.group.device = cpu
buf393.group.iteration = ((64,), ())
buf393.sizes = ([64], [])
class buf393_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_4', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf393', get_index_2, mul, None)
        return store


buf394: SchedulerNode(ComputedBuffer)
buf394.writes = [MemoryDep(name='buf394', index=c0, size=(32768,))]
buf394.unmet_dependencies = 
    [   MemoryDep(name='buf389', index=c0, size=(32768,)),
        MemoryDep(name='buf391', index=c1, size=(8, 64, 64)),
        MemoryDep(name='buf392', index=c1, size=(8, 64, 64))]
buf394.met_dependencies = 
    [   MemoryDep(name='convolution_1', index=c0, size=(32768,)),
        MemoryDep(name='primals_5', index=c1, size=(8, 64, 64)),
        MemoryDep(name='relu_1', index=c0, size=(32768,)),
        MemoryDep(name='squeeze_4', index=c1, size=(8, 64, 64)),
        MemoryDep(name='unsqueeze_826', index=c1, size=(8, 64, 64))]
buf394.group.device = cpu
buf394.group.iteration = ((8, 64, 64), ())
buf394.sizes = ([8, 64, 64], [])
class buf394_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_1', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf389', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution_1', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_826', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf392', get_index_4)
        constant_2 = ops.constant(0.001953125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_4', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_4', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf391', get_index_7)
        constant_3 = ops.constant(0.001953125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_4', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_5', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf394', get_index_10, mul_6, None)
        return store


buf395: ExternKernelSchedulerNode(FallbackKernel)
buf395.writes = [StarDep(name='buf395')]
buf395.unmet_dependencies = [StarDep(name='buf394')]
buf395.met_dependencies = [StarDep(name='getitem_2'), StarDep(name='primals_4')]
buf395.node.kernel = aten.convolution_backward


buf396: ExternKernelSchedulerNode(MultiOutput)
buf396.writes = [StarDep(name='buf396')]
buf396.unmet_dependencies = [StarDep(name='buf395')]
buf396.met_dependencies = []
buf396.node.kernel = None


buf397: ExternKernelSchedulerNode(MultiOutput)
buf397.writes = [StarDep(name='buf397')]
buf397.unmet_dependencies = [StarDep(name='buf395')]
buf397.met_dependencies = []
buf397.node.kernel = None


buf398: SchedulerNode(ComputedBuffer)
buf398.writes = [MemoryDep(name='buf398', index=c0, size=(32768,))]
buf398.unmet_dependencies = 
    [   MemoryDep(name='buf376', index=c0, size=(32768,)),
        MemoryDep(name='buf396', index=c0, size=(32768,))]
buf398.met_dependencies = []
buf398.group.device = cpu
buf398.group.iteration = ((32768,), ())
buf398.sizes = ([32768], [])
class buf398_loop_body:
    var_ranges = {z0: 32768}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf376', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf396', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf398', get_index_2, add, None)
        return store


buf399: SchedulerNode(ComputedBuffer)
buf399.writes = [MemoryDep(name='buf399', index=c0, size=(131072,))]
buf399.unmet_dependencies = 
    [   MemoryDep(name='buf398', index=8*(tmp19) + (tmp22) + 64*c0, size=(512, 256)),
        MemoryDep(name='buf398', index=8*(tmp34) + (tmp37) + 64*c0, size=(512, 256)),
        MemoryDep(name='buf398', index=8*(tmp53) + (tmp56) + 64*c0, size=(512, 256)),
        MemoryDep(name='buf398', index=8*(tmp72) + (tmp75) + 64*c0, size=(512, 256))]
buf399.met_dependencies = 
    [   MemoryDep(name='getitem_3', index=8*(tmp19) + (tmp22) + 64*c0, size=(512, 256)),
        MemoryDep(name='getitem_3', index=8*(tmp34) + (tmp37) + 64*c0, size=(512, 256)),
        MemoryDep(name='getitem_3', index=8*(tmp53) + (tmp56) + 64*c0, size=(512, 256)),
        MemoryDep(name='getitem_3', index=8*(tmp72) + (tmp75) + 64*c0, size=(512, 256))]
buf399.group.device = cpu
buf399.group.iteration = ((512, 16, 16), ())
buf399.sizes = ([512, 16, 16], [])
class buf399_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z1 + z2
    index1 = z1//2
    index2 = z2//2
    index3 = (z1 + 1)//2 + 1
    index4 = (z2 + 1)//2 + 1
    index5 = 8*indirect0 + indirect1 + 64*z0
    index6 = 8*indirect2 + indirect3 + 64*z0
    index7 = 8*indirect4 + indirect5 + 64*z0
    index8 = 8*indirect6 + indirect7 + 64*z0
    index9 = 256*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        get_index_2 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        get_index_3 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_3, torch.int32)
        get_index_4 = self.get_index('index4')
        index_expr_4 = ops.index_expr(get_index_4, torch.int32)
        constant = ops.constant(0, torch.int32)
        maximum = ops.maximum(index_expr_1, constant)
        constant_1 = ops.constant(0, torch.int32)
        maximum_1 = ops.maximum(index_expr_2, constant_1)
        constant_2 = ops.constant(8, torch.int32)
        minimum = ops.minimum(index_expr_3, constant_2)
        constant_3 = ops.constant(8, torch.int32)
        minimum_1 = ops.minimum(index_expr_4, constant_3)
        constant_4 = ops.constant(0, torch.int32)
        add = ops.add(maximum, constant_4)
        constant_5 = ops.constant(0, torch.int32)
        add_1 = ops.add(maximum_1, constant_5)
        constant_6 = ops.constant(1, torch.int32)
        sub = ops.sub(minimum, constant_6)
        minimum_2 = ops.minimum(add, sub)
        set_indirect0 = self.set_indirect0(minimum_2)
        constant_7 = ops.constant(1, torch.int32)
        sub_1 = ops.sub(minimum_1, constant_7)
        minimum_3 = ops.minimum(add_1, sub_1)
        set_indirect1 = self.set_indirect1(minimum_3)
        get_index_5 = self.get_index('index5')
        load = ops.load('getitem_3', get_index_5)
        get_index_6 = self.get_index('index5')
        load_1 = ops.load('buf398', get_index_6)
        eq = ops.eq(load, index_expr)
        constant_8 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, load_1, constant_8)
        constant_9 = ops.constant(0, torch.int32)
        add_2 = ops.add(maximum, constant_9)
        constant_10 = ops.constant(1, torch.int32)
        add_3 = ops.add(maximum_1, constant_10)
        constant_11 = ops.constant(1, torch.int32)
        sub_2 = ops.sub(minimum, constant_11)
        minimum_4 = ops.minimum(add_2, sub_2)
        set_indirect2 = self.set_indirect2(minimum_4)
        constant_12 = ops.constant(1, torch.int32)
        sub_3 = ops.sub(minimum_1, constant_12)
        minimum_5 = ops.minimum(add_3, sub_3)
        set_indirect3 = self.set_indirect3(minimum_5)
        get_index_7 = self.get_index('index6')
        load_2 = ops.load('getitem_3', get_index_7)
        get_index_8 = self.get_index('index6')
        load_3 = ops.load('buf398', get_index_8)
        eq_1 = ops.eq(load_2, index_expr)
        lt = ops.lt(add_2, minimum)
        lt_1 = ops.lt(add_3, minimum_1)
        and_ = ops.and_(lt, lt_1)
        and__1 = ops.and_(and_, eq_1)
        add_4 = ops.add(where, load_3)
        where_1 = ops.where(and__1, add_4, where)
        constant_13 = ops.constant(1, torch.int32)
        add_5 = ops.add(maximum, constant_13)
        constant_14 = ops.constant(0, torch.int32)
        add_6 = ops.add(maximum_1, constant_14)
        constant_15 = ops.constant(1, torch.int32)
        sub_4 = ops.sub(minimum, constant_15)
        minimum_6 = ops.minimum(add_5, sub_4)
        set_indirect4 = self.set_indirect4(minimum_6)
        constant_16 = ops.constant(1, torch.int32)
        sub_5 = ops.sub(minimum_1, constant_16)
        minimum_7 = ops.minimum(add_6, sub_5)
        set_indirect5 = self.set_indirect5(minimum_7)
        get_index_9 = self.get_index('index7')
        load_4 = ops.load('getitem_3', get_index_9)
        get_index_10 = self.get_index('index7')
        load_5 = ops.load('buf398', get_index_10)
        eq_2 = ops.eq(load_4, index_expr)
        lt_2 = ops.lt(add_5, minimum)
        lt_3 = ops.lt(add_6, minimum_1)
        and__2 = ops.and_(lt_2, lt_3)
        and__3 = ops.and_(and__2, eq_2)
        add_7 = ops.add(where_1, load_5)
        where_2 = ops.where(and__3, add_7, where_1)
        constant_17 = ops.constant(1, torch.int32)
        add_8 = ops.add(maximum, constant_17)
        constant_18 = ops.constant(1, torch.int32)
        add_9 = ops.add(maximum_1, constant_18)
        constant_19 = ops.constant(1, torch.int32)
        sub_6 = ops.sub(minimum, constant_19)
        minimum_8 = ops.minimum(add_8, sub_6)
        set_indirect6 = self.set_indirect6(minimum_8)
        constant_20 = ops.constant(1, torch.int32)
        sub_7 = ops.sub(minimum_1, constant_20)
        minimum_9 = ops.minimum(add_9, sub_7)
        set_indirect7 = self.set_indirect7(minimum_9)
        get_index_11 = self.get_index('index8')
        load_6 = ops.load('getitem_3', get_index_11)
        get_index_12 = self.get_index('index8')
        load_7 = ops.load('buf398', get_index_12)
        eq_3 = ops.eq(load_6, index_expr)
        lt_4 = ops.lt(add_8, minimum)
        lt_5 = ops.lt(add_9, minimum_1)
        and__4 = ops.and_(lt_4, lt_5)
        and__5 = ops.and_(and__4, eq_3)
        add_10 = ops.add(where_2, load_7)
        where_3 = ops.where(and__5, add_10, where_2)
        get_index_13 = self.get_index('index9')
        store = ops.store('buf399', get_index_13, where_3, None)
        return store


buf400: SchedulerNode(ComputedBuffer)
buf400.writes = 
    [   MemoryDep(name='buf400', index=c0, size=(64, 2048)),
        MemoryDep(name='buf400', index=c0, size=(64,))]
buf400.unmet_dependencies = [MemoryDep(name='buf399', index=256*c0 + 16384*c1 + c2, size=(64, 8, 256))]
buf400.met_dependencies = [MemoryDep(name='relu', index=256*c0 + 16384*c1 + c2, size=(64, 8, 256))]
buf400.group.device = cpu
buf400.group.iteration = ((64,), (8, 256))
buf400.sizes = ([64], [8, 256])
class buf400_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 256}
    index0 = 256*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf399', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf400', torch.float32, torch.float32, 'sum', get_index_2, where)
        return reduction


buf401: SchedulerNode(ComputedBuffer)
buf401.writes = 
    [   MemoryDep(name='buf401', index=c0, size=(64, 2048)),
        MemoryDep(name='buf401', index=c0, size=(64,))]
buf401.unmet_dependencies = [MemoryDep(name='buf399', index=256*c0 + 16384*c1 + c2, size=(64, 8, 256))]
buf401.met_dependencies = 
    [   MemoryDep(name='convolution', index=256*c0 + 16384*c1 + c2, size=(64, 8, 256)),
        MemoryDep(name='relu', index=256*c0 + 16384*c1 + c2, size=(64, 8, 256)),
        MemoryDep(name='unsqueeze_838', index=c0, size=(64, 2048))]
buf401.group.device = cpu
buf401.group.iteration = ((64,), (8, 256))
buf401.sizes = ([64], [8, 256])
class buf401_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 256}
    index0 = 256*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf399', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_838', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(where, sub)
        get_index_4 = self.get_index('index1')
        reduction = ops.reduction('buf401', torch.float32, torch.float32, 'sum', get_index_4, mul)
        return reduction


buf402: SchedulerNode(ComputedBuffer)
buf402.writes = [MemoryDep(name='buf402', index=c0, size=(64,))]
buf402.unmet_dependencies = [MemoryDep(name='buf401', index=c0, size=(64,))]
buf402.met_dependencies = [MemoryDep(name='squeeze_1', index=c0, size=(64,))]
buf402.group.device = cpu
buf402.group.iteration = ((64,), ())
buf402.sizes = ([64], [])
class buf402_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf401', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('squeeze_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf402', get_index_2, mul, None)
        return store


buf403: SchedulerNode(ComputedBuffer)
buf403.writes = [MemoryDep(name='buf403', index=c0, size=(131072,))]
buf403.unmet_dependencies = 
    [   MemoryDep(name='buf399', index=c0, size=(131072,)),
        MemoryDep(name='buf400', index=c1, size=(8, 64, 256)),
        MemoryDep(name='buf401', index=c1, size=(8, 64, 256))]
buf403.met_dependencies = 
    [   MemoryDep(name='convolution', index=c0, size=(131072,)),
        MemoryDep(name='primals_2', index=c1, size=(8, 64, 256)),
        MemoryDep(name='relu', index=c0, size=(131072,)),
        MemoryDep(name='squeeze_1', index=c1, size=(8, 64, 256)),
        MemoryDep(name='unsqueeze_838', index=c1, size=(8, 64, 256))]
buf403.group.device = cpu
buf403.group.iteration = ((8, 64, 256), ())
buf403.sizes = ([8, 64, 256], [])
class buf403_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 256}
    index0 = 16384*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf399', get_index_1)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('convolution', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('unsqueeze_838', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf401', get_index_4)
        constant_2 = ops.constant(0.00048828125, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('squeeze_1', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('squeeze_1', get_index_6)
        mul_1 = ops.mul(load_5, load_6)
        mul_2 = ops.mul(mul, mul_1)
        mul_3 = ops.mul(sub, mul_2)
        sub_1 = ops.sub(where, mul_3)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf400', get_index_7)
        constant_3 = ops.constant(0.00048828125, torch.float32)
        mul_4 = ops.mul(load_7, constant_3)
        sub_2 = ops.sub(sub_1, mul_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('squeeze_1', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_2', get_index_9)
        mul_5 = ops.mul(load_8, load_9)
        mul_6 = ops.mul(sub_2, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf403', get_index_10, mul_6, None)
        return store


buf404: ExternKernelSchedulerNode(FallbackKernel)
buf404.writes = [StarDep(name='buf404')]
buf404.unmet_dependencies = [StarDep(name='buf403')]
buf404.met_dependencies = [StarDep(name='primals_1'), StarDep(name='primals_321')]
buf404.node.kernel = aten.convolution_backward


buf405: ExternKernelSchedulerNode(MultiOutput)
buf405.writes = [StarDep(name='buf405')]
buf405.unmet_dependencies = [StarDep(name='buf404')]
buf405.met_dependencies = []
buf405.node.kernel = None


