buf0: ExternKernelSchedulerNode(Convolution)
buf0.writes = [StarDep(name='buf0')]
buf0.unmet_dependencies = []
buf0.met_dependencies = [StarDep(name='primals_1'), StarDep(name='primals_321')]
buf0.node.kernel = aten.convolution


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = 
    [   MemoryDep(name='buf1', index=c0, size=(64, 2048)),
        MemoryDep(name='buf1', index=c0, size=(64,))]
buf1.unmet_dependencies = [MemoryDep(name='buf0', index=256*c0 + 16384*c1 + c2, size=(64, 8, 256))]
buf1.met_dependencies = []
buf1.group.device = cpu
buf1.group.iteration = ((64,), (8, 256))
buf1.sizes = ([64], [8, 256])
class buf1_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 256}
    index0 = 256*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf1', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = [MemoryDep(name='buf2', index=c0, size=(64,))]
buf2.unmet_dependencies = [MemoryDep(name='buf1', index=c0, size=(64,))]
buf2.met_dependencies = []
buf2.group.device = cpu
buf2.group.iteration = ((64,), ())
buf2.sizes = ([64], [])
class buf2_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2', get_index_1, div, None)
        return store


buf3: SchedulerNode(ComputedBuffer)
buf3.writes = 
    [   MemoryDep(name='buf3', index=c0, size=(64, 2048)),
        MemoryDep(name='buf3', index=c0, size=(64,))]
buf3.unmet_dependencies = 
    [   MemoryDep(name='buf0', index=256*c0 + 16384*c1 + c2, size=(64, 8, 256)),
        MemoryDep(name='buf2', index=c0, size=(64, 2048))]
buf3.met_dependencies = []
buf3.group.device = cpu
buf3.group.iteration = ((64,), (8, 256))
buf3.sizes = ([64], [8, 256])
class buf3_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 256}
    index0 = 256*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf3', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf4: SchedulerNode(ComputedBuffer)
buf4.writes = [MemoryDep(name='buf4', index=c0, size=(64,))]
buf4.unmet_dependencies = [MemoryDep(name='buf3', index=c0, size=(64,))]
buf4.met_dependencies = []
buf4.group.device = cpu
buf4.group.iteration = ((64,), ())
buf4.sizes = ([64], [])
class buf4_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf4', get_index_1, rsqrt, None)
        return store


buf5: SchedulerNode(ComputedBuffer)
buf5.writes = [MemoryDep(name='buf5', index=c0, size=(64,))]
buf5.unmet_dependencies = [MemoryDep(name='buf2', index=c0, size=(64,))]
buf5.met_dependencies = [MemoryDep(name='primals_162', index=c0, size=(64,))]
buf5.group.device = cpu
buf5.group.iteration = ((64,), ())
buf5.sizes = ([64], [])
class buf5_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_162', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf5', get_index_2, add, None)
        return store


buf6: SchedulerNode(ComputedBuffer)
buf6.writes = [MemoryDep(name='buf6', index=c0, size=(64,))]
buf6.unmet_dependencies = [MemoryDep(name='buf3', index=c0, size=(64,))]
buf6.met_dependencies = [MemoryDep(name='primals_163', index=c0, size=(64,))]
buf6.group.device = cpu
buf6.group.iteration = ((64,), ())
buf6.sizes = ([64], [])
class buf6_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0004885197850513, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_163', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf6', get_index_2, add, None)
        return store


buf7: SchedulerNode(ComputedBuffer)
buf7.writes = [MemoryDep(name='buf7', index=c0, size=(131072,))]
buf7.unmet_dependencies = 
    [   MemoryDep(name='buf0', index=c0, size=(131072,)),
        MemoryDep(name='buf2', index=c1, size=(8, 64, 256)),
        MemoryDep(name='buf3', index=c1, size=(8, 64, 256))]
buf7.met_dependencies = 
    [   MemoryDep(name='primals_2', index=c1, size=(8, 64, 256)),
        MemoryDep(name='primals_3', index=c1, size=(8, 64, 256))]
buf7.group.device = cpu
buf7.group.iteration = ((8, 64, 256), ())
buf7.sizes = ([8, 64, 256], [])
class buf7_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 256}
    index0 = 16384*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf3', get_index_2)
        constant = ops.constant(2048, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_2', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_3', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf7', get_index_5, relu, None)
        return store


buf8: SchedulerNode(ComputedBuffer)
buf8.writes = [MemoryDep(name='buf8', index=c0, size=(32768,))]
buf8.unmet_dependencies = 
    [   MemoryDep(name='buf7', index=32*c0 + 2*c1 + 1, size=(4096, 8)),
        MemoryDep(name='buf7', index=32*c0 + 2*c1 + 15, size=(4096, 8)),
        MemoryDep(name='buf7', index=32*c0 + 2*c1 + 16, size=(4096, 8)),
        MemoryDep(name='buf7', index=32*c0 + 2*c1 + 17, size=(4096, 8)),
        MemoryDep(name='buf7', index=32*c0 + 2*c1 - 1, size=(4096, 8)),
        MemoryDep(name='buf7', index=32*c0 + 2*c1 - 15, size=(4096, 8)),
        MemoryDep(name='buf7', index=32*c0 + 2*c1 - 16, size=(4096, 8)),
        MemoryDep(name='buf7', index=32*c0 + 2*c1 - 17, size=(4096, 8)),
        MemoryDep(name='buf7', index=32*c0 + 2*c1, size=(4096, 8))]
buf8.met_dependencies = []
buf8.group.device = cpu
buf8.group.iteration = ((512, 8, 8), ())
buf8.sizes = ([512, 8, 8], [])
class buf8_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 8}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 256*z0 + 32*z1 + 2*z2 - 17
    index3 = 2*z2
    index4 = 256*z0 + 32*z1 + 2*z2 - 16
    index5 = 2*z2 + 1
    index6 = 256*z0 + 32*z1 + 2*z2 - 15
    index7 = 2*z1
    index8 = 256*z0 + 32*z1 + 2*z2 - 1
    index9 = 256*z0 + 32*z1 + 2*z2
    index10 = 256*z0 + 32*z1 + 2*z2 + 1
    index11 = 2*z1 + 1
    index12 = 256*z0 + 32*z1 + 2*z2 + 15
    index13 = 256*z0 + 32*z1 + 2*z2 + 16
    index14 = 256*z0 + 32*z1 + 2*z2 + 17
    index15 = 64*z0 + 8*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(16, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(16, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(16, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(16, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(16, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(16, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(16, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(16, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(16, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(16, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(16, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(16, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(16, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(16, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(16, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(16, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(16, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index15')
        store = ops.store('buf8', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf7', get_index)
        return load


buf9: SchedulerNode(ComputedBuffer)
buf9.writes = [MemoryDep(name='buf9', index=c0, size=(32768,))]
buf9.unmet_dependencies = 
    [   MemoryDep(name='buf7', index=32*c0 + 2*c1 + 1, size=(4096, 8)),
        MemoryDep(name='buf7', index=32*c0 + 2*c1 + 15, size=(4096, 8)),
        MemoryDep(name='buf7', index=32*c0 + 2*c1 + 16, size=(4096, 8)),
        MemoryDep(name='buf7', index=32*c0 + 2*c1 + 17, size=(4096, 8)),
        MemoryDep(name='buf7', index=32*c0 + 2*c1 - 1, size=(4096, 8)),
        MemoryDep(name='buf7', index=32*c0 + 2*c1 - 15, size=(4096, 8)),
        MemoryDep(name='buf7', index=32*c0 + 2*c1 - 16, size=(4096, 8)),
        MemoryDep(name='buf7', index=32*c0 + 2*c1 - 17, size=(4096, 8)),
        MemoryDep(name='buf7', index=32*c0 + 2*c1, size=(4096, 8))]
buf9.met_dependencies = []
buf9.group.device = cpu
buf9.group.iteration = ((512, 8, 8), ())
buf9.sizes = ([512, 8, 8], [])
class buf9_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 8}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 256*z0 + 32*z1 + 2*z2 - 17
    index3 = 32*z1 + 2*z2 - 17
    index4 = 2*z2
    index5 = 256*z0 + 32*z1 + 2*z2 - 16
    index6 = 32*z1 + 2*z2 - 16
    index7 = 2*z2 + 1
    index8 = 256*z0 + 32*z1 + 2*z2 - 15
    index9 = 32*z1 + 2*z2 - 15
    index10 = 2*z1
    index11 = 256*z0 + 32*z1 + 2*z2 - 1
    index12 = 32*z1 + 2*z2 - 1
    index13 = 256*z0 + 32*z1 + 2*z2
    index14 = 32*z1 + 2*z2
    index15 = 256*z0 + 32*z1 + 2*z2 + 1
    index16 = 32*z1 + 2*z2 + 1
    index17 = 2*z1 + 1
    index18 = 256*z0 + 32*z1 + 2*z2 + 15
    index19 = 32*z1 + 2*z2 + 15
    index20 = 256*z0 + 32*z1 + 2*z2 + 16
    index21 = 32*z1 + 2*z2 + 16
    index22 = 256*z0 + 32*z1 + 2*z2 + 17
    index23 = 32*z1 + 2*z2 + 17
    index24 = 64*z0 + 8*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(16, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_5, constant_4)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(16, torch.int64)
        lt_2 = ops.lt(index_expr_6, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_7 = self.get_index('index4')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_7, constant_6)
        get_index_8 = self.get_index('index4')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_7 = ops.constant(16, torch.int64)
        lt_3 = ops.lt(index_expr_8, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        get_index_9 = self.get_index('index6')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        gt = ops.gt(masked_subblock2, masked_subblock1)
        where = ops.where(gt, index_expr_9, index_expr_4)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_10 = self.get_index('index0')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_10, constant_8)
        get_index_11 = self.get_index('index0')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_9 = ops.constant(16, torch.int64)
        lt_4 = ops.lt(index_expr_11, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_12, constant_10)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_11 = ops.constant(16, torch.int64)
        lt_5 = ops.lt(index_expr_13, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        get_index_14 = self.get_index('index9')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        gt_1 = ops.gt(masked_subblock3, maximum)
        where_1 = ops.where(gt_1, index_expr_14, where)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_15 = self.get_index('index10')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_15, constant_12)
        get_index_16 = self.get_index('index10')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_13 = ops.constant(16, torch.int64)
        lt_6 = ops.lt(index_expr_16, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_17 = self.get_index('index1')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_17, constant_14)
        get_index_18 = self.get_index('index1')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_15 = ops.constant(16, torch.int64)
        lt_7 = ops.lt(index_expr_18, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        get_index_19 = self.get_index('index12')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        gt_2 = ops.gt(masked_subblock4, maximum_1)
        where_2 = ops.where(gt_2, index_expr_19, where_1)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_20 = self.get_index('index10')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_20, constant_16)
        get_index_21 = self.get_index('index10')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_17 = ops.constant(16, torch.int64)
        lt_8 = ops.lt(index_expr_21, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_22 = self.get_index('index4')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_22, constant_18)
        get_index_23 = self.get_index('index4')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_19 = ops.constant(16, torch.int64)
        lt_9 = ops.lt(index_expr_23, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        get_index_24 = self.get_index('index14')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        gt_3 = ops.gt(masked_subblock5, maximum_2)
        where_3 = ops.where(gt_3, index_expr_24, where_2)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_25 = self.get_index('index10')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_25, constant_20)
        get_index_26 = self.get_index('index10')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_21 = ops.constant(16, torch.int64)
        lt_10 = ops.lt(index_expr_26, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_27 = self.get_index('index7')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_27, constant_22)
        get_index_28 = self.get_index('index7')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_23 = ops.constant(16, torch.int64)
        lt_11 = ops.lt(index_expr_28, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        get_index_29 = self.get_index('index16')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        gt_4 = ops.gt(masked_subblock6, maximum_3)
        where_4 = ops.where(gt_4, index_expr_29, where_3)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_30 = self.get_index('index17')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_30, constant_24)
        get_index_31 = self.get_index('index17')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_25 = ops.constant(16, torch.int64)
        lt_12 = ops.lt(index_expr_31, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_32 = self.get_index('index1')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_32, constant_26)
        get_index_33 = self.get_index('index1')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_27 = ops.constant(16, torch.int64)
        lt_13 = ops.lt(index_expr_33, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        get_index_34 = self.get_index('index19')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        gt_5 = ops.gt(masked_subblock7, maximum_4)
        where_5 = ops.where(gt_5, index_expr_34, where_4)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_35 = self.get_index('index17')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_35, constant_28)
        get_index_36 = self.get_index('index17')
        index_expr_36 = ops.index_expr(get_index_36, torch.int64)
        constant_29 = ops.constant(16, torch.int64)
        lt_14 = ops.lt(index_expr_36, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_37 = self.get_index('index4')
        index_expr_37 = ops.index_expr(get_index_37, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_37, constant_30)
        get_index_38 = self.get_index('index4')
        index_expr_38 = ops.index_expr(get_index_38, torch.int64)
        constant_31 = ops.constant(16, torch.int64)
        lt_15 = ops.lt(index_expr_38, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        get_index_39 = self.get_index('index21')
        index_expr_39 = ops.index_expr(get_index_39, torch.int64)
        gt_6 = ops.gt(masked_subblock8, maximum_5)
        where_6 = ops.where(gt_6, index_expr_39, where_5)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_40 = self.get_index('index17')
        index_expr_40 = ops.index_expr(get_index_40, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_40, constant_32)
        get_index_41 = self.get_index('index17')
        index_expr_41 = ops.index_expr(get_index_41, torch.int64)
        constant_33 = ops.constant(16, torch.int64)
        lt_16 = ops.lt(index_expr_41, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_42 = self.get_index('index7')
        index_expr_42 = ops.index_expr(get_index_42, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_42, constant_34)
        get_index_43 = self.get_index('index7')
        index_expr_43 = ops.index_expr(get_index_43, torch.int64)
        constant_35 = ops.constant(16, torch.int64)
        lt_17 = ops.lt(index_expr_43, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        get_index_44 = self.get_index('index23')
        index_expr_44 = ops.index_expr(get_index_44, torch.int64)
        gt_7 = ops.gt(masked_subblock9, maximum_6)
        where_7 = ops.where(gt_7, index_expr_44, where_6)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_45 = self.get_index('index24')
        store = ops.store('buf9', get_index_45, where_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index11')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index15')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index18')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index20')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index22')
        load = ops.load('buf7', get_index)
        return load


buf10: ExternKernelSchedulerNode(Convolution)
buf10.writes = [StarDep(name='buf10')]
buf10.unmet_dependencies = [StarDep(name='buf8')]
buf10.met_dependencies = [StarDep(name='primals_4')]
buf10.node.kernel = aten.convolution


buf11: SchedulerNode(ComputedBuffer)
buf11.writes = 
    [   MemoryDep(name='buf11', index=c0, size=(64, 512)),
        MemoryDep(name='buf11', index=c0, size=(64,))]
buf11.unmet_dependencies = [MemoryDep(name='buf10', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf11.met_dependencies = []
buf11.group.device = cpu
buf11.group.iteration = ((64,), (8, 64))
buf11.sizes = ([64], [8, 64])
class buf11_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf11', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf12: SchedulerNode(ComputedBuffer)
buf12.writes = [MemoryDep(name='buf12', index=c0, size=(64,))]
buf12.unmet_dependencies = [MemoryDep(name='buf11', index=c0, size=(64,))]
buf12.met_dependencies = []
buf12.group.device = cpu
buf12.group.iteration = ((64,), ())
buf12.sizes = ([64], [])
class buf12_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf12', get_index_1, div, None)
        return store


buf13: SchedulerNode(ComputedBuffer)
buf13.writes = 
    [   MemoryDep(name='buf13', index=c0, size=(64, 512)),
        MemoryDep(name='buf13', index=c0, size=(64,))]
buf13.unmet_dependencies = 
    [   MemoryDep(name='buf10', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64)),
        MemoryDep(name='buf12', index=c0, size=(64, 512))]
buf13.met_dependencies = []
buf13.group.device = cpu
buf13.group.iteration = ((64,), (8, 64))
buf13.sizes = ([64], [8, 64])
class buf13_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf12', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf13', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf14: SchedulerNode(ComputedBuffer)
buf14.writes = [MemoryDep(name='buf14', index=c0, size=(64,))]
buf14.unmet_dependencies = [MemoryDep(name='buf13', index=c0, size=(64,))]
buf14.met_dependencies = []
buf14.group.device = cpu
buf14.group.iteration = ((64,), ())
buf14.sizes = ([64], [])
class buf14_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf14', get_index_1, rsqrt, None)
        return store


buf15: SchedulerNode(ComputedBuffer)
buf15.writes = [MemoryDep(name='buf15', index=c0, size=(64,))]
buf15.unmet_dependencies = [MemoryDep(name='buf12', index=c0, size=(64,))]
buf15.met_dependencies = [MemoryDep(name='primals_165', index=c0, size=(64,))]
buf15.group.device = cpu
buf15.group.iteration = ((64,), ())
buf15.sizes = ([64], [])
class buf15_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_165', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf15', get_index_2, add, None)
        return store


buf16: SchedulerNode(ComputedBuffer)
buf16.writes = [MemoryDep(name='buf16', index=c0, size=(64,))]
buf16.unmet_dependencies = [MemoryDep(name='buf13', index=c0, size=(64,))]
buf16.met_dependencies = [MemoryDep(name='primals_166', index=c0, size=(64,))]
buf16.group.device = cpu
buf16.group.iteration = ((64,), ())
buf16.sizes = ([64], [])
class buf16_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_166', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf16', get_index_2, add, None)
        return store


buf17: SchedulerNode(ComputedBuffer)
buf17.writes = [MemoryDep(name='buf17', index=c0, size=(32768,))]
buf17.unmet_dependencies = 
    [   MemoryDep(name='buf10', index=c0, size=(32768,)),
        MemoryDep(name='buf12', index=c1, size=(8, 64, 64)),
        MemoryDep(name='buf13', index=c1, size=(8, 64, 64))]
buf17.met_dependencies = 
    [   MemoryDep(name='primals_5', index=c1, size=(8, 64, 64)),
        MemoryDep(name='primals_6', index=c1, size=(8, 64, 64))]
buf17.group.device = cpu
buf17.group.iteration = ((8, 64, 64), ())
buf17.sizes = ([8, 64, 64], [])
class buf17_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf12', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf13', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_5', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_6', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf17', get_index_5, relu, None)
        return store


buf18: ExternKernelSchedulerNode(Convolution)
buf18.writes = [StarDep(name='buf18')]
buf18.unmet_dependencies = [StarDep(name='buf17')]
buf18.met_dependencies = [StarDep(name='primals_7')]
buf18.node.kernel = aten.convolution


buf19: SchedulerNode(ComputedBuffer)
buf19.writes = 
    [   MemoryDep(name='buf19', index=c0, size=(64, 512)),
        MemoryDep(name='buf19', index=c0, size=(64,))]
buf19.unmet_dependencies = [MemoryDep(name='buf18', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf19.met_dependencies = []
buf19.group.device = cpu
buf19.group.iteration = ((64,), (8, 64))
buf19.sizes = ([64], [8, 64])
class buf19_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf19', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf20: SchedulerNode(ComputedBuffer)
buf20.writes = [MemoryDep(name='buf20', index=c0, size=(64,))]
buf20.unmet_dependencies = [MemoryDep(name='buf19', index=c0, size=(64,))]
buf20.met_dependencies = []
buf20.group.device = cpu
buf20.group.iteration = ((64,), ())
buf20.sizes = ([64], [])
class buf20_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf20', get_index_1, div, None)
        return store


buf21: SchedulerNode(ComputedBuffer)
buf21.writes = 
    [   MemoryDep(name='buf21', index=c0, size=(64, 512)),
        MemoryDep(name='buf21', index=c0, size=(64,))]
buf21.unmet_dependencies = 
    [   MemoryDep(name='buf18', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64)),
        MemoryDep(name='buf20', index=c0, size=(64, 512))]
buf21.met_dependencies = []
buf21.group.device = cpu
buf21.group.iteration = ((64,), (8, 64))
buf21.sizes = ([64], [8, 64])
class buf21_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf20', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf21', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf22: SchedulerNode(ComputedBuffer)
buf22.writes = [MemoryDep(name='buf22', index=c0, size=(64,))]
buf22.unmet_dependencies = [MemoryDep(name='buf21', index=c0, size=(64,))]
buf22.met_dependencies = []
buf22.group.device = cpu
buf22.group.iteration = ((64,), ())
buf22.sizes = ([64], [])
class buf22_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf22', get_index_1, rsqrt, None)
        return store


buf23: SchedulerNode(ComputedBuffer)
buf23.writes = [MemoryDep(name='buf23', index=c0, size=(64,))]
buf23.unmet_dependencies = [MemoryDep(name='buf20', index=c0, size=(64,))]
buf23.met_dependencies = [MemoryDep(name='primals_168', index=c0, size=(64,))]
buf23.group.device = cpu
buf23.group.iteration = ((64,), ())
buf23.sizes = ([64], [])
class buf23_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_168', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf23', get_index_2, add, None)
        return store


buf24: SchedulerNode(ComputedBuffer)
buf24.writes = [MemoryDep(name='buf24', index=c0, size=(64,))]
buf24.unmet_dependencies = [MemoryDep(name='buf21', index=c0, size=(64,))]
buf24.met_dependencies = [MemoryDep(name='primals_169', index=c0, size=(64,))]
buf24.group.device = cpu
buf24.group.iteration = ((64,), ())
buf24.sizes = ([64], [])
class buf24_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_169', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf24', get_index_2, add, None)
        return store


buf25: SchedulerNode(ComputedBuffer)
buf25.writes = [MemoryDep(name='buf25', index=c0, size=(32768,))]
buf25.unmet_dependencies = 
    [   MemoryDep(name='buf18', index=c0, size=(32768,)),
        MemoryDep(name='buf20', index=c1, size=(8, 64, 64)),
        MemoryDep(name='buf21', index=c1, size=(8, 64, 64))]
buf25.met_dependencies = 
    [   MemoryDep(name='primals_8', index=c1, size=(8, 64, 64)),
        MemoryDep(name='primals_9', index=c1, size=(8, 64, 64))]
buf25.group.device = cpu
buf25.group.iteration = ((8, 64, 64), ())
buf25.sizes = ([8, 64, 64], [])
class buf25_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf20', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf21', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_8', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_9', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf25', get_index_5, relu, None)
        return store


buf26: ExternKernelSchedulerNode(Convolution)
buf26.writes = [StarDep(name='buf26')]
buf26.unmet_dependencies = [StarDep(name='buf25')]
buf26.met_dependencies = [StarDep(name='primals_10')]
buf26.node.kernel = aten.convolution


buf27: SchedulerNode(ComputedBuffer)
buf27.writes = 
    [   MemoryDep(name='buf27', index=c0, size=(256, 512)),
        MemoryDep(name='buf27', index=c0, size=(256,))]
buf27.unmet_dependencies = [MemoryDep(name='buf26', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64))]
buf27.met_dependencies = []
buf27.group.device = cpu
buf27.group.iteration = ((256,), (8, 64))
buf27.sizes = ([256], [8, 64])
class buf27_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf27', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf28: SchedulerNode(ComputedBuffer)
buf28.writes = [MemoryDep(name='buf28', index=c0, size=(256,))]
buf28.unmet_dependencies = [MemoryDep(name='buf27', index=c0, size=(256,))]
buf28.met_dependencies = []
buf28.group.device = cpu
buf28.group.iteration = ((256,), ())
buf28.sizes = ([256], [])
class buf28_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf28', get_index_1, div, None)
        return store


buf29: SchedulerNode(ComputedBuffer)
buf29.writes = 
    [   MemoryDep(name='buf29', index=c0, size=(256, 512)),
        MemoryDep(name='buf29', index=c0, size=(256,))]
buf29.unmet_dependencies = 
    [   MemoryDep(name='buf26', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64)),
        MemoryDep(name='buf28', index=c0, size=(256, 512))]
buf29.met_dependencies = []
buf29.group.device = cpu
buf29.group.iteration = ((256,), (8, 64))
buf29.sizes = ([256], [8, 64])
class buf29_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf28', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf29', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf30: SchedulerNode(ComputedBuffer)
buf30.writes = [MemoryDep(name='buf30', index=c0, size=(256,))]
buf30.unmet_dependencies = [MemoryDep(name='buf29', index=c0, size=(256,))]
buf30.met_dependencies = []
buf30.group.device = cpu
buf30.group.iteration = ((256,), ())
buf30.sizes = ([256], [])
class buf30_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf30', get_index_1, rsqrt, None)
        return store


buf31: SchedulerNode(ComputedBuffer)
buf31.writes = [MemoryDep(name='buf31', index=c0, size=(256,))]
buf31.unmet_dependencies = [MemoryDep(name='buf28', index=c0, size=(256,))]
buf31.met_dependencies = [MemoryDep(name='primals_171', index=c0, size=(256,))]
buf31.group.device = cpu
buf31.group.iteration = ((256,), ())
buf31.sizes = ([256], [])
class buf31_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_171', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf31', get_index_2, add, None)
        return store


buf32: SchedulerNode(ComputedBuffer)
buf32.writes = [MemoryDep(name='buf32', index=c0, size=(256,))]
buf32.unmet_dependencies = [MemoryDep(name='buf29', index=c0, size=(256,))]
buf32.met_dependencies = [MemoryDep(name='primals_172', index=c0, size=(256,))]
buf32.group.device = cpu
buf32.group.iteration = ((256,), ())
buf32.sizes = ([256], [])
class buf32_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_172', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf32', get_index_2, add, None)
        return store


buf33: ExternKernelSchedulerNode(Convolution)
buf33.writes = [StarDep(name='buf33')]
buf33.unmet_dependencies = [StarDep(name='buf8')]
buf33.met_dependencies = [StarDep(name='primals_13')]
buf33.node.kernel = aten.convolution


buf34: SchedulerNode(ComputedBuffer)
buf34.writes = 
    [   MemoryDep(name='buf34', index=c0, size=(256, 512)),
        MemoryDep(name='buf34', index=c0, size=(256,))]
buf34.unmet_dependencies = [MemoryDep(name='buf33', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64))]
buf34.met_dependencies = []
buf34.group.device = cpu
buf34.group.iteration = ((256,), (8, 64))
buf34.sizes = ([256], [8, 64])
class buf34_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf34', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf35: SchedulerNode(ComputedBuffer)
buf35.writes = [MemoryDep(name='buf35', index=c0, size=(256,))]
buf35.unmet_dependencies = [MemoryDep(name='buf34', index=c0, size=(256,))]
buf35.met_dependencies = []
buf35.group.device = cpu
buf35.group.iteration = ((256,), ())
buf35.sizes = ([256], [])
class buf35_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf35', get_index_1, div, None)
        return store


buf36: SchedulerNode(ComputedBuffer)
buf36.writes = 
    [   MemoryDep(name='buf36', index=c0, size=(256, 512)),
        MemoryDep(name='buf36', index=c0, size=(256,))]
buf36.unmet_dependencies = 
    [   MemoryDep(name='buf33', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64)),
        MemoryDep(name='buf35', index=c0, size=(256, 512))]
buf36.met_dependencies = []
buf36.group.device = cpu
buf36.group.iteration = ((256,), (8, 64))
buf36.sizes = ([256], [8, 64])
class buf36_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf35', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf36', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf37: SchedulerNode(ComputedBuffer)
buf37.writes = [MemoryDep(name='buf37', index=c0, size=(256,))]
buf37.unmet_dependencies = [MemoryDep(name='buf36', index=c0, size=(256,))]
buf37.met_dependencies = []
buf37.group.device = cpu
buf37.group.iteration = ((256,), ())
buf37.sizes = ([256], [])
class buf37_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf37', get_index_1, rsqrt, None)
        return store


buf38: SchedulerNode(ComputedBuffer)
buf38.writes = [MemoryDep(name='buf38', index=c0, size=(256,))]
buf38.unmet_dependencies = [MemoryDep(name='buf35', index=c0, size=(256,))]
buf38.met_dependencies = [MemoryDep(name='primals_174', index=c0, size=(256,))]
buf38.group.device = cpu
buf38.group.iteration = ((256,), ())
buf38.sizes = ([256], [])
class buf38_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_174', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf38', get_index_2, add, None)
        return store


buf39: SchedulerNode(ComputedBuffer)
buf39.writes = [MemoryDep(name='buf39', index=c0, size=(256,))]
buf39.unmet_dependencies = [MemoryDep(name='buf36', index=c0, size=(256,))]
buf39.met_dependencies = [MemoryDep(name='primals_175', index=c0, size=(256,))]
buf39.group.device = cpu
buf39.group.iteration = ((256,), ())
buf39.sizes = ([256], [])
class buf39_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_175', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf39', get_index_2, add, None)
        return store


buf40: SchedulerNode(ComputedBuffer)
buf40.writes = [MemoryDep(name='buf40', index=c0, size=(131072,))]
buf40.unmet_dependencies = 
    [   MemoryDep(name='buf26', index=c0, size=(131072,)),
        MemoryDep(name='buf28', index=c1, size=(8, 256, 64)),
        MemoryDep(name='buf29', index=c1, size=(8, 256, 64)),
        MemoryDep(name='buf33', index=c0, size=(131072,)),
        MemoryDep(name='buf35', index=c1, size=(8, 256, 64)),
        MemoryDep(name='buf36', index=c1, size=(8, 256, 64))]
buf40.met_dependencies = 
    [   MemoryDep(name='primals_11', index=c1, size=(8, 256, 64)),
        MemoryDep(name='primals_12', index=c1, size=(8, 256, 64)),
        MemoryDep(name='primals_14', index=c1, size=(8, 256, 64)),
        MemoryDep(name='primals_15', index=c1, size=(8, 256, 64))]
buf40.group.device = cpu
buf40.group.iteration = ((8, 256, 64), ())
buf40.sizes = ([8, 256, 64], [])
class buf40_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 64}
    index0 = 16384*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf28', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf29', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_11', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_12', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf33', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf35', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf36', get_index_7)
        constant_2 = ops.constant(512, torch.float32)
        div_1 = ops.div(load_7, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_14', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_15', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf40', get_index_10, add_4, None)
        return store


buf41: SchedulerNode(ComputedBuffer)
buf41.writes = [MemoryDep(name='buf41', index=c0, size=(131072,))]
buf41.unmet_dependencies = [MemoryDep(name='buf40', index=c0, size=(131072,))]
buf41.met_dependencies = []
buf41.group.device = cpu
buf41.group.iteration = ((131072,), ())
buf41.sizes = ([131072], [])
class buf41_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf41', get_index_1, relu, None)
        return store


buf42: ExternKernelSchedulerNode(Convolution)
buf42.writes = [StarDep(name='buf42')]
buf42.unmet_dependencies = [StarDep(name='buf41')]
buf42.met_dependencies = [StarDep(name='primals_16')]
buf42.node.kernel = aten.convolution


buf43: SchedulerNode(ComputedBuffer)
buf43.writes = 
    [   MemoryDep(name='buf43', index=c0, size=(64, 512)),
        MemoryDep(name='buf43', index=c0, size=(64,))]
buf43.unmet_dependencies = [MemoryDep(name='buf42', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf43.met_dependencies = []
buf43.group.device = cpu
buf43.group.iteration = ((64,), (8, 64))
buf43.sizes = ([64], [8, 64])
class buf43_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf43', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf44: SchedulerNode(ComputedBuffer)
buf44.writes = [MemoryDep(name='buf44', index=c0, size=(64,))]
buf44.unmet_dependencies = [MemoryDep(name='buf43', index=c0, size=(64,))]
buf44.met_dependencies = []
buf44.group.device = cpu
buf44.group.iteration = ((64,), ())
buf44.sizes = ([64], [])
class buf44_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf44', get_index_1, div, None)
        return store


buf45: SchedulerNode(ComputedBuffer)
buf45.writes = 
    [   MemoryDep(name='buf45', index=c0, size=(64, 512)),
        MemoryDep(name='buf45', index=c0, size=(64,))]
buf45.unmet_dependencies = 
    [   MemoryDep(name='buf42', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64)),
        MemoryDep(name='buf44', index=c0, size=(64, 512))]
buf45.met_dependencies = []
buf45.group.device = cpu
buf45.group.iteration = ((64,), (8, 64))
buf45.sizes = ([64], [8, 64])
class buf45_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf44', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf45', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf46: SchedulerNode(ComputedBuffer)
buf46.writes = [MemoryDep(name='buf46', index=c0, size=(64,))]
buf46.unmet_dependencies = [MemoryDep(name='buf45', index=c0, size=(64,))]
buf46.met_dependencies = []
buf46.group.device = cpu
buf46.group.iteration = ((64,), ())
buf46.sizes = ([64], [])
class buf46_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf46', get_index_1, rsqrt, None)
        return store


buf47: SchedulerNode(ComputedBuffer)
buf47.writes = [MemoryDep(name='buf47', index=c0, size=(64,))]
buf47.unmet_dependencies = [MemoryDep(name='buf44', index=c0, size=(64,))]
buf47.met_dependencies = [MemoryDep(name='primals_177', index=c0, size=(64,))]
buf47.group.device = cpu
buf47.group.iteration = ((64,), ())
buf47.sizes = ([64], [])
class buf47_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_177', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf47', get_index_2, add, None)
        return store


buf48: SchedulerNode(ComputedBuffer)
buf48.writes = [MemoryDep(name='buf48', index=c0, size=(64,))]
buf48.unmet_dependencies = [MemoryDep(name='buf45', index=c0, size=(64,))]
buf48.met_dependencies = [MemoryDep(name='primals_178', index=c0, size=(64,))]
buf48.group.device = cpu
buf48.group.iteration = ((64,), ())
buf48.sizes = ([64], [])
class buf48_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_178', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf48', get_index_2, add, None)
        return store


buf49: SchedulerNode(ComputedBuffer)
buf49.writes = [MemoryDep(name='buf49', index=c0, size=(32768,))]
buf49.unmet_dependencies = 
    [   MemoryDep(name='buf42', index=c0, size=(32768,)),
        MemoryDep(name='buf44', index=c1, size=(8, 64, 64)),
        MemoryDep(name='buf45', index=c1, size=(8, 64, 64))]
buf49.met_dependencies = 
    [   MemoryDep(name='primals_17', index=c1, size=(8, 64, 64)),
        MemoryDep(name='primals_18', index=c1, size=(8, 64, 64))]
buf49.group.device = cpu
buf49.group.iteration = ((8, 64, 64), ())
buf49.sizes = ([8, 64, 64], [])
class buf49_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf44', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf45', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_18', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf49', get_index_5, relu, None)
        return store


buf50: ExternKernelSchedulerNode(Convolution)
buf50.writes = [StarDep(name='buf50')]
buf50.unmet_dependencies = [StarDep(name='buf49')]
buf50.met_dependencies = [StarDep(name='primals_19')]
buf50.node.kernel = aten.convolution


buf51: SchedulerNode(ComputedBuffer)
buf51.writes = 
    [   MemoryDep(name='buf51', index=c0, size=(64, 512)),
        MemoryDep(name='buf51', index=c0, size=(64,))]
buf51.unmet_dependencies = [MemoryDep(name='buf50', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf51.met_dependencies = []
buf51.group.device = cpu
buf51.group.iteration = ((64,), (8, 64))
buf51.sizes = ([64], [8, 64])
class buf51_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf51', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf52: SchedulerNode(ComputedBuffer)
buf52.writes = [MemoryDep(name='buf52', index=c0, size=(64,))]
buf52.unmet_dependencies = [MemoryDep(name='buf51', index=c0, size=(64,))]
buf52.met_dependencies = []
buf52.group.device = cpu
buf52.group.iteration = ((64,), ())
buf52.sizes = ([64], [])
class buf52_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf52', get_index_1, div, None)
        return store


buf53: SchedulerNode(ComputedBuffer)
buf53.writes = 
    [   MemoryDep(name='buf53', index=c0, size=(64, 512)),
        MemoryDep(name='buf53', index=c0, size=(64,))]
buf53.unmet_dependencies = 
    [   MemoryDep(name='buf50', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64)),
        MemoryDep(name='buf52', index=c0, size=(64, 512))]
buf53.met_dependencies = []
buf53.group.device = cpu
buf53.group.iteration = ((64,), (8, 64))
buf53.sizes = ([64], [8, 64])
class buf53_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf52', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf53', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf54: SchedulerNode(ComputedBuffer)
buf54.writes = [MemoryDep(name='buf54', index=c0, size=(64,))]
buf54.unmet_dependencies = [MemoryDep(name='buf53', index=c0, size=(64,))]
buf54.met_dependencies = []
buf54.group.device = cpu
buf54.group.iteration = ((64,), ())
buf54.sizes = ([64], [])
class buf54_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf54', get_index_1, rsqrt, None)
        return store


buf55: SchedulerNode(ComputedBuffer)
buf55.writes = [MemoryDep(name='buf55', index=c0, size=(64,))]
buf55.unmet_dependencies = [MemoryDep(name='buf52', index=c0, size=(64,))]
buf55.met_dependencies = [MemoryDep(name='primals_180', index=c0, size=(64,))]
buf55.group.device = cpu
buf55.group.iteration = ((64,), ())
buf55.sizes = ([64], [])
class buf55_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_180', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf55', get_index_2, add, None)
        return store


buf56: SchedulerNode(ComputedBuffer)
buf56.writes = [MemoryDep(name='buf56', index=c0, size=(64,))]
buf56.unmet_dependencies = [MemoryDep(name='buf53', index=c0, size=(64,))]
buf56.met_dependencies = [MemoryDep(name='primals_181', index=c0, size=(64,))]
buf56.group.device = cpu
buf56.group.iteration = ((64,), ())
buf56.sizes = ([64], [])
class buf56_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_181', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf56', get_index_2, add, None)
        return store


buf57: SchedulerNode(ComputedBuffer)
buf57.writes = [MemoryDep(name='buf57', index=c0, size=(32768,))]
buf57.unmet_dependencies = 
    [   MemoryDep(name='buf50', index=c0, size=(32768,)),
        MemoryDep(name='buf52', index=c1, size=(8, 64, 64)),
        MemoryDep(name='buf53', index=c1, size=(8, 64, 64))]
buf57.met_dependencies = 
    [   MemoryDep(name='primals_20', index=c1, size=(8, 64, 64)),
        MemoryDep(name='primals_21', index=c1, size=(8, 64, 64))]
buf57.group.device = cpu
buf57.group.iteration = ((8, 64, 64), ())
buf57.sizes = ([8, 64, 64], [])
class buf57_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf52', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf53', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_20', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_21', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf57', get_index_5, relu, None)
        return store


buf58: ExternKernelSchedulerNode(Convolution)
buf58.writes = [StarDep(name='buf58')]
buf58.unmet_dependencies = [StarDep(name='buf57')]
buf58.met_dependencies = [StarDep(name='primals_22')]
buf58.node.kernel = aten.convolution


buf59: SchedulerNode(ComputedBuffer)
buf59.writes = 
    [   MemoryDep(name='buf59', index=c0, size=(256, 512)),
        MemoryDep(name='buf59', index=c0, size=(256,))]
buf59.unmet_dependencies = [MemoryDep(name='buf58', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64))]
buf59.met_dependencies = []
buf59.group.device = cpu
buf59.group.iteration = ((256,), (8, 64))
buf59.sizes = ([256], [8, 64])
class buf59_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf59', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf60: SchedulerNode(ComputedBuffer)
buf60.writes = [MemoryDep(name='buf60', index=c0, size=(256,))]
buf60.unmet_dependencies = [MemoryDep(name='buf59', index=c0, size=(256,))]
buf60.met_dependencies = []
buf60.group.device = cpu
buf60.group.iteration = ((256,), ())
buf60.sizes = ([256], [])
class buf60_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf60', get_index_1, div, None)
        return store


buf61: SchedulerNode(ComputedBuffer)
buf61.writes = 
    [   MemoryDep(name='buf61', index=c0, size=(256, 512)),
        MemoryDep(name='buf61', index=c0, size=(256,))]
buf61.unmet_dependencies = 
    [   MemoryDep(name='buf58', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64)),
        MemoryDep(name='buf60', index=c0, size=(256, 512))]
buf61.met_dependencies = []
buf61.group.device = cpu
buf61.group.iteration = ((256,), (8, 64))
buf61.sizes = ([256], [8, 64])
class buf61_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf60', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf61', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf62: SchedulerNode(ComputedBuffer)
buf62.writes = [MemoryDep(name='buf62', index=c0, size=(256,))]
buf62.unmet_dependencies = [MemoryDep(name='buf61', index=c0, size=(256,))]
buf62.met_dependencies = []
buf62.group.device = cpu
buf62.group.iteration = ((256,), ())
buf62.sizes = ([256], [])
class buf62_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf62', get_index_1, rsqrt, None)
        return store


buf63: SchedulerNode(ComputedBuffer)
buf63.writes = [MemoryDep(name='buf63', index=c0, size=(256,))]
buf63.unmet_dependencies = [MemoryDep(name='buf60', index=c0, size=(256,))]
buf63.met_dependencies = [MemoryDep(name='primals_183', index=c0, size=(256,))]
buf63.group.device = cpu
buf63.group.iteration = ((256,), ())
buf63.sizes = ([256], [])
class buf63_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_183', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf63', get_index_2, add, None)
        return store


buf64: SchedulerNode(ComputedBuffer)
buf64.writes = [MemoryDep(name='buf64', index=c0, size=(256,))]
buf64.unmet_dependencies = [MemoryDep(name='buf61', index=c0, size=(256,))]
buf64.met_dependencies = [MemoryDep(name='primals_184', index=c0, size=(256,))]
buf64.group.device = cpu
buf64.group.iteration = ((256,), ())
buf64.sizes = ([256], [])
class buf64_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_184', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf64', get_index_2, add, None)
        return store


buf65: SchedulerNode(ComputedBuffer)
buf65.writes = [MemoryDep(name='buf65', index=c0, size=(131072,))]
buf65.unmet_dependencies = 
    [   MemoryDep(name='buf41', index=c0, size=(131072,)),
        MemoryDep(name='buf58', index=c0, size=(131072,)),
        MemoryDep(name='buf60', index=c1, size=(8, 256, 64)),
        MemoryDep(name='buf61', index=c1, size=(8, 256, 64))]
buf65.met_dependencies = 
    [   MemoryDep(name='primals_23', index=c1, size=(8, 256, 64)),
        MemoryDep(name='primals_24', index=c1, size=(8, 256, 64))]
buf65.group.device = cpu
buf65.group.iteration = ((8, 256, 64), ())
buf65.sizes = ([8, 256, 64], [])
class buf65_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 64}
    index0 = 16384*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf60', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf61', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_23', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_24', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf41', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf65', get_index_6, relu, None)
        return store


buf66: ExternKernelSchedulerNode(Convolution)
buf66.writes = [StarDep(name='buf66')]
buf66.unmet_dependencies = [StarDep(name='buf65')]
buf66.met_dependencies = [StarDep(name='primals_25')]
buf66.node.kernel = aten.convolution


buf67: SchedulerNode(ComputedBuffer)
buf67.writes = 
    [   MemoryDep(name='buf67', index=c0, size=(64, 512)),
        MemoryDep(name='buf67', index=c0, size=(64,))]
buf67.unmet_dependencies = [MemoryDep(name='buf66', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf67.met_dependencies = []
buf67.group.device = cpu
buf67.group.iteration = ((64,), (8, 64))
buf67.sizes = ([64], [8, 64])
class buf67_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf67', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf68: SchedulerNode(ComputedBuffer)
buf68.writes = [MemoryDep(name='buf68', index=c0, size=(64,))]
buf68.unmet_dependencies = [MemoryDep(name='buf67', index=c0, size=(64,))]
buf68.met_dependencies = []
buf68.group.device = cpu
buf68.group.iteration = ((64,), ())
buf68.sizes = ([64], [])
class buf68_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf68', get_index_1, div, None)
        return store


buf69: SchedulerNode(ComputedBuffer)
buf69.writes = 
    [   MemoryDep(name='buf69', index=c0, size=(64, 512)),
        MemoryDep(name='buf69', index=c0, size=(64,))]
buf69.unmet_dependencies = 
    [   MemoryDep(name='buf66', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64)),
        MemoryDep(name='buf68', index=c0, size=(64, 512))]
buf69.met_dependencies = []
buf69.group.device = cpu
buf69.group.iteration = ((64,), (8, 64))
buf69.sizes = ([64], [8, 64])
class buf69_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf68', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf69', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf70: SchedulerNode(ComputedBuffer)
buf70.writes = [MemoryDep(name='buf70', index=c0, size=(64,))]
buf70.unmet_dependencies = [MemoryDep(name='buf69', index=c0, size=(64,))]
buf70.met_dependencies = []
buf70.group.device = cpu
buf70.group.iteration = ((64,), ())
buf70.sizes = ([64], [])
class buf70_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf70', get_index_1, rsqrt, None)
        return store


buf71: SchedulerNode(ComputedBuffer)
buf71.writes = [MemoryDep(name='buf71', index=c0, size=(64,))]
buf71.unmet_dependencies = [MemoryDep(name='buf68', index=c0, size=(64,))]
buf71.met_dependencies = [MemoryDep(name='primals_186', index=c0, size=(64,))]
buf71.group.device = cpu
buf71.group.iteration = ((64,), ())
buf71.sizes = ([64], [])
class buf71_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_186', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf71', get_index_2, add, None)
        return store


buf72: SchedulerNode(ComputedBuffer)
buf72.writes = [MemoryDep(name='buf72', index=c0, size=(64,))]
buf72.unmet_dependencies = [MemoryDep(name='buf69', index=c0, size=(64,))]
buf72.met_dependencies = [MemoryDep(name='primals_187', index=c0, size=(64,))]
buf72.group.device = cpu
buf72.group.iteration = ((64,), ())
buf72.sizes = ([64], [])
class buf72_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_187', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf72', get_index_2, add, None)
        return store


buf73: SchedulerNode(ComputedBuffer)
buf73.writes = [MemoryDep(name='buf73', index=c0, size=(32768,))]
buf73.unmet_dependencies = 
    [   MemoryDep(name='buf66', index=c0, size=(32768,)),
        MemoryDep(name='buf68', index=c1, size=(8, 64, 64)),
        MemoryDep(name='buf69', index=c1, size=(8, 64, 64))]
buf73.met_dependencies = 
    [   MemoryDep(name='primals_26', index=c1, size=(8, 64, 64)),
        MemoryDep(name='primals_27', index=c1, size=(8, 64, 64))]
buf73.group.device = cpu
buf73.group.iteration = ((8, 64, 64), ())
buf73.sizes = ([8, 64, 64], [])
class buf73_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf68', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf69', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_26', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_27', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf73', get_index_5, relu, None)
        return store


buf74: ExternKernelSchedulerNode(Convolution)
buf74.writes = [StarDep(name='buf74')]
buf74.unmet_dependencies = [StarDep(name='buf73')]
buf74.met_dependencies = [StarDep(name='primals_28')]
buf74.node.kernel = aten.convolution


buf75: SchedulerNode(ComputedBuffer)
buf75.writes = 
    [   MemoryDep(name='buf75', index=c0, size=(64, 512)),
        MemoryDep(name='buf75', index=c0, size=(64,))]
buf75.unmet_dependencies = [MemoryDep(name='buf74', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64))]
buf75.met_dependencies = []
buf75.group.device = cpu
buf75.group.iteration = ((64,), (8, 64))
buf75.sizes = ([64], [8, 64])
class buf75_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf75', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf76: SchedulerNode(ComputedBuffer)
buf76.writes = [MemoryDep(name='buf76', index=c0, size=(64,))]
buf76.unmet_dependencies = [MemoryDep(name='buf75', index=c0, size=(64,))]
buf76.met_dependencies = []
buf76.group.device = cpu
buf76.group.iteration = ((64,), ())
buf76.sizes = ([64], [])
class buf76_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf76', get_index_1, div, None)
        return store


buf77: SchedulerNode(ComputedBuffer)
buf77.writes = 
    [   MemoryDep(name='buf77', index=c0, size=(64, 512)),
        MemoryDep(name='buf77', index=c0, size=(64,))]
buf77.unmet_dependencies = 
    [   MemoryDep(name='buf74', index=64*c0 + 4096*c1 + c2, size=(64, 8, 64)),
        MemoryDep(name='buf76', index=c0, size=(64, 512))]
buf77.met_dependencies = []
buf77.group.device = cpu
buf77.group.iteration = ((64,), (8, 64))
buf77.sizes = ([64], [8, 64])
class buf77_loop_body:
    var_ranges = {z0: 64, z1: 8, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf76', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf77', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf78: SchedulerNode(ComputedBuffer)
buf78.writes = [MemoryDep(name='buf78', index=c0, size=(64,))]
buf78.unmet_dependencies = [MemoryDep(name='buf77', index=c0, size=(64,))]
buf78.met_dependencies = []
buf78.group.device = cpu
buf78.group.iteration = ((64,), ())
buf78.sizes = ([64], [])
class buf78_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf78', get_index_1, rsqrt, None)
        return store


buf79: SchedulerNode(ComputedBuffer)
buf79.writes = [MemoryDep(name='buf79', index=c0, size=(64,))]
buf79.unmet_dependencies = [MemoryDep(name='buf76', index=c0, size=(64,))]
buf79.met_dependencies = [MemoryDep(name='primals_189', index=c0, size=(64,))]
buf79.group.device = cpu
buf79.group.iteration = ((64,), ())
buf79.sizes = ([64], [])
class buf79_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_189', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf79', get_index_2, add, None)
        return store


buf80: SchedulerNode(ComputedBuffer)
buf80.writes = [MemoryDep(name='buf80', index=c0, size=(64,))]
buf80.unmet_dependencies = [MemoryDep(name='buf77', index=c0, size=(64,))]
buf80.met_dependencies = [MemoryDep(name='primals_190', index=c0, size=(64,))]
buf80.group.device = cpu
buf80.group.iteration = ((64,), ())
buf80.sizes = ([64], [])
class buf80_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_190', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf80', get_index_2, add, None)
        return store


buf81: SchedulerNode(ComputedBuffer)
buf81.writes = [MemoryDep(name='buf81', index=c0, size=(32768,))]
buf81.unmet_dependencies = 
    [   MemoryDep(name='buf74', index=c0, size=(32768,)),
        MemoryDep(name='buf76', index=c1, size=(8, 64, 64)),
        MemoryDep(name='buf77', index=c1, size=(8, 64, 64))]
buf81.met_dependencies = 
    [   MemoryDep(name='primals_29', index=c1, size=(8, 64, 64)),
        MemoryDep(name='primals_30', index=c1, size=(8, 64, 64))]
buf81.group.device = cpu
buf81.group.iteration = ((8, 64, 64), ())
buf81.sizes = ([8, 64, 64], [])
class buf81_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf76', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf77', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_29', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_30', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf81', get_index_5, relu, None)
        return store


buf82: ExternKernelSchedulerNode(Convolution)
buf82.writes = [StarDep(name='buf82')]
buf82.unmet_dependencies = [StarDep(name='buf81')]
buf82.met_dependencies = [StarDep(name='primals_31')]
buf82.node.kernel = aten.convolution


buf83: SchedulerNode(ComputedBuffer)
buf83.writes = 
    [   MemoryDep(name='buf83', index=c0, size=(256, 512)),
        MemoryDep(name='buf83', index=c0, size=(256,))]
buf83.unmet_dependencies = [MemoryDep(name='buf82', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64))]
buf83.met_dependencies = []
buf83.group.device = cpu
buf83.group.iteration = ((256,), (8, 64))
buf83.sizes = ([256], [8, 64])
class buf83_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf83', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf84: SchedulerNode(ComputedBuffer)
buf84.writes = [MemoryDep(name='buf84', index=c0, size=(256,))]
buf84.unmet_dependencies = [MemoryDep(name='buf83', index=c0, size=(256,))]
buf84.met_dependencies = []
buf84.group.device = cpu
buf84.group.iteration = ((256,), ())
buf84.sizes = ([256], [])
class buf84_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf84', get_index_1, div, None)
        return store


buf85: SchedulerNode(ComputedBuffer)
buf85.writes = 
    [   MemoryDep(name='buf85', index=c0, size=(256, 512)),
        MemoryDep(name='buf85', index=c0, size=(256,))]
buf85.unmet_dependencies = 
    [   MemoryDep(name='buf82', index=64*c0 + 16384*c1 + c2, size=(256, 8, 64)),
        MemoryDep(name='buf84', index=c0, size=(256, 512))]
buf85.met_dependencies = []
buf85.group.device = cpu
buf85.group.iteration = ((256,), (8, 64))
buf85.sizes = ([256], [8, 64])
class buf85_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf84', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf85', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf86: SchedulerNode(ComputedBuffer)
buf86.writes = [MemoryDep(name='buf86', index=c0, size=(256,))]
buf86.unmet_dependencies = [MemoryDep(name='buf85', index=c0, size=(256,))]
buf86.met_dependencies = []
buf86.group.device = cpu
buf86.group.iteration = ((256,), ())
buf86.sizes = ([256], [])
class buf86_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf86', get_index_1, rsqrt, None)
        return store


buf87: SchedulerNode(ComputedBuffer)
buf87.writes = [MemoryDep(name='buf87', index=c0, size=(256,))]
buf87.unmet_dependencies = [MemoryDep(name='buf84', index=c0, size=(256,))]
buf87.met_dependencies = [MemoryDep(name='primals_192', index=c0, size=(256,))]
buf87.group.device = cpu
buf87.group.iteration = ((256,), ())
buf87.sizes = ([256], [])
class buf87_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_192', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf87', get_index_2, add, None)
        return store


buf88: SchedulerNode(ComputedBuffer)
buf88.writes = [MemoryDep(name='buf88', index=c0, size=(256,))]
buf88.unmet_dependencies = [MemoryDep(name='buf85', index=c0, size=(256,))]
buf88.met_dependencies = [MemoryDep(name='primals_193', index=c0, size=(256,))]
buf88.group.device = cpu
buf88.group.iteration = ((256,), ())
buf88.sizes = ([256], [])
class buf88_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_193', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf88', get_index_2, add, None)
        return store


buf89: SchedulerNode(ComputedBuffer)
buf89.writes = [MemoryDep(name='buf89', index=c0, size=(131072,))]
buf89.unmet_dependencies = 
    [   MemoryDep(name='buf65', index=c0, size=(131072,)),
        MemoryDep(name='buf82', index=c0, size=(131072,)),
        MemoryDep(name='buf84', index=c1, size=(8, 256, 64)),
        MemoryDep(name='buf85', index=c1, size=(8, 256, 64))]
buf89.met_dependencies = 
    [   MemoryDep(name='primals_32', index=c1, size=(8, 256, 64)),
        MemoryDep(name='primals_33', index=c1, size=(8, 256, 64))]
buf89.group.device = cpu
buf89.group.iteration = ((8, 256, 64), ())
buf89.sizes = ([8, 256, 64], [])
class buf89_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 64}
    index0 = 16384*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf84', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf85', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_32', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_33', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf65', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf89', get_index_6, relu, None)
        return store


buf90: ExternKernelSchedulerNode(Convolution)
buf90.writes = [StarDep(name='buf90')]
buf90.unmet_dependencies = [StarDep(name='buf89')]
buf90.met_dependencies = [StarDep(name='primals_34')]
buf90.node.kernel = aten.convolution


buf91: SchedulerNode(ComputedBuffer)
buf91.writes = 
    [   MemoryDep(name='buf91', index=c0, size=(128, 512)),
        MemoryDep(name='buf91', index=c0, size=(128,))]
buf91.unmet_dependencies = [MemoryDep(name='buf90', index=64*c0 + 8192*c1 + c2, size=(128, 8, 64))]
buf91.met_dependencies = []
buf91.group.device = cpu
buf91.group.iteration = ((128,), (8, 64))
buf91.sizes = ([128], [8, 64])
class buf91_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 64}
    index0 = 64*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf91', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf92: SchedulerNode(ComputedBuffer)
buf92.writes = [MemoryDep(name='buf92', index=c0, size=(128,))]
buf92.unmet_dependencies = [MemoryDep(name='buf91', index=c0, size=(128,))]
buf92.met_dependencies = []
buf92.group.device = cpu
buf92.group.iteration = ((128,), ())
buf92.sizes = ([128], [])
class buf92_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf92', get_index_1, div, None)
        return store


buf93: SchedulerNode(ComputedBuffer)
buf93.writes = 
    [   MemoryDep(name='buf93', index=c0, size=(128, 512)),
        MemoryDep(name='buf93', index=c0, size=(128,))]
buf93.unmet_dependencies = 
    [   MemoryDep(name='buf90', index=64*c0 + 8192*c1 + c2, size=(128, 8, 64)),
        MemoryDep(name='buf92', index=c0, size=(128, 512))]
buf93.met_dependencies = []
buf93.group.device = cpu
buf93.group.iteration = ((128,), (8, 64))
buf93.sizes = ([128], [8, 64])
class buf93_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 64}
    index0 = 64*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf92', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf93', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf94: SchedulerNode(ComputedBuffer)
buf94.writes = [MemoryDep(name='buf94', index=c0, size=(128,))]
buf94.unmet_dependencies = [MemoryDep(name='buf93', index=c0, size=(128,))]
buf94.met_dependencies = []
buf94.group.device = cpu
buf94.group.iteration = ((128,), ())
buf94.sizes = ([128], [])
class buf94_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf94', get_index_1, rsqrt, None)
        return store


buf95: SchedulerNode(ComputedBuffer)
buf95.writes = [MemoryDep(name='buf95', index=c0, size=(128,))]
buf95.unmet_dependencies = [MemoryDep(name='buf92', index=c0, size=(128,))]
buf95.met_dependencies = [MemoryDep(name='primals_195', index=c0, size=(128,))]
buf95.group.device = cpu
buf95.group.iteration = ((128,), ())
buf95.sizes = ([128], [])
class buf95_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_195', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf95', get_index_2, add, None)
        return store


buf96: SchedulerNode(ComputedBuffer)
buf96.writes = [MemoryDep(name='buf96', index=c0, size=(128,))]
buf96.unmet_dependencies = [MemoryDep(name='buf93', index=c0, size=(128,))]
buf96.met_dependencies = [MemoryDep(name='primals_196', index=c0, size=(128,))]
buf96.group.device = cpu
buf96.group.iteration = ((128,), ())
buf96.sizes = ([128], [])
class buf96_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0019569471624266, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_196', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf96', get_index_2, add, None)
        return store


buf97: SchedulerNode(ComputedBuffer)
buf97.writes = [MemoryDep(name='buf97', index=c0, size=(65536,))]
buf97.unmet_dependencies = 
    [   MemoryDep(name='buf90', index=c0, size=(65536,)),
        MemoryDep(name='buf92', index=c1, size=(8, 128, 64)),
        MemoryDep(name='buf93', index=c1, size=(8, 128, 64))]
buf97.met_dependencies = 
    [   MemoryDep(name='primals_35', index=c1, size=(8, 128, 64)),
        MemoryDep(name='primals_36', index=c1, size=(8, 128, 64))]
buf97.group.device = cpu
buf97.group.iteration = ((8, 128, 64), ())
buf97.sizes = ([8, 128, 64], [])
class buf97_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 64}
    index0 = 8192*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf92', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf93', get_index_2)
        constant = ops.constant(512, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_35', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_36', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf97', get_index_5, relu, None)
        return store


buf98: ExternKernelSchedulerNode(Convolution)
buf98.writes = [StarDep(name='buf98')]
buf98.unmet_dependencies = [StarDep(name='buf97')]
buf98.met_dependencies = [StarDep(name='primals_37')]
buf98.node.kernel = aten.convolution


buf99: SchedulerNode(ComputedBuffer)
buf99.writes = 
    [   MemoryDep(name='buf99', index=c0, size=(128, 128)),
        MemoryDep(name='buf99', index=c0, size=(128,))]
buf99.unmet_dependencies = [MemoryDep(name='buf98', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf99.met_dependencies = []
buf99.group.device = cpu
buf99.group.iteration = ((128,), (8, 16))
buf99.sizes = ([128], [8, 16])
class buf99_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf99', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf100: SchedulerNode(ComputedBuffer)
buf100.writes = [MemoryDep(name='buf100', index=c0, size=(128,))]
buf100.unmet_dependencies = [MemoryDep(name='buf99', index=c0, size=(128,))]
buf100.met_dependencies = []
buf100.group.device = cpu
buf100.group.iteration = ((128,), ())
buf100.sizes = ([128], [])
class buf100_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf100', get_index_1, div, None)
        return store


buf101: SchedulerNode(ComputedBuffer)
buf101.writes = 
    [   MemoryDep(name='buf101', index=c0, size=(128, 128)),
        MemoryDep(name='buf101', index=c0, size=(128,))]
buf101.unmet_dependencies = 
    [   MemoryDep(name='buf100', index=c0, size=(128, 128)),
        MemoryDep(name='buf98', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf101.met_dependencies = []
buf101.group.device = cpu
buf101.group.iteration = ((128,), (8, 16))
buf101.sizes = ([128], [8, 16])
class buf101_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf100', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf101', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf102: SchedulerNode(ComputedBuffer)
buf102.writes = [MemoryDep(name='buf102', index=c0, size=(128,))]
buf102.unmet_dependencies = [MemoryDep(name='buf101', index=c0, size=(128,))]
buf102.met_dependencies = []
buf102.group.device = cpu
buf102.group.iteration = ((128,), ())
buf102.sizes = ([128], [])
class buf102_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf102', get_index_1, rsqrt, None)
        return store


buf103: SchedulerNode(ComputedBuffer)
buf103.writes = [MemoryDep(name='buf103', index=c0, size=(128,))]
buf103.unmet_dependencies = [MemoryDep(name='buf100', index=c0, size=(128,))]
buf103.met_dependencies = [MemoryDep(name='primals_198', index=c0, size=(128,))]
buf103.group.device = cpu
buf103.group.iteration = ((128,), ())
buf103.sizes = ([128], [])
class buf103_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_198', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf103', get_index_2, add, None)
        return store


buf104: SchedulerNode(ComputedBuffer)
buf104.writes = [MemoryDep(name='buf104', index=c0, size=(128,))]
buf104.unmet_dependencies = [MemoryDep(name='buf101', index=c0, size=(128,))]
buf104.met_dependencies = [MemoryDep(name='primals_199', index=c0, size=(128,))]
buf104.group.device = cpu
buf104.group.iteration = ((128,), ())
buf104.sizes = ([128], [])
class buf104_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0078740157480315, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_199', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf104', get_index_2, add, None)
        return store


buf105: SchedulerNode(ComputedBuffer)
buf105.writes = [MemoryDep(name='buf105', index=c0, size=(16384,))]
buf105.unmet_dependencies = 
    [   MemoryDep(name='buf100', index=c1, size=(8, 128, 16)),
        MemoryDep(name='buf101', index=c1, size=(8, 128, 16)),
        MemoryDep(name='buf98', index=c0, size=(16384,))]
buf105.met_dependencies = 
    [   MemoryDep(name='primals_38', index=c1, size=(8, 128, 16)),
        MemoryDep(name='primals_39', index=c1, size=(8, 128, 16))]
buf105.group.device = cpu
buf105.group.iteration = ((8, 128, 16), ())
buf105.sizes = ([8, 128, 16], [])
class buf105_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf100', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf101', get_index_2)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_38', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_39', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf105', get_index_5, relu, None)
        return store


buf106: ExternKernelSchedulerNode(Convolution)
buf106.writes = [StarDep(name='buf106')]
buf106.unmet_dependencies = [StarDep(name='buf105')]
buf106.met_dependencies = [StarDep(name='primals_40')]
buf106.node.kernel = aten.convolution


buf107: SchedulerNode(ComputedBuffer)
buf107.writes = 
    [   MemoryDep(name='buf107', index=c0, size=(512, 128)),
        MemoryDep(name='buf107', index=c0, size=(512,))]
buf107.unmet_dependencies = [MemoryDep(name='buf106', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16))]
buf107.met_dependencies = []
buf107.group.device = cpu
buf107.group.iteration = ((512,), (8, 16))
buf107.sizes = ([512], [8, 16])
class buf107_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf107', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf108: SchedulerNode(ComputedBuffer)
buf108.writes = [MemoryDep(name='buf108', index=c0, size=(512,))]
buf108.unmet_dependencies = [MemoryDep(name='buf107', index=c0, size=(512,))]
buf108.met_dependencies = []
buf108.group.device = cpu
buf108.group.iteration = ((512,), ())
buf108.sizes = ([512], [])
class buf108_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf108', get_index_1, div, None)
        return store


buf109: SchedulerNode(ComputedBuffer)
buf109.writes = 
    [   MemoryDep(name='buf109', index=c0, size=(512, 128)),
        MemoryDep(name='buf109', index=c0, size=(512,))]
buf109.unmet_dependencies = 
    [   MemoryDep(name='buf106', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16)),
        MemoryDep(name='buf108', index=c0, size=(512, 128))]
buf109.met_dependencies = []
buf109.group.device = cpu
buf109.group.iteration = ((512,), (8, 16))
buf109.sizes = ([512], [8, 16])
class buf109_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf108', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf109', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf110: SchedulerNode(ComputedBuffer)
buf110.writes = [MemoryDep(name='buf110', index=c0, size=(512,))]
buf110.unmet_dependencies = [MemoryDep(name='buf109', index=c0, size=(512,))]
buf110.met_dependencies = []
buf110.group.device = cpu
buf110.group.iteration = ((512,), ())
buf110.sizes = ([512], [])
class buf110_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf110', get_index_1, rsqrt, None)
        return store


buf111: SchedulerNode(ComputedBuffer)
buf111.writes = [MemoryDep(name='buf111', index=c0, size=(512,))]
buf111.unmet_dependencies = [MemoryDep(name='buf108', index=c0, size=(512,))]
buf111.met_dependencies = [MemoryDep(name='primals_201', index=c0, size=(512,))]
buf111.group.device = cpu
buf111.group.iteration = ((512,), ())
buf111.sizes = ([512], [])
class buf111_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_201', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf111', get_index_2, add, None)
        return store


buf112: SchedulerNode(ComputedBuffer)
buf112.writes = [MemoryDep(name='buf112', index=c0, size=(512,))]
buf112.unmet_dependencies = [MemoryDep(name='buf109', index=c0, size=(512,))]
buf112.met_dependencies = [MemoryDep(name='primals_202', index=c0, size=(512,))]
buf112.group.device = cpu
buf112.group.iteration = ((512,), ())
buf112.sizes = ([512], [])
class buf112_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0078740157480315, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_202', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf112', get_index_2, add, None)
        return store


buf113: ExternKernelSchedulerNode(Convolution)
buf113.writes = [StarDep(name='buf113')]
buf113.unmet_dependencies = [StarDep(name='buf89')]
buf113.met_dependencies = [StarDep(name='primals_43')]
buf113.node.kernel = aten.convolution


buf114: SchedulerNode(ComputedBuffer)
buf114.writes = 
    [   MemoryDep(name='buf114', index=c0, size=(512, 128)),
        MemoryDep(name='buf114', index=c0, size=(512,))]
buf114.unmet_dependencies = [MemoryDep(name='buf113', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16))]
buf114.met_dependencies = []
buf114.group.device = cpu
buf114.group.iteration = ((512,), (8, 16))
buf114.sizes = ([512], [8, 16])
class buf114_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf114', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf115: SchedulerNode(ComputedBuffer)
buf115.writes = [MemoryDep(name='buf115', index=c0, size=(512,))]
buf115.unmet_dependencies = [MemoryDep(name='buf114', index=c0, size=(512,))]
buf115.met_dependencies = []
buf115.group.device = cpu
buf115.group.iteration = ((512,), ())
buf115.sizes = ([512], [])
class buf115_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf115', get_index_1, div, None)
        return store


buf116: SchedulerNode(ComputedBuffer)
buf116.writes = 
    [   MemoryDep(name='buf116', index=c0, size=(512, 128)),
        MemoryDep(name='buf116', index=c0, size=(512,))]
buf116.unmet_dependencies = 
    [   MemoryDep(name='buf113', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16)),
        MemoryDep(name='buf115', index=c0, size=(512, 128))]
buf116.met_dependencies = []
buf116.group.device = cpu
buf116.group.iteration = ((512,), (8, 16))
buf116.sizes = ([512], [8, 16])
class buf116_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf115', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf116', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf117: SchedulerNode(ComputedBuffer)
buf117.writes = [MemoryDep(name='buf117', index=c0, size=(512,))]
buf117.unmet_dependencies = [MemoryDep(name='buf116', index=c0, size=(512,))]
buf117.met_dependencies = []
buf117.group.device = cpu
buf117.group.iteration = ((512,), ())
buf117.sizes = ([512], [])
class buf117_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf117', get_index_1, rsqrt, None)
        return store


buf118: SchedulerNode(ComputedBuffer)
buf118.writes = [MemoryDep(name='buf118', index=c0, size=(512,))]
buf118.unmet_dependencies = [MemoryDep(name='buf115', index=c0, size=(512,))]
buf118.met_dependencies = [MemoryDep(name='primals_204', index=c0, size=(512,))]
buf118.group.device = cpu
buf118.group.iteration = ((512,), ())
buf118.sizes = ([512], [])
class buf118_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_204', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf118', get_index_2, add, None)
        return store


buf119: SchedulerNode(ComputedBuffer)
buf119.writes = [MemoryDep(name='buf119', index=c0, size=(512,))]
buf119.unmet_dependencies = [MemoryDep(name='buf116', index=c0, size=(512,))]
buf119.met_dependencies = [MemoryDep(name='primals_205', index=c0, size=(512,))]
buf119.group.device = cpu
buf119.group.iteration = ((512,), ())
buf119.sizes = ([512], [])
class buf119_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0078740157480315, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_205', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf119', get_index_2, add, None)
        return store


buf120: SchedulerNode(ComputedBuffer)
buf120.writes = [MemoryDep(name='buf120', index=c0, size=(65536,))]
buf120.unmet_dependencies = 
    [   MemoryDep(name='buf106', index=c0, size=(65536,)),
        MemoryDep(name='buf108', index=c1, size=(8, 512, 16)),
        MemoryDep(name='buf109', index=c1, size=(8, 512, 16)),
        MemoryDep(name='buf113', index=c0, size=(65536,)),
        MemoryDep(name='buf115', index=c1, size=(8, 512, 16)),
        MemoryDep(name='buf116', index=c1, size=(8, 512, 16))]
buf120.met_dependencies = 
    [   MemoryDep(name='primals_41', index=c1, size=(8, 512, 16)),
        MemoryDep(name='primals_42', index=c1, size=(8, 512, 16)),
        MemoryDep(name='primals_44', index=c1, size=(8, 512, 16)),
        MemoryDep(name='primals_45', index=c1, size=(8, 512, 16))]
buf120.group.device = cpu
buf120.group.iteration = ((8, 512, 16), ())
buf120.sizes = ([8, 512, 16], [])
class buf120_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 16}
    index0 = 8192*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf108', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf109', get_index_2)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_41', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_42', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf113', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf115', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf116', get_index_7)
        constant_2 = ops.constant(128, torch.float32)
        div_1 = ops.div(load_7, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_44', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_45', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf120', get_index_10, add_4, None)
        return store


buf121: SchedulerNode(ComputedBuffer)
buf121.writes = [MemoryDep(name='buf121', index=c0, size=(65536,))]
buf121.unmet_dependencies = [MemoryDep(name='buf120', index=c0, size=(65536,))]
buf121.met_dependencies = []
buf121.group.device = cpu
buf121.group.iteration = ((65536,), ())
buf121.sizes = ([65536], [])
class buf121_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf121', get_index_1, relu, None)
        return store


buf122: ExternKernelSchedulerNode(Convolution)
buf122.writes = [StarDep(name='buf122')]
buf122.unmet_dependencies = [StarDep(name='buf121')]
buf122.met_dependencies = [StarDep(name='primals_46')]
buf122.node.kernel = aten.convolution


buf123: SchedulerNode(ComputedBuffer)
buf123.writes = 
    [   MemoryDep(name='buf123', index=c0, size=(128, 128)),
        MemoryDep(name='buf123', index=c0, size=(128,))]
buf123.unmet_dependencies = [MemoryDep(name='buf122', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf123.met_dependencies = []
buf123.group.device = cpu
buf123.group.iteration = ((128,), (8, 16))
buf123.sizes = ([128], [8, 16])
class buf123_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf123', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf124: SchedulerNode(ComputedBuffer)
buf124.writes = [MemoryDep(name='buf124', index=c0, size=(128,))]
buf124.unmet_dependencies = [MemoryDep(name='buf123', index=c0, size=(128,))]
buf124.met_dependencies = []
buf124.group.device = cpu
buf124.group.iteration = ((128,), ())
buf124.sizes = ([128], [])
class buf124_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf124', get_index_1, div, None)
        return store


buf125: SchedulerNode(ComputedBuffer)
buf125.writes = 
    [   MemoryDep(name='buf125', index=c0, size=(128, 128)),
        MemoryDep(name='buf125', index=c0, size=(128,))]
buf125.unmet_dependencies = 
    [   MemoryDep(name='buf122', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='buf124', index=c0, size=(128, 128))]
buf125.met_dependencies = []
buf125.group.device = cpu
buf125.group.iteration = ((128,), (8, 16))
buf125.sizes = ([128], [8, 16])
class buf125_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf124', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf125', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf126: SchedulerNode(ComputedBuffer)
buf126.writes = [MemoryDep(name='buf126', index=c0, size=(128,))]
buf126.unmet_dependencies = [MemoryDep(name='buf125', index=c0, size=(128,))]
buf126.met_dependencies = []
buf126.group.device = cpu
buf126.group.iteration = ((128,), ())
buf126.sizes = ([128], [])
class buf126_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf126', get_index_1, rsqrt, None)
        return store


buf127: SchedulerNode(ComputedBuffer)
buf127.writes = [MemoryDep(name='buf127', index=c0, size=(128,))]
buf127.unmet_dependencies = [MemoryDep(name='buf124', index=c0, size=(128,))]
buf127.met_dependencies = [MemoryDep(name='primals_207', index=c0, size=(128,))]
buf127.group.device = cpu
buf127.group.iteration = ((128,), ())
buf127.sizes = ([128], [])
class buf127_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_207', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf127', get_index_2, add, None)
        return store


buf128: SchedulerNode(ComputedBuffer)
buf128.writes = [MemoryDep(name='buf128', index=c0, size=(128,))]
buf128.unmet_dependencies = [MemoryDep(name='buf125', index=c0, size=(128,))]
buf128.met_dependencies = [MemoryDep(name='primals_208', index=c0, size=(128,))]
buf128.group.device = cpu
buf128.group.iteration = ((128,), ())
buf128.sizes = ([128], [])
class buf128_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0078740157480315, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_208', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf128', get_index_2, add, None)
        return store


buf129: SchedulerNode(ComputedBuffer)
buf129.writes = [MemoryDep(name='buf129', index=c0, size=(16384,))]
buf129.unmet_dependencies = 
    [   MemoryDep(name='buf122', index=c0, size=(16384,)),
        MemoryDep(name='buf124', index=c1, size=(8, 128, 16)),
        MemoryDep(name='buf125', index=c1, size=(8, 128, 16))]
buf129.met_dependencies = 
    [   MemoryDep(name='primals_47', index=c1, size=(8, 128, 16)),
        MemoryDep(name='primals_48', index=c1, size=(8, 128, 16))]
buf129.group.device = cpu
buf129.group.iteration = ((8, 128, 16), ())
buf129.sizes = ([8, 128, 16], [])
class buf129_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf124', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf125', get_index_2)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_47', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_48', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf129', get_index_5, relu, None)
        return store


buf130: ExternKernelSchedulerNode(Convolution)
buf130.writes = [StarDep(name='buf130')]
buf130.unmet_dependencies = [StarDep(name='buf129')]
buf130.met_dependencies = [StarDep(name='primals_49')]
buf130.node.kernel = aten.convolution


buf131: SchedulerNode(ComputedBuffer)
buf131.writes = 
    [   MemoryDep(name='buf131', index=c0, size=(128, 128)),
        MemoryDep(name='buf131', index=c0, size=(128,))]
buf131.unmet_dependencies = [MemoryDep(name='buf130', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf131.met_dependencies = []
buf131.group.device = cpu
buf131.group.iteration = ((128,), (8, 16))
buf131.sizes = ([128], [8, 16])
class buf131_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf131', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf132: SchedulerNode(ComputedBuffer)
buf132.writes = [MemoryDep(name='buf132', index=c0, size=(128,))]
buf132.unmet_dependencies = [MemoryDep(name='buf131', index=c0, size=(128,))]
buf132.met_dependencies = []
buf132.group.device = cpu
buf132.group.iteration = ((128,), ())
buf132.sizes = ([128], [])
class buf132_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf132', get_index_1, div, None)
        return store


buf133: SchedulerNode(ComputedBuffer)
buf133.writes = 
    [   MemoryDep(name='buf133', index=c0, size=(128, 128)),
        MemoryDep(name='buf133', index=c0, size=(128,))]
buf133.unmet_dependencies = 
    [   MemoryDep(name='buf130', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='buf132', index=c0, size=(128, 128))]
buf133.met_dependencies = []
buf133.group.device = cpu
buf133.group.iteration = ((128,), (8, 16))
buf133.sizes = ([128], [8, 16])
class buf133_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf132', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf133', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf134: SchedulerNode(ComputedBuffer)
buf134.writes = [MemoryDep(name='buf134', index=c0, size=(128,))]
buf134.unmet_dependencies = [MemoryDep(name='buf133', index=c0, size=(128,))]
buf134.met_dependencies = []
buf134.group.device = cpu
buf134.group.iteration = ((128,), ())
buf134.sizes = ([128], [])
class buf134_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf134', get_index_1, rsqrt, None)
        return store


buf135: SchedulerNode(ComputedBuffer)
buf135.writes = [MemoryDep(name='buf135', index=c0, size=(128,))]
buf135.unmet_dependencies = [MemoryDep(name='buf132', index=c0, size=(128,))]
buf135.met_dependencies = [MemoryDep(name='primals_210', index=c0, size=(128,))]
buf135.group.device = cpu
buf135.group.iteration = ((128,), ())
buf135.sizes = ([128], [])
class buf135_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_210', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf135', get_index_2, add, None)
        return store


buf136: SchedulerNode(ComputedBuffer)
buf136.writes = [MemoryDep(name='buf136', index=c0, size=(128,))]
buf136.unmet_dependencies = [MemoryDep(name='buf133', index=c0, size=(128,))]
buf136.met_dependencies = [MemoryDep(name='primals_211', index=c0, size=(128,))]
buf136.group.device = cpu
buf136.group.iteration = ((128,), ())
buf136.sizes = ([128], [])
class buf136_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0078740157480315, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_211', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf136', get_index_2, add, None)
        return store


buf137: SchedulerNode(ComputedBuffer)
buf137.writes = [MemoryDep(name='buf137', index=c0, size=(16384,))]
buf137.unmet_dependencies = 
    [   MemoryDep(name='buf130', index=c0, size=(16384,)),
        MemoryDep(name='buf132', index=c1, size=(8, 128, 16)),
        MemoryDep(name='buf133', index=c1, size=(8, 128, 16))]
buf137.met_dependencies = 
    [   MemoryDep(name='primals_50', index=c1, size=(8, 128, 16)),
        MemoryDep(name='primals_51', index=c1, size=(8, 128, 16))]
buf137.group.device = cpu
buf137.group.iteration = ((8, 128, 16), ())
buf137.sizes = ([8, 128, 16], [])
class buf137_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf132', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf133', get_index_2)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_50', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_51', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf137', get_index_5, relu, None)
        return store


buf138: ExternKernelSchedulerNode(Convolution)
buf138.writes = [StarDep(name='buf138')]
buf138.unmet_dependencies = [StarDep(name='buf137')]
buf138.met_dependencies = [StarDep(name='primals_52')]
buf138.node.kernel = aten.convolution


buf139: SchedulerNode(ComputedBuffer)
buf139.writes = 
    [   MemoryDep(name='buf139', index=c0, size=(512, 128)),
        MemoryDep(name='buf139', index=c0, size=(512,))]
buf139.unmet_dependencies = [MemoryDep(name='buf138', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16))]
buf139.met_dependencies = []
buf139.group.device = cpu
buf139.group.iteration = ((512,), (8, 16))
buf139.sizes = ([512], [8, 16])
class buf139_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf139', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf140: SchedulerNode(ComputedBuffer)
buf140.writes = [MemoryDep(name='buf140', index=c0, size=(512,))]
buf140.unmet_dependencies = [MemoryDep(name='buf139', index=c0, size=(512,))]
buf140.met_dependencies = []
buf140.group.device = cpu
buf140.group.iteration = ((512,), ())
buf140.sizes = ([512], [])
class buf140_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf140', get_index_1, div, None)
        return store


buf141: SchedulerNode(ComputedBuffer)
buf141.writes = 
    [   MemoryDep(name='buf141', index=c0, size=(512, 128)),
        MemoryDep(name='buf141', index=c0, size=(512,))]
buf141.unmet_dependencies = 
    [   MemoryDep(name='buf138', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16)),
        MemoryDep(name='buf140', index=c0, size=(512, 128))]
buf141.met_dependencies = []
buf141.group.device = cpu
buf141.group.iteration = ((512,), (8, 16))
buf141.sizes = ([512], [8, 16])
class buf141_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf140', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf141', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf142: SchedulerNode(ComputedBuffer)
buf142.writes = [MemoryDep(name='buf142', index=c0, size=(512,))]
buf142.unmet_dependencies = [MemoryDep(name='buf141', index=c0, size=(512,))]
buf142.met_dependencies = []
buf142.group.device = cpu
buf142.group.iteration = ((512,), ())
buf142.sizes = ([512], [])
class buf142_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf142', get_index_1, rsqrt, None)
        return store


buf143: SchedulerNode(ComputedBuffer)
buf143.writes = [MemoryDep(name='buf143', index=c0, size=(512,))]
buf143.unmet_dependencies = [MemoryDep(name='buf140', index=c0, size=(512,))]
buf143.met_dependencies = [MemoryDep(name='primals_213', index=c0, size=(512,))]
buf143.group.device = cpu
buf143.group.iteration = ((512,), ())
buf143.sizes = ([512], [])
class buf143_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_213', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf143', get_index_2, add, None)
        return store


buf144: SchedulerNode(ComputedBuffer)
buf144.writes = [MemoryDep(name='buf144', index=c0, size=(512,))]
buf144.unmet_dependencies = [MemoryDep(name='buf141', index=c0, size=(512,))]
buf144.met_dependencies = [MemoryDep(name='primals_214', index=c0, size=(512,))]
buf144.group.device = cpu
buf144.group.iteration = ((512,), ())
buf144.sizes = ([512], [])
class buf144_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0078740157480315, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_214', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf144', get_index_2, add, None)
        return store


buf145: SchedulerNode(ComputedBuffer)
buf145.writes = [MemoryDep(name='buf145', index=c0, size=(65536,))]
buf145.unmet_dependencies = 
    [   MemoryDep(name='buf121', index=c0, size=(65536,)),
        MemoryDep(name='buf138', index=c0, size=(65536,)),
        MemoryDep(name='buf140', index=c1, size=(8, 512, 16)),
        MemoryDep(name='buf141', index=c1, size=(8, 512, 16))]
buf145.met_dependencies = 
    [   MemoryDep(name='primals_53', index=c1, size=(8, 512, 16)),
        MemoryDep(name='primals_54', index=c1, size=(8, 512, 16))]
buf145.group.device = cpu
buf145.group.iteration = ((8, 512, 16), ())
buf145.sizes = ([8, 512, 16], [])
class buf145_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 16}
    index0 = 8192*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf140', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf141', get_index_2)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_53', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_54', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf121', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf145', get_index_6, relu, None)
        return store


buf146: ExternKernelSchedulerNode(Convolution)
buf146.writes = [StarDep(name='buf146')]
buf146.unmet_dependencies = [StarDep(name='buf145')]
buf146.met_dependencies = [StarDep(name='primals_55')]
buf146.node.kernel = aten.convolution


buf147: SchedulerNode(ComputedBuffer)
buf147.writes = 
    [   MemoryDep(name='buf147', index=c0, size=(128, 128)),
        MemoryDep(name='buf147', index=c0, size=(128,))]
buf147.unmet_dependencies = [MemoryDep(name='buf146', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf147.met_dependencies = []
buf147.group.device = cpu
buf147.group.iteration = ((128,), (8, 16))
buf147.sizes = ([128], [8, 16])
class buf147_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf147', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf148: SchedulerNode(ComputedBuffer)
buf148.writes = [MemoryDep(name='buf148', index=c0, size=(128,))]
buf148.unmet_dependencies = [MemoryDep(name='buf147', index=c0, size=(128,))]
buf148.met_dependencies = []
buf148.group.device = cpu
buf148.group.iteration = ((128,), ())
buf148.sizes = ([128], [])
class buf148_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf148', get_index_1, div, None)
        return store


buf149: SchedulerNode(ComputedBuffer)
buf149.writes = 
    [   MemoryDep(name='buf149', index=c0, size=(128, 128)),
        MemoryDep(name='buf149', index=c0, size=(128,))]
buf149.unmet_dependencies = 
    [   MemoryDep(name='buf146', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='buf148', index=c0, size=(128, 128))]
buf149.met_dependencies = []
buf149.group.device = cpu
buf149.group.iteration = ((128,), (8, 16))
buf149.sizes = ([128], [8, 16])
class buf149_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf148', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf149', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf150: SchedulerNode(ComputedBuffer)
buf150.writes = [MemoryDep(name='buf150', index=c0, size=(128,))]
buf150.unmet_dependencies = [MemoryDep(name='buf149', index=c0, size=(128,))]
buf150.met_dependencies = []
buf150.group.device = cpu
buf150.group.iteration = ((128,), ())
buf150.sizes = ([128], [])
class buf150_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf150', get_index_1, rsqrt, None)
        return store


buf151: SchedulerNode(ComputedBuffer)
buf151.writes = [MemoryDep(name='buf151', index=c0, size=(128,))]
buf151.unmet_dependencies = [MemoryDep(name='buf148', index=c0, size=(128,))]
buf151.met_dependencies = [MemoryDep(name='primals_216', index=c0, size=(128,))]
buf151.group.device = cpu
buf151.group.iteration = ((128,), ())
buf151.sizes = ([128], [])
class buf151_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_216', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf151', get_index_2, add, None)
        return store


buf152: SchedulerNode(ComputedBuffer)
buf152.writes = [MemoryDep(name='buf152', index=c0, size=(128,))]
buf152.unmet_dependencies = [MemoryDep(name='buf149', index=c0, size=(128,))]
buf152.met_dependencies = [MemoryDep(name='primals_217', index=c0, size=(128,))]
buf152.group.device = cpu
buf152.group.iteration = ((128,), ())
buf152.sizes = ([128], [])
class buf152_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0078740157480315, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_217', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf152', get_index_2, add, None)
        return store


buf153: SchedulerNode(ComputedBuffer)
buf153.writes = [MemoryDep(name='buf153', index=c0, size=(16384,))]
buf153.unmet_dependencies = 
    [   MemoryDep(name='buf146', index=c0, size=(16384,)),
        MemoryDep(name='buf148', index=c1, size=(8, 128, 16)),
        MemoryDep(name='buf149', index=c1, size=(8, 128, 16))]
buf153.met_dependencies = 
    [   MemoryDep(name='primals_56', index=c1, size=(8, 128, 16)),
        MemoryDep(name='primals_57', index=c1, size=(8, 128, 16))]
buf153.group.device = cpu
buf153.group.iteration = ((8, 128, 16), ())
buf153.sizes = ([8, 128, 16], [])
class buf153_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf148', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf149', get_index_2)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_56', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_57', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf153', get_index_5, relu, None)
        return store


buf154: ExternKernelSchedulerNode(Convolution)
buf154.writes = [StarDep(name='buf154')]
buf154.unmet_dependencies = [StarDep(name='buf153')]
buf154.met_dependencies = [StarDep(name='primals_58')]
buf154.node.kernel = aten.convolution


buf155: SchedulerNode(ComputedBuffer)
buf155.writes = 
    [   MemoryDep(name='buf155', index=c0, size=(128, 128)),
        MemoryDep(name='buf155', index=c0, size=(128,))]
buf155.unmet_dependencies = [MemoryDep(name='buf154', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf155.met_dependencies = []
buf155.group.device = cpu
buf155.group.iteration = ((128,), (8, 16))
buf155.sizes = ([128], [8, 16])
class buf155_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf155', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf156: SchedulerNode(ComputedBuffer)
buf156.writes = [MemoryDep(name='buf156', index=c0, size=(128,))]
buf156.unmet_dependencies = [MemoryDep(name='buf155', index=c0, size=(128,))]
buf156.met_dependencies = []
buf156.group.device = cpu
buf156.group.iteration = ((128,), ())
buf156.sizes = ([128], [])
class buf156_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf156', get_index_1, div, None)
        return store


buf157: SchedulerNode(ComputedBuffer)
buf157.writes = 
    [   MemoryDep(name='buf157', index=c0, size=(128, 128)),
        MemoryDep(name='buf157', index=c0, size=(128,))]
buf157.unmet_dependencies = 
    [   MemoryDep(name='buf154', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='buf156', index=c0, size=(128, 128))]
buf157.met_dependencies = []
buf157.group.device = cpu
buf157.group.iteration = ((128,), (8, 16))
buf157.sizes = ([128], [8, 16])
class buf157_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf156', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf157', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf158: SchedulerNode(ComputedBuffer)
buf158.writes = [MemoryDep(name='buf158', index=c0, size=(128,))]
buf158.unmet_dependencies = [MemoryDep(name='buf157', index=c0, size=(128,))]
buf158.met_dependencies = []
buf158.group.device = cpu
buf158.group.iteration = ((128,), ())
buf158.sizes = ([128], [])
class buf158_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf158', get_index_1, rsqrt, None)
        return store


buf159: SchedulerNode(ComputedBuffer)
buf159.writes = [MemoryDep(name='buf159', index=c0, size=(128,))]
buf159.unmet_dependencies = [MemoryDep(name='buf156', index=c0, size=(128,))]
buf159.met_dependencies = [MemoryDep(name='primals_219', index=c0, size=(128,))]
buf159.group.device = cpu
buf159.group.iteration = ((128,), ())
buf159.sizes = ([128], [])
class buf159_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_219', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf159', get_index_2, add, None)
        return store


buf160: SchedulerNode(ComputedBuffer)
buf160.writes = [MemoryDep(name='buf160', index=c0, size=(128,))]
buf160.unmet_dependencies = [MemoryDep(name='buf157', index=c0, size=(128,))]
buf160.met_dependencies = [MemoryDep(name='primals_220', index=c0, size=(128,))]
buf160.group.device = cpu
buf160.group.iteration = ((128,), ())
buf160.sizes = ([128], [])
class buf160_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0078740157480315, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_220', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf160', get_index_2, add, None)
        return store


buf161: SchedulerNode(ComputedBuffer)
buf161.writes = [MemoryDep(name='buf161', index=c0, size=(16384,))]
buf161.unmet_dependencies = 
    [   MemoryDep(name='buf154', index=c0, size=(16384,)),
        MemoryDep(name='buf156', index=c1, size=(8, 128, 16)),
        MemoryDep(name='buf157', index=c1, size=(8, 128, 16))]
buf161.met_dependencies = 
    [   MemoryDep(name='primals_59', index=c1, size=(8, 128, 16)),
        MemoryDep(name='primals_60', index=c1, size=(8, 128, 16))]
buf161.group.device = cpu
buf161.group.iteration = ((8, 128, 16), ())
buf161.sizes = ([8, 128, 16], [])
class buf161_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf156', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf157', get_index_2)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_59', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_60', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf161', get_index_5, relu, None)
        return store


buf162: ExternKernelSchedulerNode(Convolution)
buf162.writes = [StarDep(name='buf162')]
buf162.unmet_dependencies = [StarDep(name='buf161')]
buf162.met_dependencies = [StarDep(name='primals_61')]
buf162.node.kernel = aten.convolution


buf163: SchedulerNode(ComputedBuffer)
buf163.writes = 
    [   MemoryDep(name='buf163', index=c0, size=(512, 128)),
        MemoryDep(name='buf163', index=c0, size=(512,))]
buf163.unmet_dependencies = [MemoryDep(name='buf162', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16))]
buf163.met_dependencies = []
buf163.group.device = cpu
buf163.group.iteration = ((512,), (8, 16))
buf163.sizes = ([512], [8, 16])
class buf163_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf163', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf164: SchedulerNode(ComputedBuffer)
buf164.writes = [MemoryDep(name='buf164', index=c0, size=(512,))]
buf164.unmet_dependencies = [MemoryDep(name='buf163', index=c0, size=(512,))]
buf164.met_dependencies = []
buf164.group.device = cpu
buf164.group.iteration = ((512,), ())
buf164.sizes = ([512], [])
class buf164_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf164', get_index_1, div, None)
        return store


buf165: SchedulerNode(ComputedBuffer)
buf165.writes = 
    [   MemoryDep(name='buf165', index=c0, size=(512, 128)),
        MemoryDep(name='buf165', index=c0, size=(512,))]
buf165.unmet_dependencies = 
    [   MemoryDep(name='buf162', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16)),
        MemoryDep(name='buf164', index=c0, size=(512, 128))]
buf165.met_dependencies = []
buf165.group.device = cpu
buf165.group.iteration = ((512,), (8, 16))
buf165.sizes = ([512], [8, 16])
class buf165_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf164', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf165', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf166: SchedulerNode(ComputedBuffer)
buf166.writes = [MemoryDep(name='buf166', index=c0, size=(512,))]
buf166.unmet_dependencies = [MemoryDep(name='buf165', index=c0, size=(512,))]
buf166.met_dependencies = []
buf166.group.device = cpu
buf166.group.iteration = ((512,), ())
buf166.sizes = ([512], [])
class buf166_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf166', get_index_1, rsqrt, None)
        return store


buf167: SchedulerNode(ComputedBuffer)
buf167.writes = [MemoryDep(name='buf167', index=c0, size=(512,))]
buf167.unmet_dependencies = [MemoryDep(name='buf164', index=c0, size=(512,))]
buf167.met_dependencies = [MemoryDep(name='primals_222', index=c0, size=(512,))]
buf167.group.device = cpu
buf167.group.iteration = ((512,), ())
buf167.sizes = ([512], [])
class buf167_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_222', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf167', get_index_2, add, None)
        return store


buf168: SchedulerNode(ComputedBuffer)
buf168.writes = [MemoryDep(name='buf168', index=c0, size=(512,))]
buf168.unmet_dependencies = [MemoryDep(name='buf165', index=c0, size=(512,))]
buf168.met_dependencies = [MemoryDep(name='primals_223', index=c0, size=(512,))]
buf168.group.device = cpu
buf168.group.iteration = ((512,), ())
buf168.sizes = ([512], [])
class buf168_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0078740157480315, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_223', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf168', get_index_2, add, None)
        return store


buf169: SchedulerNode(ComputedBuffer)
buf169.writes = [MemoryDep(name='buf169', index=c0, size=(65536,))]
buf169.unmet_dependencies = 
    [   MemoryDep(name='buf145', index=c0, size=(65536,)),
        MemoryDep(name='buf162', index=c0, size=(65536,)),
        MemoryDep(name='buf164', index=c1, size=(8, 512, 16)),
        MemoryDep(name='buf165', index=c1, size=(8, 512, 16))]
buf169.met_dependencies = 
    [   MemoryDep(name='primals_62', index=c1, size=(8, 512, 16)),
        MemoryDep(name='primals_63', index=c1, size=(8, 512, 16))]
buf169.group.device = cpu
buf169.group.iteration = ((8, 512, 16), ())
buf169.sizes = ([8, 512, 16], [])
class buf169_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 16}
    index0 = 8192*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf164', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf165', get_index_2)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_62', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_63', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf145', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf169', get_index_6, relu, None)
        return store


buf170: ExternKernelSchedulerNode(Convolution)
buf170.writes = [StarDep(name='buf170')]
buf170.unmet_dependencies = [StarDep(name='buf169')]
buf170.met_dependencies = [StarDep(name='primals_64')]
buf170.node.kernel = aten.convolution


buf171: SchedulerNode(ComputedBuffer)
buf171.writes = 
    [   MemoryDep(name='buf171', index=c0, size=(128, 128)),
        MemoryDep(name='buf171', index=c0, size=(128,))]
buf171.unmet_dependencies = [MemoryDep(name='buf170', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf171.met_dependencies = []
buf171.group.device = cpu
buf171.group.iteration = ((128,), (8, 16))
buf171.sizes = ([128], [8, 16])
class buf171_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf171', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf172: SchedulerNode(ComputedBuffer)
buf172.writes = [MemoryDep(name='buf172', index=c0, size=(128,))]
buf172.unmet_dependencies = [MemoryDep(name='buf171', index=c0, size=(128,))]
buf172.met_dependencies = []
buf172.group.device = cpu
buf172.group.iteration = ((128,), ())
buf172.sizes = ([128], [])
class buf172_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf172', get_index_1, div, None)
        return store


buf173: SchedulerNode(ComputedBuffer)
buf173.writes = 
    [   MemoryDep(name='buf173', index=c0, size=(128, 128)),
        MemoryDep(name='buf173', index=c0, size=(128,))]
buf173.unmet_dependencies = 
    [   MemoryDep(name='buf170', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='buf172', index=c0, size=(128, 128))]
buf173.met_dependencies = []
buf173.group.device = cpu
buf173.group.iteration = ((128,), (8, 16))
buf173.sizes = ([128], [8, 16])
class buf173_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf172', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf173', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf174: SchedulerNode(ComputedBuffer)
buf174.writes = [MemoryDep(name='buf174', index=c0, size=(128,))]
buf174.unmet_dependencies = [MemoryDep(name='buf173', index=c0, size=(128,))]
buf174.met_dependencies = []
buf174.group.device = cpu
buf174.group.iteration = ((128,), ())
buf174.sizes = ([128], [])
class buf174_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf174', get_index_1, rsqrt, None)
        return store


buf175: SchedulerNode(ComputedBuffer)
buf175.writes = [MemoryDep(name='buf175', index=c0, size=(128,))]
buf175.unmet_dependencies = [MemoryDep(name='buf172', index=c0, size=(128,))]
buf175.met_dependencies = [MemoryDep(name='primals_225', index=c0, size=(128,))]
buf175.group.device = cpu
buf175.group.iteration = ((128,), ())
buf175.sizes = ([128], [])
class buf175_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_225', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf175', get_index_2, add, None)
        return store


buf176: SchedulerNode(ComputedBuffer)
buf176.writes = [MemoryDep(name='buf176', index=c0, size=(128,))]
buf176.unmet_dependencies = [MemoryDep(name='buf173', index=c0, size=(128,))]
buf176.met_dependencies = [MemoryDep(name='primals_226', index=c0, size=(128,))]
buf176.group.device = cpu
buf176.group.iteration = ((128,), ())
buf176.sizes = ([128], [])
class buf176_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0078740157480315, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_226', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf176', get_index_2, add, None)
        return store


buf177: SchedulerNode(ComputedBuffer)
buf177.writes = [MemoryDep(name='buf177', index=c0, size=(16384,))]
buf177.unmet_dependencies = 
    [   MemoryDep(name='buf170', index=c0, size=(16384,)),
        MemoryDep(name='buf172', index=c1, size=(8, 128, 16)),
        MemoryDep(name='buf173', index=c1, size=(8, 128, 16))]
buf177.met_dependencies = 
    [   MemoryDep(name='primals_65', index=c1, size=(8, 128, 16)),
        MemoryDep(name='primals_66', index=c1, size=(8, 128, 16))]
buf177.group.device = cpu
buf177.group.iteration = ((8, 128, 16), ())
buf177.sizes = ([8, 128, 16], [])
class buf177_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf172', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf173', get_index_2)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_65', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_66', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf177', get_index_5, relu, None)
        return store


buf178: ExternKernelSchedulerNode(Convolution)
buf178.writes = [StarDep(name='buf178')]
buf178.unmet_dependencies = [StarDep(name='buf177')]
buf178.met_dependencies = [StarDep(name='primals_67')]
buf178.node.kernel = aten.convolution


buf179: SchedulerNode(ComputedBuffer)
buf179.writes = 
    [   MemoryDep(name='buf179', index=c0, size=(128, 128)),
        MemoryDep(name='buf179', index=c0, size=(128,))]
buf179.unmet_dependencies = [MemoryDep(name='buf178', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16))]
buf179.met_dependencies = []
buf179.group.device = cpu
buf179.group.iteration = ((128,), (8, 16))
buf179.sizes = ([128], [8, 16])
class buf179_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf179', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf180: SchedulerNode(ComputedBuffer)
buf180.writes = [MemoryDep(name='buf180', index=c0, size=(128,))]
buf180.unmet_dependencies = [MemoryDep(name='buf179', index=c0, size=(128,))]
buf180.met_dependencies = []
buf180.group.device = cpu
buf180.group.iteration = ((128,), ())
buf180.sizes = ([128], [])
class buf180_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf180', get_index_1, div, None)
        return store


buf181: SchedulerNode(ComputedBuffer)
buf181.writes = 
    [   MemoryDep(name='buf181', index=c0, size=(128, 128)),
        MemoryDep(name='buf181', index=c0, size=(128,))]
buf181.unmet_dependencies = 
    [   MemoryDep(name='buf178', index=16*c0 + 2048*c1 + c2, size=(128, 8, 16)),
        MemoryDep(name='buf180', index=c0, size=(128, 128))]
buf181.met_dependencies = []
buf181.group.device = cpu
buf181.group.iteration = ((128,), (8, 16))
buf181.sizes = ([128], [8, 16])
class buf181_loop_body:
    var_ranges = {z0: 128, z1: 8, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf180', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf181', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf182: SchedulerNode(ComputedBuffer)
buf182.writes = [MemoryDep(name='buf182', index=c0, size=(128,))]
buf182.unmet_dependencies = [MemoryDep(name='buf181', index=c0, size=(128,))]
buf182.met_dependencies = []
buf182.group.device = cpu
buf182.group.iteration = ((128,), ())
buf182.sizes = ([128], [])
class buf182_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf182', get_index_1, rsqrt, None)
        return store


buf183: SchedulerNode(ComputedBuffer)
buf183.writes = [MemoryDep(name='buf183', index=c0, size=(128,))]
buf183.unmet_dependencies = [MemoryDep(name='buf180', index=c0, size=(128,))]
buf183.met_dependencies = [MemoryDep(name='primals_228', index=c0, size=(128,))]
buf183.group.device = cpu
buf183.group.iteration = ((128,), ())
buf183.sizes = ([128], [])
class buf183_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_228', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf183', get_index_2, add, None)
        return store


buf184: SchedulerNode(ComputedBuffer)
buf184.writes = [MemoryDep(name='buf184', index=c0, size=(128,))]
buf184.unmet_dependencies = [MemoryDep(name='buf181', index=c0, size=(128,))]
buf184.met_dependencies = [MemoryDep(name='primals_229', index=c0, size=(128,))]
buf184.group.device = cpu
buf184.group.iteration = ((128,), ())
buf184.sizes = ([128], [])
class buf184_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0078740157480315, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_229', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf184', get_index_2, add, None)
        return store


buf185: SchedulerNode(ComputedBuffer)
buf185.writes = [MemoryDep(name='buf185', index=c0, size=(16384,))]
buf185.unmet_dependencies = 
    [   MemoryDep(name='buf178', index=c0, size=(16384,)),
        MemoryDep(name='buf180', index=c1, size=(8, 128, 16)),
        MemoryDep(name='buf181', index=c1, size=(8, 128, 16))]
buf185.met_dependencies = 
    [   MemoryDep(name='primals_68', index=c1, size=(8, 128, 16)),
        MemoryDep(name='primals_69', index=c1, size=(8, 128, 16))]
buf185.group.device = cpu
buf185.group.iteration = ((8, 128, 16), ())
buf185.sizes = ([8, 128, 16], [])
class buf185_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf180', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf181', get_index_2)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_68', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_69', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf185', get_index_5, relu, None)
        return store


buf186: ExternKernelSchedulerNode(Convolution)
buf186.writes = [StarDep(name='buf186')]
buf186.unmet_dependencies = [StarDep(name='buf185')]
buf186.met_dependencies = [StarDep(name='primals_70')]
buf186.node.kernel = aten.convolution


buf187: SchedulerNode(ComputedBuffer)
buf187.writes = 
    [   MemoryDep(name='buf187', index=c0, size=(512, 128)),
        MemoryDep(name='buf187', index=c0, size=(512,))]
buf187.unmet_dependencies = [MemoryDep(name='buf186', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16))]
buf187.met_dependencies = []
buf187.group.device = cpu
buf187.group.iteration = ((512,), (8, 16))
buf187.sizes = ([512], [8, 16])
class buf187_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf187', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf188: SchedulerNode(ComputedBuffer)
buf188.writes = [MemoryDep(name='buf188', index=c0, size=(512,))]
buf188.unmet_dependencies = [MemoryDep(name='buf187', index=c0, size=(512,))]
buf188.met_dependencies = []
buf188.group.device = cpu
buf188.group.iteration = ((512,), ())
buf188.sizes = ([512], [])
class buf188_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf188', get_index_1, div, None)
        return store


buf189: SchedulerNode(ComputedBuffer)
buf189.writes = 
    [   MemoryDep(name='buf189', index=c0, size=(512, 128)),
        MemoryDep(name='buf189', index=c0, size=(512,))]
buf189.unmet_dependencies = 
    [   MemoryDep(name='buf186', index=16*c0 + 8192*c1 + c2, size=(512, 8, 16)),
        MemoryDep(name='buf188', index=c0, size=(512, 128))]
buf189.met_dependencies = []
buf189.group.device = cpu
buf189.group.iteration = ((512,), (8, 16))
buf189.sizes = ([512], [8, 16])
class buf189_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf188', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf189', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf190: SchedulerNode(ComputedBuffer)
buf190.writes = [MemoryDep(name='buf190', index=c0, size=(512,))]
buf190.unmet_dependencies = [MemoryDep(name='buf189', index=c0, size=(512,))]
buf190.met_dependencies = []
buf190.group.device = cpu
buf190.group.iteration = ((512,), ())
buf190.sizes = ([512], [])
class buf190_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf190', get_index_1, rsqrt, None)
        return store


buf191: SchedulerNode(ComputedBuffer)
buf191.writes = [MemoryDep(name='buf191', index=c0, size=(512,))]
buf191.unmet_dependencies = [MemoryDep(name='buf188', index=c0, size=(512,))]
buf191.met_dependencies = [MemoryDep(name='primals_231', index=c0, size=(512,))]
buf191.group.device = cpu
buf191.group.iteration = ((512,), ())
buf191.sizes = ([512], [])
class buf191_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_231', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf191', get_index_2, add, None)
        return store


buf192: SchedulerNode(ComputedBuffer)
buf192.writes = [MemoryDep(name='buf192', index=c0, size=(512,))]
buf192.unmet_dependencies = [MemoryDep(name='buf189', index=c0, size=(512,))]
buf192.met_dependencies = [MemoryDep(name='primals_232', index=c0, size=(512,))]
buf192.group.device = cpu
buf192.group.iteration = ((512,), ())
buf192.sizes = ([512], [])
class buf192_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0078740157480315, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_232', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf192', get_index_2, add, None)
        return store


buf193: SchedulerNode(ComputedBuffer)
buf193.writes = [MemoryDep(name='buf193', index=c0, size=(65536,))]
buf193.unmet_dependencies = 
    [   MemoryDep(name='buf169', index=c0, size=(65536,)),
        MemoryDep(name='buf186', index=c0, size=(65536,)),
        MemoryDep(name='buf188', index=c1, size=(8, 512, 16)),
        MemoryDep(name='buf189', index=c1, size=(8, 512, 16))]
buf193.met_dependencies = 
    [   MemoryDep(name='primals_71', index=c1, size=(8, 512, 16)),
        MemoryDep(name='primals_72', index=c1, size=(8, 512, 16))]
buf193.group.device = cpu
buf193.group.iteration = ((8, 512, 16), ())
buf193.sizes = ([8, 512, 16], [])
class buf193_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 16}
    index0 = 8192*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf188', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf189', get_index_2)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_71', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_72', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf169', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf193', get_index_6, relu, None)
        return store


buf194: ExternKernelSchedulerNode(Convolution)
buf194.writes = [StarDep(name='buf194')]
buf194.unmet_dependencies = [StarDep(name='buf193')]
buf194.met_dependencies = [StarDep(name='primals_73')]
buf194.node.kernel = aten.convolution


buf195: SchedulerNode(ComputedBuffer)
buf195.writes = 
    [   MemoryDep(name='buf195', index=c0, size=(256, 128)),
        MemoryDep(name='buf195', index=c0, size=(256,))]
buf195.unmet_dependencies = [MemoryDep(name='buf194', index=16*c0 + 4096*c1 + c2, size=(256, 8, 16))]
buf195.met_dependencies = []
buf195.group.device = cpu
buf195.group.iteration = ((256,), (8, 16))
buf195.sizes = ([256], [8, 16])
class buf195_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 16}
    index0 = 16*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf195', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf196: SchedulerNode(ComputedBuffer)
buf196.writes = [MemoryDep(name='buf196', index=c0, size=(256,))]
buf196.unmet_dependencies = [MemoryDep(name='buf195', index=c0, size=(256,))]
buf196.met_dependencies = []
buf196.group.device = cpu
buf196.group.iteration = ((256,), ())
buf196.sizes = ([256], [])
class buf196_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf196', get_index_1, div, None)
        return store


buf197: SchedulerNode(ComputedBuffer)
buf197.writes = 
    [   MemoryDep(name='buf197', index=c0, size=(256, 128)),
        MemoryDep(name='buf197', index=c0, size=(256,))]
buf197.unmet_dependencies = 
    [   MemoryDep(name='buf194', index=16*c0 + 4096*c1 + c2, size=(256, 8, 16)),
        MemoryDep(name='buf196', index=c0, size=(256, 128))]
buf197.met_dependencies = []
buf197.group.device = cpu
buf197.group.iteration = ((256,), (8, 16))
buf197.sizes = ([256], [8, 16])
class buf197_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 16}
    index0 = 16*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf196', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf197', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf198: SchedulerNode(ComputedBuffer)
buf198.writes = [MemoryDep(name='buf198', index=c0, size=(256,))]
buf198.unmet_dependencies = [MemoryDep(name='buf197', index=c0, size=(256,))]
buf198.met_dependencies = []
buf198.group.device = cpu
buf198.group.iteration = ((256,), ())
buf198.sizes = ([256], [])
class buf198_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf198', get_index_1, rsqrt, None)
        return store


buf199: SchedulerNode(ComputedBuffer)
buf199.writes = [MemoryDep(name='buf199', index=c0, size=(256,))]
buf199.unmet_dependencies = [MemoryDep(name='buf196', index=c0, size=(256,))]
buf199.met_dependencies = [MemoryDep(name='primals_234', index=c0, size=(256,))]
buf199.group.device = cpu
buf199.group.iteration = ((256,), ())
buf199.sizes = ([256], [])
class buf199_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_234', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf199', get_index_2, add, None)
        return store


buf200: SchedulerNode(ComputedBuffer)
buf200.writes = [MemoryDep(name='buf200', index=c0, size=(256,))]
buf200.unmet_dependencies = [MemoryDep(name='buf197', index=c0, size=(256,))]
buf200.met_dependencies = [MemoryDep(name='primals_235', index=c0, size=(256,))]
buf200.group.device = cpu
buf200.group.iteration = ((256,), ())
buf200.sizes = ([256], [])
class buf200_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0078740157480315, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_235', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf200', get_index_2, add, None)
        return store


buf201: SchedulerNode(ComputedBuffer)
buf201.writes = [MemoryDep(name='buf201', index=c0, size=(32768,))]
buf201.unmet_dependencies = 
    [   MemoryDep(name='buf194', index=c0, size=(32768,)),
        MemoryDep(name='buf196', index=c1, size=(8, 256, 16)),
        MemoryDep(name='buf197', index=c1, size=(8, 256, 16))]
buf201.met_dependencies = 
    [   MemoryDep(name='primals_74', index=c1, size=(8, 256, 16)),
        MemoryDep(name='primals_75', index=c1, size=(8, 256, 16))]
buf201.group.device = cpu
buf201.group.iteration = ((8, 256, 16), ())
buf201.sizes = ([8, 256, 16], [])
class buf201_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 16}
    index0 = 4096*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf196', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf197', get_index_2)
        constant = ops.constant(128, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_74', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_75', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf201', get_index_5, relu, None)
        return store


buf202: ExternKernelSchedulerNode(Convolution)
buf202.writes = [StarDep(name='buf202')]
buf202.unmet_dependencies = [StarDep(name='buf201')]
buf202.met_dependencies = [StarDep(name='primals_76')]
buf202.node.kernel = aten.convolution


buf203: SchedulerNode(ComputedBuffer)
buf203.writes = 
    [   MemoryDep(name='buf203', index=c0, size=(256, 32)),
        MemoryDep(name='buf203', index=c0, size=(256,))]
buf203.unmet_dependencies = [MemoryDep(name='buf202', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf203.met_dependencies = []
buf203.group.device = cpu
buf203.group.iteration = ((256,), (8, 4))
buf203.sizes = ([256], [8, 4])
class buf203_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf203', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf204: SchedulerNode(ComputedBuffer)
buf204.writes = [MemoryDep(name='buf204', index=c0, size=(256,))]
buf204.unmet_dependencies = [MemoryDep(name='buf203', index=c0, size=(256,))]
buf204.met_dependencies = []
buf204.group.device = cpu
buf204.group.iteration = ((256,), ())
buf204.sizes = ([256], [])
class buf204_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf204', get_index_1, div, None)
        return store


buf205: SchedulerNode(ComputedBuffer)
buf205.writes = 
    [   MemoryDep(name='buf205', index=c0, size=(256, 32)),
        MemoryDep(name='buf205', index=c0, size=(256,))]
buf205.unmet_dependencies = 
    [   MemoryDep(name='buf202', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='buf204', index=c0, size=(256, 32))]
buf205.met_dependencies = []
buf205.group.device = cpu
buf205.group.iteration = ((256,), (8, 4))
buf205.sizes = ([256], [8, 4])
class buf205_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf204', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf205', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf206: SchedulerNode(ComputedBuffer)
buf206.writes = [MemoryDep(name='buf206', index=c0, size=(256,))]
buf206.unmet_dependencies = [MemoryDep(name='buf205', index=c0, size=(256,))]
buf206.met_dependencies = []
buf206.group.device = cpu
buf206.group.iteration = ((256,), ())
buf206.sizes = ([256], [])
class buf206_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf206', get_index_1, rsqrt, None)
        return store


buf207: SchedulerNode(ComputedBuffer)
buf207.writes = [MemoryDep(name='buf207', index=c0, size=(256,))]
buf207.unmet_dependencies = [MemoryDep(name='buf204', index=c0, size=(256,))]
buf207.met_dependencies = [MemoryDep(name='primals_237', index=c0, size=(256,))]
buf207.group.device = cpu
buf207.group.iteration = ((256,), ())
buf207.sizes = ([256], [])
class buf207_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_237', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf207', get_index_2, add, None)
        return store


buf208: SchedulerNode(ComputedBuffer)
buf208.writes = [MemoryDep(name='buf208', index=c0, size=(256,))]
buf208.unmet_dependencies = [MemoryDep(name='buf205', index=c0, size=(256,))]
buf208.met_dependencies = [MemoryDep(name='primals_238', index=c0, size=(256,))]
buf208.group.device = cpu
buf208.group.iteration = ((256,), ())
buf208.sizes = ([256], [])
class buf208_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.032258064516129, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_238', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf208', get_index_2, add, None)
        return store


buf209: SchedulerNode(ComputedBuffer)
buf209.writes = [MemoryDep(name='buf209', index=c0, size=(8192,))]
buf209.unmet_dependencies = 
    [   MemoryDep(name='buf202', index=c0, size=(8192,)),
        MemoryDep(name='buf204', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf205', index=c1, size=(8, 256, 4))]
buf209.met_dependencies = 
    [   MemoryDep(name='primals_77', index=c1, size=(8, 256, 4)),
        MemoryDep(name='primals_78', index=c1, size=(8, 256, 4))]
buf209.group.device = cpu
buf209.group.iteration = ((8, 256, 4), ())
buf209.sizes = ([8, 256, 4], [])
class buf209_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf204', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf205', get_index_2)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_77', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_78', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf209', get_index_5, relu, None)
        return store


buf210: ExternKernelSchedulerNode(Convolution)
buf210.writes = [StarDep(name='buf210')]
buf210.unmet_dependencies = [StarDep(name='buf209')]
buf210.met_dependencies = [StarDep(name='primals_79')]
buf210.node.kernel = aten.convolution


buf211: SchedulerNode(ComputedBuffer)
buf211.writes = 
    [   MemoryDep(name='buf211', index=c0, size=(1024, 32)),
        MemoryDep(name='buf211', index=c0, size=(1024,))]
buf211.unmet_dependencies = [MemoryDep(name='buf210', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf211.met_dependencies = []
buf211.group.device = cpu
buf211.group.iteration = ((1024,), (8, 4))
buf211.sizes = ([1024], [8, 4])
class buf211_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf211', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf212: SchedulerNode(ComputedBuffer)
buf212.writes = [MemoryDep(name='buf212', index=c0, size=(1024,))]
buf212.unmet_dependencies = [MemoryDep(name='buf211', index=c0, size=(1024,))]
buf212.met_dependencies = []
buf212.group.device = cpu
buf212.group.iteration = ((1024,), ())
buf212.sizes = ([1024], [])
class buf212_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf212', get_index_1, div, None)
        return store


buf213: SchedulerNode(ComputedBuffer)
buf213.writes = 
    [   MemoryDep(name='buf213', index=c0, size=(1024, 32)),
        MemoryDep(name='buf213', index=c0, size=(1024,))]
buf213.unmet_dependencies = 
    [   MemoryDep(name='buf210', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='buf212', index=c0, size=(1024, 32))]
buf213.met_dependencies = []
buf213.group.device = cpu
buf213.group.iteration = ((1024,), (8, 4))
buf213.sizes = ([1024], [8, 4])
class buf213_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf212', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf213', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf214: SchedulerNode(ComputedBuffer)
buf214.writes = [MemoryDep(name='buf214', index=c0, size=(1024,))]
buf214.unmet_dependencies = [MemoryDep(name='buf213', index=c0, size=(1024,))]
buf214.met_dependencies = []
buf214.group.device = cpu
buf214.group.iteration = ((1024,), ())
buf214.sizes = ([1024], [])
class buf214_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf214', get_index_1, rsqrt, None)
        return store


buf215: SchedulerNode(ComputedBuffer)
buf215.writes = [MemoryDep(name='buf215', index=c0, size=(1024,))]
buf215.unmet_dependencies = [MemoryDep(name='buf212', index=c0, size=(1024,))]
buf215.met_dependencies = [MemoryDep(name='primals_240', index=c0, size=(1024,))]
buf215.group.device = cpu
buf215.group.iteration = ((1024,), ())
buf215.sizes = ([1024], [])
class buf215_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_240', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf215', get_index_2, add, None)
        return store


buf216: SchedulerNode(ComputedBuffer)
buf216.writes = [MemoryDep(name='buf216', index=c0, size=(1024,))]
buf216.unmet_dependencies = [MemoryDep(name='buf213', index=c0, size=(1024,))]
buf216.met_dependencies = [MemoryDep(name='primals_241', index=c0, size=(1024,))]
buf216.group.device = cpu
buf216.group.iteration = ((1024,), ())
buf216.sizes = ([1024], [])
class buf216_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.032258064516129, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_241', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf216', get_index_2, add, None)
        return store


buf217: ExternKernelSchedulerNode(Convolution)
buf217.writes = [StarDep(name='buf217')]
buf217.unmet_dependencies = [StarDep(name='buf193')]
buf217.met_dependencies = [StarDep(name='primals_82')]
buf217.node.kernel = aten.convolution


buf218: SchedulerNode(ComputedBuffer)
buf218.writes = 
    [   MemoryDep(name='buf218', index=c0, size=(1024, 32)),
        MemoryDep(name='buf218', index=c0, size=(1024,))]
buf218.unmet_dependencies = [MemoryDep(name='buf217', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf218.met_dependencies = []
buf218.group.device = cpu
buf218.group.iteration = ((1024,), (8, 4))
buf218.sizes = ([1024], [8, 4])
class buf218_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf218', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf219: SchedulerNode(ComputedBuffer)
buf219.writes = [MemoryDep(name='buf219', index=c0, size=(1024,))]
buf219.unmet_dependencies = [MemoryDep(name='buf218', index=c0, size=(1024,))]
buf219.met_dependencies = []
buf219.group.device = cpu
buf219.group.iteration = ((1024,), ())
buf219.sizes = ([1024], [])
class buf219_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf219', get_index_1, div, None)
        return store


buf220: SchedulerNode(ComputedBuffer)
buf220.writes = 
    [   MemoryDep(name='buf220', index=c0, size=(1024, 32)),
        MemoryDep(name='buf220', index=c0, size=(1024,))]
buf220.unmet_dependencies = 
    [   MemoryDep(name='buf217', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='buf219', index=c0, size=(1024, 32))]
buf220.met_dependencies = []
buf220.group.device = cpu
buf220.group.iteration = ((1024,), (8, 4))
buf220.sizes = ([1024], [8, 4])
class buf220_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf219', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf220', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf221: SchedulerNode(ComputedBuffer)
buf221.writes = [MemoryDep(name='buf221', index=c0, size=(1024,))]
buf221.unmet_dependencies = [MemoryDep(name='buf220', index=c0, size=(1024,))]
buf221.met_dependencies = []
buf221.group.device = cpu
buf221.group.iteration = ((1024,), ())
buf221.sizes = ([1024], [])
class buf221_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf221', get_index_1, rsqrt, None)
        return store


buf222: SchedulerNode(ComputedBuffer)
buf222.writes = [MemoryDep(name='buf222', index=c0, size=(1024,))]
buf222.unmet_dependencies = [MemoryDep(name='buf219', index=c0, size=(1024,))]
buf222.met_dependencies = [MemoryDep(name='primals_243', index=c0, size=(1024,))]
buf222.group.device = cpu
buf222.group.iteration = ((1024,), ())
buf222.sizes = ([1024], [])
class buf222_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_243', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf222', get_index_2, add, None)
        return store


buf223: SchedulerNode(ComputedBuffer)
buf223.writes = [MemoryDep(name='buf223', index=c0, size=(1024,))]
buf223.unmet_dependencies = [MemoryDep(name='buf220', index=c0, size=(1024,))]
buf223.met_dependencies = [MemoryDep(name='primals_244', index=c0, size=(1024,))]
buf223.group.device = cpu
buf223.group.iteration = ((1024,), ())
buf223.sizes = ([1024], [])
class buf223_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.032258064516129, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_244', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf223', get_index_2, add, None)
        return store


buf224: SchedulerNode(ComputedBuffer)
buf224.writes = [MemoryDep(name='buf224', index=c0, size=(32768,))]
buf224.unmet_dependencies = 
    [   MemoryDep(name='buf210', index=c0, size=(32768,)),
        MemoryDep(name='buf212', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='buf213', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='buf217', index=c0, size=(32768,)),
        MemoryDep(name='buf219', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='buf220', index=c1, size=(8, 1024, 4))]
buf224.met_dependencies = 
    [   MemoryDep(name='primals_80', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='primals_81', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='primals_83', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='primals_84', index=c1, size=(8, 1024, 4))]
buf224.group.device = cpu
buf224.group.iteration = ((8, 1024, 4), ())
buf224.sizes = ([8, 1024, 4], [])
class buf224_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf212', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf213', get_index_2)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_80', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_81', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf217', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf219', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf220', get_index_7)
        constant_2 = ops.constant(32, torch.float32)
        div_1 = ops.div(load_7, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_83', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_84', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf224', get_index_10, add_4, None)
        return store


buf225: SchedulerNode(ComputedBuffer)
buf225.writes = [MemoryDep(name='buf225', index=c0, size=(32768,))]
buf225.unmet_dependencies = [MemoryDep(name='buf224', index=c0, size=(32768,))]
buf225.met_dependencies = []
buf225.group.device = cpu
buf225.group.iteration = ((32768,), ())
buf225.sizes = ([32768], [])
class buf225_loop_body:
    var_ranges = {z0: 32768}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf225', get_index_1, relu, None)
        return store


buf226: ExternKernelSchedulerNode(Convolution)
buf226.writes = [StarDep(name='buf226')]
buf226.unmet_dependencies = [StarDep(name='buf225')]
buf226.met_dependencies = [StarDep(name='primals_85')]
buf226.node.kernel = aten.convolution


buf227: SchedulerNode(ComputedBuffer)
buf227.writes = 
    [   MemoryDep(name='buf227', index=c0, size=(256, 32)),
        MemoryDep(name='buf227', index=c0, size=(256,))]
buf227.unmet_dependencies = [MemoryDep(name='buf226', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf227.met_dependencies = []
buf227.group.device = cpu
buf227.group.iteration = ((256,), (8, 4))
buf227.sizes = ([256], [8, 4])
class buf227_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf227', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf228: SchedulerNode(ComputedBuffer)
buf228.writes = [MemoryDep(name='buf228', index=c0, size=(256,))]
buf228.unmet_dependencies = [MemoryDep(name='buf227', index=c0, size=(256,))]
buf228.met_dependencies = []
buf228.group.device = cpu
buf228.group.iteration = ((256,), ())
buf228.sizes = ([256], [])
class buf228_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf228', get_index_1, div, None)
        return store


buf229: SchedulerNode(ComputedBuffer)
buf229.writes = 
    [   MemoryDep(name='buf229', index=c0, size=(256, 32)),
        MemoryDep(name='buf229', index=c0, size=(256,))]
buf229.unmet_dependencies = 
    [   MemoryDep(name='buf226', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='buf228', index=c0, size=(256, 32))]
buf229.met_dependencies = []
buf229.group.device = cpu
buf229.group.iteration = ((256,), (8, 4))
buf229.sizes = ([256], [8, 4])
class buf229_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf228', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf229', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf230: SchedulerNode(ComputedBuffer)
buf230.writes = [MemoryDep(name='buf230', index=c0, size=(256,))]
buf230.unmet_dependencies = [MemoryDep(name='buf229', index=c0, size=(256,))]
buf230.met_dependencies = []
buf230.group.device = cpu
buf230.group.iteration = ((256,), ())
buf230.sizes = ([256], [])
class buf230_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf230', get_index_1, rsqrt, None)
        return store


buf231: SchedulerNode(ComputedBuffer)
buf231.writes = [MemoryDep(name='buf231', index=c0, size=(256,))]
buf231.unmet_dependencies = [MemoryDep(name='buf228', index=c0, size=(256,))]
buf231.met_dependencies = [MemoryDep(name='primals_246', index=c0, size=(256,))]
buf231.group.device = cpu
buf231.group.iteration = ((256,), ())
buf231.sizes = ([256], [])
class buf231_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_246', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf231', get_index_2, add, None)
        return store


buf232: SchedulerNode(ComputedBuffer)
buf232.writes = [MemoryDep(name='buf232', index=c0, size=(256,))]
buf232.unmet_dependencies = [MemoryDep(name='buf229', index=c0, size=(256,))]
buf232.met_dependencies = [MemoryDep(name='primals_247', index=c0, size=(256,))]
buf232.group.device = cpu
buf232.group.iteration = ((256,), ())
buf232.sizes = ([256], [])
class buf232_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.032258064516129, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_247', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf232', get_index_2, add, None)
        return store


buf233: SchedulerNode(ComputedBuffer)
buf233.writes = [MemoryDep(name='buf233', index=c0, size=(8192,))]
buf233.unmet_dependencies = 
    [   MemoryDep(name='buf226', index=c0, size=(8192,)),
        MemoryDep(name='buf228', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf229', index=c1, size=(8, 256, 4))]
buf233.met_dependencies = 
    [   MemoryDep(name='primals_86', index=c1, size=(8, 256, 4)),
        MemoryDep(name='primals_87', index=c1, size=(8, 256, 4))]
buf233.group.device = cpu
buf233.group.iteration = ((8, 256, 4), ())
buf233.sizes = ([8, 256, 4], [])
class buf233_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf228', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf229', get_index_2)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_86', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_87', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf233', get_index_5, relu, None)
        return store


buf234: ExternKernelSchedulerNode(Convolution)
buf234.writes = [StarDep(name='buf234')]
buf234.unmet_dependencies = [StarDep(name='buf233')]
buf234.met_dependencies = [StarDep(name='primals_88')]
buf234.node.kernel = aten.convolution


buf235: SchedulerNode(ComputedBuffer)
buf235.writes = 
    [   MemoryDep(name='buf235', index=c0, size=(256, 32)),
        MemoryDep(name='buf235', index=c0, size=(256,))]
buf235.unmet_dependencies = [MemoryDep(name='buf234', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf235.met_dependencies = []
buf235.group.device = cpu
buf235.group.iteration = ((256,), (8, 4))
buf235.sizes = ([256], [8, 4])
class buf235_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf235', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf236: SchedulerNode(ComputedBuffer)
buf236.writes = [MemoryDep(name='buf236', index=c0, size=(256,))]
buf236.unmet_dependencies = [MemoryDep(name='buf235', index=c0, size=(256,))]
buf236.met_dependencies = []
buf236.group.device = cpu
buf236.group.iteration = ((256,), ())
buf236.sizes = ([256], [])
class buf236_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf236', get_index_1, div, None)
        return store


buf237: SchedulerNode(ComputedBuffer)
buf237.writes = 
    [   MemoryDep(name='buf237', index=c0, size=(256, 32)),
        MemoryDep(name='buf237', index=c0, size=(256,))]
buf237.unmet_dependencies = 
    [   MemoryDep(name='buf234', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='buf236', index=c0, size=(256, 32))]
buf237.met_dependencies = []
buf237.group.device = cpu
buf237.group.iteration = ((256,), (8, 4))
buf237.sizes = ([256], [8, 4])
class buf237_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf236', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf237', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf238: SchedulerNode(ComputedBuffer)
buf238.writes = [MemoryDep(name='buf238', index=c0, size=(256,))]
buf238.unmet_dependencies = [MemoryDep(name='buf237', index=c0, size=(256,))]
buf238.met_dependencies = []
buf238.group.device = cpu
buf238.group.iteration = ((256,), ())
buf238.sizes = ([256], [])
class buf238_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf237', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf238', get_index_1, rsqrt, None)
        return store


buf239: SchedulerNode(ComputedBuffer)
buf239.writes = [MemoryDep(name='buf239', index=c0, size=(256,))]
buf239.unmet_dependencies = [MemoryDep(name='buf236', index=c0, size=(256,))]
buf239.met_dependencies = [MemoryDep(name='primals_249', index=c0, size=(256,))]
buf239.group.device = cpu
buf239.group.iteration = ((256,), ())
buf239.sizes = ([256], [])
class buf239_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_249', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf239', get_index_2, add, None)
        return store


buf240: SchedulerNode(ComputedBuffer)
buf240.writes = [MemoryDep(name='buf240', index=c0, size=(256,))]
buf240.unmet_dependencies = [MemoryDep(name='buf237', index=c0, size=(256,))]
buf240.met_dependencies = [MemoryDep(name='primals_250', index=c0, size=(256,))]
buf240.group.device = cpu
buf240.group.iteration = ((256,), ())
buf240.sizes = ([256], [])
class buf240_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf237', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.032258064516129, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_250', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf240', get_index_2, add, None)
        return store


buf241: SchedulerNode(ComputedBuffer)
buf241.writes = [MemoryDep(name='buf241', index=c0, size=(8192,))]
buf241.unmet_dependencies = 
    [   MemoryDep(name='buf234', index=c0, size=(8192,)),
        MemoryDep(name='buf236', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf237', index=c1, size=(8, 256, 4))]
buf241.met_dependencies = 
    [   MemoryDep(name='primals_89', index=c1, size=(8, 256, 4)),
        MemoryDep(name='primals_90', index=c1, size=(8, 256, 4))]
buf241.group.device = cpu
buf241.group.iteration = ((8, 256, 4), ())
buf241.sizes = ([8, 256, 4], [])
class buf241_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf236', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf237', get_index_2)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_89', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_90', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf241', get_index_5, relu, None)
        return store


buf242: ExternKernelSchedulerNode(Convolution)
buf242.writes = [StarDep(name='buf242')]
buf242.unmet_dependencies = [StarDep(name='buf241')]
buf242.met_dependencies = [StarDep(name='primals_91')]
buf242.node.kernel = aten.convolution


buf243: SchedulerNode(ComputedBuffer)
buf243.writes = 
    [   MemoryDep(name='buf243', index=c0, size=(1024, 32)),
        MemoryDep(name='buf243', index=c0, size=(1024,))]
buf243.unmet_dependencies = [MemoryDep(name='buf242', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf243.met_dependencies = []
buf243.group.device = cpu
buf243.group.iteration = ((1024,), (8, 4))
buf243.sizes = ([1024], [8, 4])
class buf243_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf243', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf244: SchedulerNode(ComputedBuffer)
buf244.writes = [MemoryDep(name='buf244', index=c0, size=(1024,))]
buf244.unmet_dependencies = [MemoryDep(name='buf243', index=c0, size=(1024,))]
buf244.met_dependencies = []
buf244.group.device = cpu
buf244.group.iteration = ((1024,), ())
buf244.sizes = ([1024], [])
class buf244_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf244', get_index_1, div, None)
        return store


buf245: SchedulerNode(ComputedBuffer)
buf245.writes = 
    [   MemoryDep(name='buf245', index=c0, size=(1024, 32)),
        MemoryDep(name='buf245', index=c0, size=(1024,))]
buf245.unmet_dependencies = 
    [   MemoryDep(name='buf242', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='buf244', index=c0, size=(1024, 32))]
buf245.met_dependencies = []
buf245.group.device = cpu
buf245.group.iteration = ((1024,), (8, 4))
buf245.sizes = ([1024], [8, 4])
class buf245_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf244', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf245', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf246: SchedulerNode(ComputedBuffer)
buf246.writes = [MemoryDep(name='buf246', index=c0, size=(1024,))]
buf246.unmet_dependencies = [MemoryDep(name='buf245', index=c0, size=(1024,))]
buf246.met_dependencies = []
buf246.group.device = cpu
buf246.group.iteration = ((1024,), ())
buf246.sizes = ([1024], [])
class buf246_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf246', get_index_1, rsqrt, None)
        return store


buf247: SchedulerNode(ComputedBuffer)
buf247.writes = [MemoryDep(name='buf247', index=c0, size=(1024,))]
buf247.unmet_dependencies = [MemoryDep(name='buf244', index=c0, size=(1024,))]
buf247.met_dependencies = [MemoryDep(name='primals_252', index=c0, size=(1024,))]
buf247.group.device = cpu
buf247.group.iteration = ((1024,), ())
buf247.sizes = ([1024], [])
class buf247_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_252', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf247', get_index_2, add, None)
        return store


buf248: SchedulerNode(ComputedBuffer)
buf248.writes = [MemoryDep(name='buf248', index=c0, size=(1024,))]
buf248.unmet_dependencies = [MemoryDep(name='buf245', index=c0, size=(1024,))]
buf248.met_dependencies = [MemoryDep(name='primals_253', index=c0, size=(1024,))]
buf248.group.device = cpu
buf248.group.iteration = ((1024,), ())
buf248.sizes = ([1024], [])
class buf248_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.032258064516129, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_253', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf248', get_index_2, add, None)
        return store


buf249: SchedulerNode(ComputedBuffer)
buf249.writes = [MemoryDep(name='buf249', index=c0, size=(32768,))]
buf249.unmet_dependencies = 
    [   MemoryDep(name='buf225', index=c0, size=(32768,)),
        MemoryDep(name='buf242', index=c0, size=(32768,)),
        MemoryDep(name='buf244', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='buf245', index=c1, size=(8, 1024, 4))]
buf249.met_dependencies = 
    [   MemoryDep(name='primals_92', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='primals_93', index=c1, size=(8, 1024, 4))]
buf249.group.device = cpu
buf249.group.iteration = ((8, 1024, 4), ())
buf249.sizes = ([8, 1024, 4], [])
class buf249_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf244', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf245', get_index_2)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_92', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_93', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf225', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf249', get_index_6, relu, None)
        return store


buf250: ExternKernelSchedulerNode(Convolution)
buf250.writes = [StarDep(name='buf250')]
buf250.unmet_dependencies = [StarDep(name='buf249')]
buf250.met_dependencies = [StarDep(name='primals_94')]
buf250.node.kernel = aten.convolution


buf251: SchedulerNode(ComputedBuffer)
buf251.writes = 
    [   MemoryDep(name='buf251', index=c0, size=(256, 32)),
        MemoryDep(name='buf251', index=c0, size=(256,))]
buf251.unmet_dependencies = [MemoryDep(name='buf250', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf251.met_dependencies = []
buf251.group.device = cpu
buf251.group.iteration = ((256,), (8, 4))
buf251.sizes = ([256], [8, 4])
class buf251_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf251', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf252: SchedulerNode(ComputedBuffer)
buf252.writes = [MemoryDep(name='buf252', index=c0, size=(256,))]
buf252.unmet_dependencies = [MemoryDep(name='buf251', index=c0, size=(256,))]
buf252.met_dependencies = []
buf252.group.device = cpu
buf252.group.iteration = ((256,), ())
buf252.sizes = ([256], [])
class buf252_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf252', get_index_1, div, None)
        return store


buf253: SchedulerNode(ComputedBuffer)
buf253.writes = 
    [   MemoryDep(name='buf253', index=c0, size=(256, 32)),
        MemoryDep(name='buf253', index=c0, size=(256,))]
buf253.unmet_dependencies = 
    [   MemoryDep(name='buf250', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='buf252', index=c0, size=(256, 32))]
buf253.met_dependencies = []
buf253.group.device = cpu
buf253.group.iteration = ((256,), (8, 4))
buf253.sizes = ([256], [8, 4])
class buf253_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf252', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf253', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf254: SchedulerNode(ComputedBuffer)
buf254.writes = [MemoryDep(name='buf254', index=c0, size=(256,))]
buf254.unmet_dependencies = [MemoryDep(name='buf253', index=c0, size=(256,))]
buf254.met_dependencies = []
buf254.group.device = cpu
buf254.group.iteration = ((256,), ())
buf254.sizes = ([256], [])
class buf254_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf254', get_index_1, rsqrt, None)
        return store


buf255: SchedulerNode(ComputedBuffer)
buf255.writes = [MemoryDep(name='buf255', index=c0, size=(256,))]
buf255.unmet_dependencies = [MemoryDep(name='buf252', index=c0, size=(256,))]
buf255.met_dependencies = [MemoryDep(name='primals_255', index=c0, size=(256,))]
buf255.group.device = cpu
buf255.group.iteration = ((256,), ())
buf255.sizes = ([256], [])
class buf255_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_255', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf255', get_index_2, add, None)
        return store


buf256: SchedulerNode(ComputedBuffer)
buf256.writes = [MemoryDep(name='buf256', index=c0, size=(256,))]
buf256.unmet_dependencies = [MemoryDep(name='buf253', index=c0, size=(256,))]
buf256.met_dependencies = [MemoryDep(name='primals_256', index=c0, size=(256,))]
buf256.group.device = cpu
buf256.group.iteration = ((256,), ())
buf256.sizes = ([256], [])
class buf256_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.032258064516129, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_256', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf256', get_index_2, add, None)
        return store


buf257: SchedulerNode(ComputedBuffer)
buf257.writes = [MemoryDep(name='buf257', index=c0, size=(8192,))]
buf257.unmet_dependencies = 
    [   MemoryDep(name='buf250', index=c0, size=(8192,)),
        MemoryDep(name='buf252', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf253', index=c1, size=(8, 256, 4))]
buf257.met_dependencies = 
    [   MemoryDep(name='primals_95', index=c1, size=(8, 256, 4)),
        MemoryDep(name='primals_96', index=c1, size=(8, 256, 4))]
buf257.group.device = cpu
buf257.group.iteration = ((8, 256, 4), ())
buf257.sizes = ([8, 256, 4], [])
class buf257_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf252', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf253', get_index_2)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_95', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_96', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf257', get_index_5, relu, None)
        return store


buf258: ExternKernelSchedulerNode(Convolution)
buf258.writes = [StarDep(name='buf258')]
buf258.unmet_dependencies = [StarDep(name='buf257')]
buf258.met_dependencies = [StarDep(name='primals_97')]
buf258.node.kernel = aten.convolution


buf259: SchedulerNode(ComputedBuffer)
buf259.writes = 
    [   MemoryDep(name='buf259', index=c0, size=(256, 32)),
        MemoryDep(name='buf259', index=c0, size=(256,))]
buf259.unmet_dependencies = [MemoryDep(name='buf258', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf259.met_dependencies = []
buf259.group.device = cpu
buf259.group.iteration = ((256,), (8, 4))
buf259.sizes = ([256], [8, 4])
class buf259_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf259', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf260: SchedulerNode(ComputedBuffer)
buf260.writes = [MemoryDep(name='buf260', index=c0, size=(256,))]
buf260.unmet_dependencies = [MemoryDep(name='buf259', index=c0, size=(256,))]
buf260.met_dependencies = []
buf260.group.device = cpu
buf260.group.iteration = ((256,), ())
buf260.sizes = ([256], [])
class buf260_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf260', get_index_1, div, None)
        return store


buf261: SchedulerNode(ComputedBuffer)
buf261.writes = 
    [   MemoryDep(name='buf261', index=c0, size=(256, 32)),
        MemoryDep(name='buf261', index=c0, size=(256,))]
buf261.unmet_dependencies = 
    [   MemoryDep(name='buf258', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='buf260', index=c0, size=(256, 32))]
buf261.met_dependencies = []
buf261.group.device = cpu
buf261.group.iteration = ((256,), (8, 4))
buf261.sizes = ([256], [8, 4])
class buf261_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf260', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf261', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf262: SchedulerNode(ComputedBuffer)
buf262.writes = [MemoryDep(name='buf262', index=c0, size=(256,))]
buf262.unmet_dependencies = [MemoryDep(name='buf261', index=c0, size=(256,))]
buf262.met_dependencies = []
buf262.group.device = cpu
buf262.group.iteration = ((256,), ())
buf262.sizes = ([256], [])
class buf262_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf262', get_index_1, rsqrt, None)
        return store


buf263: SchedulerNode(ComputedBuffer)
buf263.writes = [MemoryDep(name='buf263', index=c0, size=(256,))]
buf263.unmet_dependencies = [MemoryDep(name='buf260', index=c0, size=(256,))]
buf263.met_dependencies = [MemoryDep(name='primals_258', index=c0, size=(256,))]
buf263.group.device = cpu
buf263.group.iteration = ((256,), ())
buf263.sizes = ([256], [])
class buf263_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_258', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf263', get_index_2, add, None)
        return store


buf264: SchedulerNode(ComputedBuffer)
buf264.writes = [MemoryDep(name='buf264', index=c0, size=(256,))]
buf264.unmet_dependencies = [MemoryDep(name='buf261', index=c0, size=(256,))]
buf264.met_dependencies = [MemoryDep(name='primals_259', index=c0, size=(256,))]
buf264.group.device = cpu
buf264.group.iteration = ((256,), ())
buf264.sizes = ([256], [])
class buf264_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.032258064516129, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_259', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf264', get_index_2, add, None)
        return store


buf265: SchedulerNode(ComputedBuffer)
buf265.writes = [MemoryDep(name='buf265', index=c0, size=(8192,))]
buf265.unmet_dependencies = 
    [   MemoryDep(name='buf258', index=c0, size=(8192,)),
        MemoryDep(name='buf260', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf261', index=c1, size=(8, 256, 4))]
buf265.met_dependencies = 
    [   MemoryDep(name='primals_98', index=c1, size=(8, 256, 4)),
        MemoryDep(name='primals_99', index=c1, size=(8, 256, 4))]
buf265.group.device = cpu
buf265.group.iteration = ((8, 256, 4), ())
buf265.sizes = ([8, 256, 4], [])
class buf265_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf260', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf261', get_index_2)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_98', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_99', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf265', get_index_5, relu, None)
        return store


buf266: ExternKernelSchedulerNode(Convolution)
buf266.writes = [StarDep(name='buf266')]
buf266.unmet_dependencies = [StarDep(name='buf265')]
buf266.met_dependencies = [StarDep(name='primals_100')]
buf266.node.kernel = aten.convolution


buf267: SchedulerNode(ComputedBuffer)
buf267.writes = 
    [   MemoryDep(name='buf267', index=c0, size=(1024, 32)),
        MemoryDep(name='buf267', index=c0, size=(1024,))]
buf267.unmet_dependencies = [MemoryDep(name='buf266', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf267.met_dependencies = []
buf267.group.device = cpu
buf267.group.iteration = ((1024,), (8, 4))
buf267.sizes = ([1024], [8, 4])
class buf267_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf267', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf268: SchedulerNode(ComputedBuffer)
buf268.writes = [MemoryDep(name='buf268', index=c0, size=(1024,))]
buf268.unmet_dependencies = [MemoryDep(name='buf267', index=c0, size=(1024,))]
buf268.met_dependencies = []
buf268.group.device = cpu
buf268.group.iteration = ((1024,), ())
buf268.sizes = ([1024], [])
class buf268_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf268', get_index_1, div, None)
        return store


buf269: SchedulerNode(ComputedBuffer)
buf269.writes = 
    [   MemoryDep(name='buf269', index=c0, size=(1024, 32)),
        MemoryDep(name='buf269', index=c0, size=(1024,))]
buf269.unmet_dependencies = 
    [   MemoryDep(name='buf266', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='buf268', index=c0, size=(1024, 32))]
buf269.met_dependencies = []
buf269.group.device = cpu
buf269.group.iteration = ((1024,), (8, 4))
buf269.sizes = ([1024], [8, 4])
class buf269_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf268', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf269', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf270: SchedulerNode(ComputedBuffer)
buf270.writes = [MemoryDep(name='buf270', index=c0, size=(1024,))]
buf270.unmet_dependencies = [MemoryDep(name='buf269', index=c0, size=(1024,))]
buf270.met_dependencies = []
buf270.group.device = cpu
buf270.group.iteration = ((1024,), ())
buf270.sizes = ([1024], [])
class buf270_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf270', get_index_1, rsqrt, None)
        return store


buf271: SchedulerNode(ComputedBuffer)
buf271.writes = [MemoryDep(name='buf271', index=c0, size=(1024,))]
buf271.unmet_dependencies = [MemoryDep(name='buf268', index=c0, size=(1024,))]
buf271.met_dependencies = [MemoryDep(name='primals_261', index=c0, size=(1024,))]
buf271.group.device = cpu
buf271.group.iteration = ((1024,), ())
buf271.sizes = ([1024], [])
class buf271_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_261', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf271', get_index_2, add, None)
        return store


buf272: SchedulerNode(ComputedBuffer)
buf272.writes = [MemoryDep(name='buf272', index=c0, size=(1024,))]
buf272.unmet_dependencies = [MemoryDep(name='buf269', index=c0, size=(1024,))]
buf272.met_dependencies = [MemoryDep(name='primals_262', index=c0, size=(1024,))]
buf272.group.device = cpu
buf272.group.iteration = ((1024,), ())
buf272.sizes = ([1024], [])
class buf272_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.032258064516129, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_262', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf272', get_index_2, add, None)
        return store


buf273: SchedulerNode(ComputedBuffer)
buf273.writes = [MemoryDep(name='buf273', index=c0, size=(32768,))]
buf273.unmet_dependencies = 
    [   MemoryDep(name='buf249', index=c0, size=(32768,)),
        MemoryDep(name='buf266', index=c0, size=(32768,)),
        MemoryDep(name='buf268', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='buf269', index=c1, size=(8, 1024, 4))]
buf273.met_dependencies = 
    [   MemoryDep(name='primals_101', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='primals_102', index=c1, size=(8, 1024, 4))]
buf273.group.device = cpu
buf273.group.iteration = ((8, 1024, 4), ())
buf273.sizes = ([8, 1024, 4], [])
class buf273_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf268', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf269', get_index_2)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_101', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_102', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf249', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf273', get_index_6, relu, None)
        return store


buf274: ExternKernelSchedulerNode(Convolution)
buf274.writes = [StarDep(name='buf274')]
buf274.unmet_dependencies = [StarDep(name='buf273')]
buf274.met_dependencies = [StarDep(name='primals_103')]
buf274.node.kernel = aten.convolution


buf275: SchedulerNode(ComputedBuffer)
buf275.writes = 
    [   MemoryDep(name='buf275', index=c0, size=(256, 32)),
        MemoryDep(name='buf275', index=c0, size=(256,))]
buf275.unmet_dependencies = [MemoryDep(name='buf274', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf275.met_dependencies = []
buf275.group.device = cpu
buf275.group.iteration = ((256,), (8, 4))
buf275.sizes = ([256], [8, 4])
class buf275_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf275', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf276: SchedulerNode(ComputedBuffer)
buf276.writes = [MemoryDep(name='buf276', index=c0, size=(256,))]
buf276.unmet_dependencies = [MemoryDep(name='buf275', index=c0, size=(256,))]
buf276.met_dependencies = []
buf276.group.device = cpu
buf276.group.iteration = ((256,), ())
buf276.sizes = ([256], [])
class buf276_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf276', get_index_1, div, None)
        return store


buf277: SchedulerNode(ComputedBuffer)
buf277.writes = 
    [   MemoryDep(name='buf277', index=c0, size=(256, 32)),
        MemoryDep(name='buf277', index=c0, size=(256,))]
buf277.unmet_dependencies = 
    [   MemoryDep(name='buf274', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='buf276', index=c0, size=(256, 32))]
buf277.met_dependencies = []
buf277.group.device = cpu
buf277.group.iteration = ((256,), (8, 4))
buf277.sizes = ([256], [8, 4])
class buf277_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf276', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf277', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf278: SchedulerNode(ComputedBuffer)
buf278.writes = [MemoryDep(name='buf278', index=c0, size=(256,))]
buf278.unmet_dependencies = [MemoryDep(name='buf277', index=c0, size=(256,))]
buf278.met_dependencies = []
buf278.group.device = cpu
buf278.group.iteration = ((256,), ())
buf278.sizes = ([256], [])
class buf278_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf278', get_index_1, rsqrt, None)
        return store


buf279: SchedulerNode(ComputedBuffer)
buf279.writes = [MemoryDep(name='buf279', index=c0, size=(256,))]
buf279.unmet_dependencies = [MemoryDep(name='buf276', index=c0, size=(256,))]
buf279.met_dependencies = [MemoryDep(name='primals_264', index=c0, size=(256,))]
buf279.group.device = cpu
buf279.group.iteration = ((256,), ())
buf279.sizes = ([256], [])
class buf279_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_264', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf279', get_index_2, add, None)
        return store


buf280: SchedulerNode(ComputedBuffer)
buf280.writes = [MemoryDep(name='buf280', index=c0, size=(256,))]
buf280.unmet_dependencies = [MemoryDep(name='buf277', index=c0, size=(256,))]
buf280.met_dependencies = [MemoryDep(name='primals_265', index=c0, size=(256,))]
buf280.group.device = cpu
buf280.group.iteration = ((256,), ())
buf280.sizes = ([256], [])
class buf280_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.032258064516129, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_265', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf280', get_index_2, add, None)
        return store


buf281: SchedulerNode(ComputedBuffer)
buf281.writes = [MemoryDep(name='buf281', index=c0, size=(8192,))]
buf281.unmet_dependencies = 
    [   MemoryDep(name='buf274', index=c0, size=(8192,)),
        MemoryDep(name='buf276', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf277', index=c1, size=(8, 256, 4))]
buf281.met_dependencies = 
    [   MemoryDep(name='primals_104', index=c1, size=(8, 256, 4)),
        MemoryDep(name='primals_105', index=c1, size=(8, 256, 4))]
buf281.group.device = cpu
buf281.group.iteration = ((8, 256, 4), ())
buf281.sizes = ([8, 256, 4], [])
class buf281_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf276', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf277', get_index_2)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_104', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_105', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf281', get_index_5, relu, None)
        return store


buf282: ExternKernelSchedulerNode(Convolution)
buf282.writes = [StarDep(name='buf282')]
buf282.unmet_dependencies = [StarDep(name='buf281')]
buf282.met_dependencies = [StarDep(name='primals_106')]
buf282.node.kernel = aten.convolution


buf283: SchedulerNode(ComputedBuffer)
buf283.writes = 
    [   MemoryDep(name='buf283', index=c0, size=(256, 32)),
        MemoryDep(name='buf283', index=c0, size=(256,))]
buf283.unmet_dependencies = [MemoryDep(name='buf282', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf283.met_dependencies = []
buf283.group.device = cpu
buf283.group.iteration = ((256,), (8, 4))
buf283.sizes = ([256], [8, 4])
class buf283_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf282', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf283', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf284: SchedulerNode(ComputedBuffer)
buf284.writes = [MemoryDep(name='buf284', index=c0, size=(256,))]
buf284.unmet_dependencies = [MemoryDep(name='buf283', index=c0, size=(256,))]
buf284.met_dependencies = []
buf284.group.device = cpu
buf284.group.iteration = ((256,), ())
buf284.sizes = ([256], [])
class buf284_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf284', get_index_1, div, None)
        return store


buf285: SchedulerNode(ComputedBuffer)
buf285.writes = 
    [   MemoryDep(name='buf285', index=c0, size=(256, 32)),
        MemoryDep(name='buf285', index=c0, size=(256,))]
buf285.unmet_dependencies = 
    [   MemoryDep(name='buf282', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='buf284', index=c0, size=(256, 32))]
buf285.met_dependencies = []
buf285.group.device = cpu
buf285.group.iteration = ((256,), (8, 4))
buf285.sizes = ([256], [8, 4])
class buf285_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf282', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf284', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf285', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf286: SchedulerNode(ComputedBuffer)
buf286.writes = [MemoryDep(name='buf286', index=c0, size=(256,))]
buf286.unmet_dependencies = [MemoryDep(name='buf285', index=c0, size=(256,))]
buf286.met_dependencies = []
buf286.group.device = cpu
buf286.group.iteration = ((256,), ())
buf286.sizes = ([256], [])
class buf286_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf286', get_index_1, rsqrt, None)
        return store


buf287: SchedulerNode(ComputedBuffer)
buf287.writes = [MemoryDep(name='buf287', index=c0, size=(256,))]
buf287.unmet_dependencies = [MemoryDep(name='buf284', index=c0, size=(256,))]
buf287.met_dependencies = [MemoryDep(name='primals_267', index=c0, size=(256,))]
buf287.group.device = cpu
buf287.group.iteration = ((256,), ())
buf287.sizes = ([256], [])
class buf287_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_267', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf287', get_index_2, add, None)
        return store


buf288: SchedulerNode(ComputedBuffer)
buf288.writes = [MemoryDep(name='buf288', index=c0, size=(256,))]
buf288.unmet_dependencies = [MemoryDep(name='buf285', index=c0, size=(256,))]
buf288.met_dependencies = [MemoryDep(name='primals_268', index=c0, size=(256,))]
buf288.group.device = cpu
buf288.group.iteration = ((256,), ())
buf288.sizes = ([256], [])
class buf288_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.032258064516129, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_268', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf288', get_index_2, add, None)
        return store


buf289: SchedulerNode(ComputedBuffer)
buf289.writes = [MemoryDep(name='buf289', index=c0, size=(8192,))]
buf289.unmet_dependencies = 
    [   MemoryDep(name='buf282', index=c0, size=(8192,)),
        MemoryDep(name='buf284', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf285', index=c1, size=(8, 256, 4))]
buf289.met_dependencies = 
    [   MemoryDep(name='primals_107', index=c1, size=(8, 256, 4)),
        MemoryDep(name='primals_108', index=c1, size=(8, 256, 4))]
buf289.group.device = cpu
buf289.group.iteration = ((8, 256, 4), ())
buf289.sizes = ([8, 256, 4], [])
class buf289_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf282', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf284', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf285', get_index_2)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_107', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_108', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf289', get_index_5, relu, None)
        return store


buf290: ExternKernelSchedulerNode(Convolution)
buf290.writes = [StarDep(name='buf290')]
buf290.unmet_dependencies = [StarDep(name='buf289')]
buf290.met_dependencies = [StarDep(name='primals_109')]
buf290.node.kernel = aten.convolution


buf291: SchedulerNode(ComputedBuffer)
buf291.writes = 
    [   MemoryDep(name='buf291', index=c0, size=(1024, 32)),
        MemoryDep(name='buf291', index=c0, size=(1024,))]
buf291.unmet_dependencies = [MemoryDep(name='buf290', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf291.met_dependencies = []
buf291.group.device = cpu
buf291.group.iteration = ((1024,), (8, 4))
buf291.sizes = ([1024], [8, 4])
class buf291_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf291', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf292: SchedulerNode(ComputedBuffer)
buf292.writes = [MemoryDep(name='buf292', index=c0, size=(1024,))]
buf292.unmet_dependencies = [MemoryDep(name='buf291', index=c0, size=(1024,))]
buf292.met_dependencies = []
buf292.group.device = cpu
buf292.group.iteration = ((1024,), ())
buf292.sizes = ([1024], [])
class buf292_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf292', get_index_1, div, None)
        return store


buf293: SchedulerNode(ComputedBuffer)
buf293.writes = 
    [   MemoryDep(name='buf293', index=c0, size=(1024, 32)),
        MemoryDep(name='buf293', index=c0, size=(1024,))]
buf293.unmet_dependencies = 
    [   MemoryDep(name='buf290', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='buf292', index=c0, size=(1024, 32))]
buf293.met_dependencies = []
buf293.group.device = cpu
buf293.group.iteration = ((1024,), (8, 4))
buf293.sizes = ([1024], [8, 4])
class buf293_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf292', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf293', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf294: SchedulerNode(ComputedBuffer)
buf294.writes = [MemoryDep(name='buf294', index=c0, size=(1024,))]
buf294.unmet_dependencies = [MemoryDep(name='buf293', index=c0, size=(1024,))]
buf294.met_dependencies = []
buf294.group.device = cpu
buf294.group.iteration = ((1024,), ())
buf294.sizes = ([1024], [])
class buf294_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf294', get_index_1, rsqrt, None)
        return store


buf295: SchedulerNode(ComputedBuffer)
buf295.writes = [MemoryDep(name='buf295', index=c0, size=(1024,))]
buf295.unmet_dependencies = [MemoryDep(name='buf292', index=c0, size=(1024,))]
buf295.met_dependencies = [MemoryDep(name='primals_270', index=c0, size=(1024,))]
buf295.group.device = cpu
buf295.group.iteration = ((1024,), ())
buf295.sizes = ([1024], [])
class buf295_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_270', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf295', get_index_2, add, None)
        return store


buf296: SchedulerNode(ComputedBuffer)
buf296.writes = [MemoryDep(name='buf296', index=c0, size=(1024,))]
buf296.unmet_dependencies = [MemoryDep(name='buf293', index=c0, size=(1024,))]
buf296.met_dependencies = [MemoryDep(name='primals_271', index=c0, size=(1024,))]
buf296.group.device = cpu
buf296.group.iteration = ((1024,), ())
buf296.sizes = ([1024], [])
class buf296_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.032258064516129, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_271', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf296', get_index_2, add, None)
        return store


buf297: SchedulerNode(ComputedBuffer)
buf297.writes = [MemoryDep(name='buf297', index=c0, size=(32768,))]
buf297.unmet_dependencies = 
    [   MemoryDep(name='buf273', index=c0, size=(32768,)),
        MemoryDep(name='buf290', index=c0, size=(32768,)),
        MemoryDep(name='buf292', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='buf293', index=c1, size=(8, 1024, 4))]
buf297.met_dependencies = 
    [   MemoryDep(name='primals_110', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='primals_111', index=c1, size=(8, 1024, 4))]
buf297.group.device = cpu
buf297.group.iteration = ((8, 1024, 4), ())
buf297.sizes = ([8, 1024, 4], [])
class buf297_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf292', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf293', get_index_2)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_110', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_111', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf273', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf297', get_index_6, relu, None)
        return store


buf298: ExternKernelSchedulerNode(Convolution)
buf298.writes = [StarDep(name='buf298')]
buf298.unmet_dependencies = [StarDep(name='buf297')]
buf298.met_dependencies = [StarDep(name='primals_112')]
buf298.node.kernel = aten.convolution


buf299: SchedulerNode(ComputedBuffer)
buf299.writes = 
    [   MemoryDep(name='buf299', index=c0, size=(256, 32)),
        MemoryDep(name='buf299', index=c0, size=(256,))]
buf299.unmet_dependencies = [MemoryDep(name='buf298', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf299.met_dependencies = []
buf299.group.device = cpu
buf299.group.iteration = ((256,), (8, 4))
buf299.sizes = ([256], [8, 4])
class buf299_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf299', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf300: SchedulerNode(ComputedBuffer)
buf300.writes = [MemoryDep(name='buf300', index=c0, size=(256,))]
buf300.unmet_dependencies = [MemoryDep(name='buf299', index=c0, size=(256,))]
buf300.met_dependencies = []
buf300.group.device = cpu
buf300.group.iteration = ((256,), ())
buf300.sizes = ([256], [])
class buf300_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf299', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf300', get_index_1, div, None)
        return store


buf301: SchedulerNode(ComputedBuffer)
buf301.writes = 
    [   MemoryDep(name='buf301', index=c0, size=(256, 32)),
        MemoryDep(name='buf301', index=c0, size=(256,))]
buf301.unmet_dependencies = 
    [   MemoryDep(name='buf298', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='buf300', index=c0, size=(256, 32))]
buf301.met_dependencies = []
buf301.group.device = cpu
buf301.group.iteration = ((256,), (8, 4))
buf301.sizes = ([256], [8, 4])
class buf301_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf300', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf301', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf302: SchedulerNode(ComputedBuffer)
buf302.writes = [MemoryDep(name='buf302', index=c0, size=(256,))]
buf302.unmet_dependencies = [MemoryDep(name='buf301', index=c0, size=(256,))]
buf302.met_dependencies = []
buf302.group.device = cpu
buf302.group.iteration = ((256,), ())
buf302.sizes = ([256], [])
class buf302_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf301', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf302', get_index_1, rsqrt, None)
        return store


buf303: SchedulerNode(ComputedBuffer)
buf303.writes = [MemoryDep(name='buf303', index=c0, size=(256,))]
buf303.unmet_dependencies = [MemoryDep(name='buf300', index=c0, size=(256,))]
buf303.met_dependencies = [MemoryDep(name='primals_273', index=c0, size=(256,))]
buf303.group.device = cpu
buf303.group.iteration = ((256,), ())
buf303.sizes = ([256], [])
class buf303_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_273', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf303', get_index_2, add, None)
        return store


buf304: SchedulerNode(ComputedBuffer)
buf304.writes = [MemoryDep(name='buf304', index=c0, size=(256,))]
buf304.unmet_dependencies = [MemoryDep(name='buf301', index=c0, size=(256,))]
buf304.met_dependencies = [MemoryDep(name='primals_274', index=c0, size=(256,))]
buf304.group.device = cpu
buf304.group.iteration = ((256,), ())
buf304.sizes = ([256], [])
class buf304_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf301', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.032258064516129, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_274', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf304', get_index_2, add, None)
        return store


buf305: SchedulerNode(ComputedBuffer)
buf305.writes = [MemoryDep(name='buf305', index=c0, size=(8192,))]
buf305.unmet_dependencies = 
    [   MemoryDep(name='buf298', index=c0, size=(8192,)),
        MemoryDep(name='buf300', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf301', index=c1, size=(8, 256, 4))]
buf305.met_dependencies = 
    [   MemoryDep(name='primals_113', index=c1, size=(8, 256, 4)),
        MemoryDep(name='primals_114', index=c1, size=(8, 256, 4))]
buf305.group.device = cpu
buf305.group.iteration = ((8, 256, 4), ())
buf305.sizes = ([8, 256, 4], [])
class buf305_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf300', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf301', get_index_2)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_113', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_114', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf305', get_index_5, relu, None)
        return store


buf306: ExternKernelSchedulerNode(Convolution)
buf306.writes = [StarDep(name='buf306')]
buf306.unmet_dependencies = [StarDep(name='buf305')]
buf306.met_dependencies = [StarDep(name='primals_115')]
buf306.node.kernel = aten.convolution


buf307: SchedulerNode(ComputedBuffer)
buf307.writes = 
    [   MemoryDep(name='buf307', index=c0, size=(256, 32)),
        MemoryDep(name='buf307', index=c0, size=(256,))]
buf307.unmet_dependencies = [MemoryDep(name='buf306', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf307.met_dependencies = []
buf307.group.device = cpu
buf307.group.iteration = ((256,), (8, 4))
buf307.sizes = ([256], [8, 4])
class buf307_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf307', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf308: SchedulerNode(ComputedBuffer)
buf308.writes = [MemoryDep(name='buf308', index=c0, size=(256,))]
buf308.unmet_dependencies = [MemoryDep(name='buf307', index=c0, size=(256,))]
buf308.met_dependencies = []
buf308.group.device = cpu
buf308.group.iteration = ((256,), ())
buf308.sizes = ([256], [])
class buf308_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf308', get_index_1, div, None)
        return store


buf309: SchedulerNode(ComputedBuffer)
buf309.writes = 
    [   MemoryDep(name='buf309', index=c0, size=(256, 32)),
        MemoryDep(name='buf309', index=c0, size=(256,))]
buf309.unmet_dependencies = 
    [   MemoryDep(name='buf306', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='buf308', index=c0, size=(256, 32))]
buf309.met_dependencies = []
buf309.group.device = cpu
buf309.group.iteration = ((256,), (8, 4))
buf309.sizes = ([256], [8, 4])
class buf309_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf308', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf309', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf310: SchedulerNode(ComputedBuffer)
buf310.writes = [MemoryDep(name='buf310', index=c0, size=(256,))]
buf310.unmet_dependencies = [MemoryDep(name='buf309', index=c0, size=(256,))]
buf310.met_dependencies = []
buf310.group.device = cpu
buf310.group.iteration = ((256,), ())
buf310.sizes = ([256], [])
class buf310_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf310', get_index_1, rsqrt, None)
        return store


buf311: SchedulerNode(ComputedBuffer)
buf311.writes = [MemoryDep(name='buf311', index=c0, size=(256,))]
buf311.unmet_dependencies = [MemoryDep(name='buf308', index=c0, size=(256,))]
buf311.met_dependencies = [MemoryDep(name='primals_276', index=c0, size=(256,))]
buf311.group.device = cpu
buf311.group.iteration = ((256,), ())
buf311.sizes = ([256], [])
class buf311_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_276', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf311', get_index_2, add, None)
        return store


buf312: SchedulerNode(ComputedBuffer)
buf312.writes = [MemoryDep(name='buf312', index=c0, size=(256,))]
buf312.unmet_dependencies = [MemoryDep(name='buf309', index=c0, size=(256,))]
buf312.met_dependencies = [MemoryDep(name='primals_277', index=c0, size=(256,))]
buf312.group.device = cpu
buf312.group.iteration = ((256,), ())
buf312.sizes = ([256], [])
class buf312_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.032258064516129, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_277', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf312', get_index_2, add, None)
        return store


buf313: SchedulerNode(ComputedBuffer)
buf313.writes = [MemoryDep(name='buf313', index=c0, size=(8192,))]
buf313.unmet_dependencies = 
    [   MemoryDep(name='buf306', index=c0, size=(8192,)),
        MemoryDep(name='buf308', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf309', index=c1, size=(8, 256, 4))]
buf313.met_dependencies = 
    [   MemoryDep(name='primals_116', index=c1, size=(8, 256, 4)),
        MemoryDep(name='primals_117', index=c1, size=(8, 256, 4))]
buf313.group.device = cpu
buf313.group.iteration = ((8, 256, 4), ())
buf313.sizes = ([8, 256, 4], [])
class buf313_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf308', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf309', get_index_2)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_116', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_117', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf313', get_index_5, relu, None)
        return store


buf314: ExternKernelSchedulerNode(Convolution)
buf314.writes = [StarDep(name='buf314')]
buf314.unmet_dependencies = [StarDep(name='buf313')]
buf314.met_dependencies = [StarDep(name='primals_118')]
buf314.node.kernel = aten.convolution


buf315: SchedulerNode(ComputedBuffer)
buf315.writes = 
    [   MemoryDep(name='buf315', index=c0, size=(1024, 32)),
        MemoryDep(name='buf315', index=c0, size=(1024,))]
buf315.unmet_dependencies = [MemoryDep(name='buf314', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf315.met_dependencies = []
buf315.group.device = cpu
buf315.group.iteration = ((1024,), (8, 4))
buf315.sizes = ([1024], [8, 4])
class buf315_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf315', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf316: SchedulerNode(ComputedBuffer)
buf316.writes = [MemoryDep(name='buf316', index=c0, size=(1024,))]
buf316.unmet_dependencies = [MemoryDep(name='buf315', index=c0, size=(1024,))]
buf316.met_dependencies = []
buf316.group.device = cpu
buf316.group.iteration = ((1024,), ())
buf316.sizes = ([1024], [])
class buf316_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf316', get_index_1, div, None)
        return store


buf317: SchedulerNode(ComputedBuffer)
buf317.writes = 
    [   MemoryDep(name='buf317', index=c0, size=(1024, 32)),
        MemoryDep(name='buf317', index=c0, size=(1024,))]
buf317.unmet_dependencies = 
    [   MemoryDep(name='buf314', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='buf316', index=c0, size=(1024, 32))]
buf317.met_dependencies = []
buf317.group.device = cpu
buf317.group.iteration = ((1024,), (8, 4))
buf317.sizes = ([1024], [8, 4])
class buf317_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf316', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf317', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf318: SchedulerNode(ComputedBuffer)
buf318.writes = [MemoryDep(name='buf318', index=c0, size=(1024,))]
buf318.unmet_dependencies = [MemoryDep(name='buf317', index=c0, size=(1024,))]
buf318.met_dependencies = []
buf318.group.device = cpu
buf318.group.iteration = ((1024,), ())
buf318.sizes = ([1024], [])
class buf318_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf318', get_index_1, rsqrt, None)
        return store


buf319: SchedulerNode(ComputedBuffer)
buf319.writes = [MemoryDep(name='buf319', index=c0, size=(1024,))]
buf319.unmet_dependencies = [MemoryDep(name='buf316', index=c0, size=(1024,))]
buf319.met_dependencies = [MemoryDep(name='primals_279', index=c0, size=(1024,))]
buf319.group.device = cpu
buf319.group.iteration = ((1024,), ())
buf319.sizes = ([1024], [])
class buf319_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf316', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_279', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf319', get_index_2, add, None)
        return store


buf320: SchedulerNode(ComputedBuffer)
buf320.writes = [MemoryDep(name='buf320', index=c0, size=(1024,))]
buf320.unmet_dependencies = [MemoryDep(name='buf317', index=c0, size=(1024,))]
buf320.met_dependencies = [MemoryDep(name='primals_280', index=c0, size=(1024,))]
buf320.group.device = cpu
buf320.group.iteration = ((1024,), ())
buf320.sizes = ([1024], [])
class buf320_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.032258064516129, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_280', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf320', get_index_2, add, None)
        return store


buf321: SchedulerNode(ComputedBuffer)
buf321.writes = [MemoryDep(name='buf321', index=c0, size=(32768,))]
buf321.unmet_dependencies = 
    [   MemoryDep(name='buf297', index=c0, size=(32768,)),
        MemoryDep(name='buf314', index=c0, size=(32768,)),
        MemoryDep(name='buf316', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='buf317', index=c1, size=(8, 1024, 4))]
buf321.met_dependencies = 
    [   MemoryDep(name='primals_119', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='primals_120', index=c1, size=(8, 1024, 4))]
buf321.group.device = cpu
buf321.group.iteration = ((8, 1024, 4), ())
buf321.sizes = ([8, 1024, 4], [])
class buf321_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf316', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf317', get_index_2)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_119', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_120', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf297', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf321', get_index_6, relu, None)
        return store


buf322: ExternKernelSchedulerNode(Convolution)
buf322.writes = [StarDep(name='buf322')]
buf322.unmet_dependencies = [StarDep(name='buf321')]
buf322.met_dependencies = [StarDep(name='primals_121')]
buf322.node.kernel = aten.convolution


buf323: SchedulerNode(ComputedBuffer)
buf323.writes = 
    [   MemoryDep(name='buf323', index=c0, size=(256, 32)),
        MemoryDep(name='buf323', index=c0, size=(256,))]
buf323.unmet_dependencies = [MemoryDep(name='buf322', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf323.met_dependencies = []
buf323.group.device = cpu
buf323.group.iteration = ((256,), (8, 4))
buf323.sizes = ([256], [8, 4])
class buf323_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf323', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf324: SchedulerNode(ComputedBuffer)
buf324.writes = [MemoryDep(name='buf324', index=c0, size=(256,))]
buf324.unmet_dependencies = [MemoryDep(name='buf323', index=c0, size=(256,))]
buf324.met_dependencies = []
buf324.group.device = cpu
buf324.group.iteration = ((256,), ())
buf324.sizes = ([256], [])
class buf324_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf324', get_index_1, div, None)
        return store


buf325: SchedulerNode(ComputedBuffer)
buf325.writes = 
    [   MemoryDep(name='buf325', index=c0, size=(256, 32)),
        MemoryDep(name='buf325', index=c0, size=(256,))]
buf325.unmet_dependencies = 
    [   MemoryDep(name='buf322', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='buf324', index=c0, size=(256, 32))]
buf325.met_dependencies = []
buf325.group.device = cpu
buf325.group.iteration = ((256,), (8, 4))
buf325.sizes = ([256], [8, 4])
class buf325_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf324', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf325', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf326: SchedulerNode(ComputedBuffer)
buf326.writes = [MemoryDep(name='buf326', index=c0, size=(256,))]
buf326.unmet_dependencies = [MemoryDep(name='buf325', index=c0, size=(256,))]
buf326.met_dependencies = []
buf326.group.device = cpu
buf326.group.iteration = ((256,), ())
buf326.sizes = ([256], [])
class buf326_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf325', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf326', get_index_1, rsqrt, None)
        return store


buf327: SchedulerNode(ComputedBuffer)
buf327.writes = [MemoryDep(name='buf327', index=c0, size=(256,))]
buf327.unmet_dependencies = [MemoryDep(name='buf324', index=c0, size=(256,))]
buf327.met_dependencies = [MemoryDep(name='primals_282', index=c0, size=(256,))]
buf327.group.device = cpu
buf327.group.iteration = ((256,), ())
buf327.sizes = ([256], [])
class buf327_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf324', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_282', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf327', get_index_2, add, None)
        return store


buf328: SchedulerNode(ComputedBuffer)
buf328.writes = [MemoryDep(name='buf328', index=c0, size=(256,))]
buf328.unmet_dependencies = [MemoryDep(name='buf325', index=c0, size=(256,))]
buf328.met_dependencies = [MemoryDep(name='primals_283', index=c0, size=(256,))]
buf328.group.device = cpu
buf328.group.iteration = ((256,), ())
buf328.sizes = ([256], [])
class buf328_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf325', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.032258064516129, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_283', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf328', get_index_2, add, None)
        return store


buf329: SchedulerNode(ComputedBuffer)
buf329.writes = [MemoryDep(name='buf329', index=c0, size=(8192,))]
buf329.unmet_dependencies = 
    [   MemoryDep(name='buf322', index=c0, size=(8192,)),
        MemoryDep(name='buf324', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf325', index=c1, size=(8, 256, 4))]
buf329.met_dependencies = 
    [   MemoryDep(name='primals_122', index=c1, size=(8, 256, 4)),
        MemoryDep(name='primals_123', index=c1, size=(8, 256, 4))]
buf329.group.device = cpu
buf329.group.iteration = ((8, 256, 4), ())
buf329.sizes = ([8, 256, 4], [])
class buf329_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf324', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf325', get_index_2)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_122', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_123', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf329', get_index_5, relu, None)
        return store


buf330: ExternKernelSchedulerNode(Convolution)
buf330.writes = [StarDep(name='buf330')]
buf330.unmet_dependencies = [StarDep(name='buf329')]
buf330.met_dependencies = [StarDep(name='primals_124')]
buf330.node.kernel = aten.convolution


buf331: SchedulerNode(ComputedBuffer)
buf331.writes = 
    [   MemoryDep(name='buf331', index=c0, size=(256, 32)),
        MemoryDep(name='buf331', index=c0, size=(256,))]
buf331.unmet_dependencies = [MemoryDep(name='buf330', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4))]
buf331.met_dependencies = []
buf331.group.device = cpu
buf331.group.iteration = ((256,), (8, 4))
buf331.sizes = ([256], [8, 4])
class buf331_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf330', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf331', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf332: SchedulerNode(ComputedBuffer)
buf332.writes = [MemoryDep(name='buf332', index=c0, size=(256,))]
buf332.unmet_dependencies = [MemoryDep(name='buf331', index=c0, size=(256,))]
buf332.met_dependencies = []
buf332.group.device = cpu
buf332.group.iteration = ((256,), ())
buf332.sizes = ([256], [])
class buf332_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf332', get_index_1, div, None)
        return store


buf333: SchedulerNode(ComputedBuffer)
buf333.writes = 
    [   MemoryDep(name='buf333', index=c0, size=(256, 32)),
        MemoryDep(name='buf333', index=c0, size=(256,))]
buf333.unmet_dependencies = 
    [   MemoryDep(name='buf330', index=4*c0 + 1024*c1 + c2, size=(256, 8, 4)),
        MemoryDep(name='buf332', index=c0, size=(256, 32))]
buf333.met_dependencies = []
buf333.group.device = cpu
buf333.group.iteration = ((256,), (8, 4))
buf333.sizes = ([256], [8, 4])
class buf333_loop_body:
    var_ranges = {z0: 256, z1: 8, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf330', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf332', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf333', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf334: SchedulerNode(ComputedBuffer)
buf334.writes = [MemoryDep(name='buf334', index=c0, size=(256,))]
buf334.unmet_dependencies = [MemoryDep(name='buf333', index=c0, size=(256,))]
buf334.met_dependencies = []
buf334.group.device = cpu
buf334.group.iteration = ((256,), ())
buf334.sizes = ([256], [])
class buf334_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf334', get_index_1, rsqrt, None)
        return store


buf335: SchedulerNode(ComputedBuffer)
buf335.writes = [MemoryDep(name='buf335', index=c0, size=(256,))]
buf335.unmet_dependencies = [MemoryDep(name='buf332', index=c0, size=(256,))]
buf335.met_dependencies = [MemoryDep(name='primals_285', index=c0, size=(256,))]
buf335.group.device = cpu
buf335.group.iteration = ((256,), ())
buf335.sizes = ([256], [])
class buf335_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_285', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf335', get_index_2, add, None)
        return store


buf336: SchedulerNode(ComputedBuffer)
buf336.writes = [MemoryDep(name='buf336', index=c0, size=(256,))]
buf336.unmet_dependencies = [MemoryDep(name='buf333', index=c0, size=(256,))]
buf336.met_dependencies = [MemoryDep(name='primals_286', index=c0, size=(256,))]
buf336.group.device = cpu
buf336.group.iteration = ((256,), ())
buf336.sizes = ([256], [])
class buf336_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.032258064516129, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_286', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf336', get_index_2, add, None)
        return store


buf337: SchedulerNode(ComputedBuffer)
buf337.writes = [MemoryDep(name='buf337', index=c0, size=(8192,))]
buf337.unmet_dependencies = 
    [   MemoryDep(name='buf330', index=c0, size=(8192,)),
        MemoryDep(name='buf332', index=c1, size=(8, 256, 4)),
        MemoryDep(name='buf333', index=c1, size=(8, 256, 4))]
buf337.met_dependencies = 
    [   MemoryDep(name='primals_125', index=c1, size=(8, 256, 4)),
        MemoryDep(name='primals_126', index=c1, size=(8, 256, 4))]
buf337.group.device = cpu
buf337.group.iteration = ((8, 256, 4), ())
buf337.sizes = ([8, 256, 4], [])
class buf337_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf330', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf332', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf333', get_index_2)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_125', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_126', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf337', get_index_5, relu, None)
        return store


buf338: ExternKernelSchedulerNode(Convolution)
buf338.writes = [StarDep(name='buf338')]
buf338.unmet_dependencies = [StarDep(name='buf337')]
buf338.met_dependencies = [StarDep(name='primals_127')]
buf338.node.kernel = aten.convolution


buf339: SchedulerNode(ComputedBuffer)
buf339.writes = 
    [   MemoryDep(name='buf339', index=c0, size=(1024, 32)),
        MemoryDep(name='buf339', index=c0, size=(1024,))]
buf339.unmet_dependencies = [MemoryDep(name='buf338', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4))]
buf339.met_dependencies = []
buf339.group.device = cpu
buf339.group.iteration = ((1024,), (8, 4))
buf339.sizes = ([1024], [8, 4])
class buf339_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf338', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf339', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf340: SchedulerNode(ComputedBuffer)
buf340.writes = [MemoryDep(name='buf340', index=c0, size=(1024,))]
buf340.unmet_dependencies = [MemoryDep(name='buf339', index=c0, size=(1024,))]
buf340.met_dependencies = []
buf340.group.device = cpu
buf340.group.iteration = ((1024,), ())
buf340.sizes = ([1024], [])
class buf340_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf340', get_index_1, div, None)
        return store


buf341: SchedulerNode(ComputedBuffer)
buf341.writes = 
    [   MemoryDep(name='buf341', index=c0, size=(1024, 32)),
        MemoryDep(name='buf341', index=c0, size=(1024,))]
buf341.unmet_dependencies = 
    [   MemoryDep(name='buf338', index=4*c0 + 4096*c1 + c2, size=(1024, 8, 4)),
        MemoryDep(name='buf340', index=c0, size=(1024, 32))]
buf341.met_dependencies = []
buf341.group.device = cpu
buf341.group.iteration = ((1024,), (8, 4))
buf341.sizes = ([1024], [8, 4])
class buf341_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf338', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf340', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf341', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf342: SchedulerNode(ComputedBuffer)
buf342.writes = [MemoryDep(name='buf342', index=c0, size=(1024,))]
buf342.unmet_dependencies = [MemoryDep(name='buf341', index=c0, size=(1024,))]
buf342.met_dependencies = []
buf342.group.device = cpu
buf342.group.iteration = ((1024,), ())
buf342.sizes = ([1024], [])
class buf342_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf341', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf342', get_index_1, rsqrt, None)
        return store


buf343: SchedulerNode(ComputedBuffer)
buf343.writes = [MemoryDep(name='buf343', index=c0, size=(1024,))]
buf343.unmet_dependencies = [MemoryDep(name='buf340', index=c0, size=(1024,))]
buf343.met_dependencies = [MemoryDep(name='primals_288', index=c0, size=(1024,))]
buf343.group.device = cpu
buf343.group.iteration = ((1024,), ())
buf343.sizes = ([1024], [])
class buf343_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_288', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf343', get_index_2, add, None)
        return store


buf344: SchedulerNode(ComputedBuffer)
buf344.writes = [MemoryDep(name='buf344', index=c0, size=(1024,))]
buf344.unmet_dependencies = [MemoryDep(name='buf341', index=c0, size=(1024,))]
buf344.met_dependencies = [MemoryDep(name='primals_289', index=c0, size=(1024,))]
buf344.group.device = cpu
buf344.group.iteration = ((1024,), ())
buf344.sizes = ([1024], [])
class buf344_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf341', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.032258064516129, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_289', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf344', get_index_2, add, None)
        return store


buf345: SchedulerNode(ComputedBuffer)
buf345.writes = [MemoryDep(name='buf345', index=c0, size=(32768,))]
buf345.unmet_dependencies = 
    [   MemoryDep(name='buf321', index=c0, size=(32768,)),
        MemoryDep(name='buf338', index=c0, size=(32768,)),
        MemoryDep(name='buf340', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='buf341', index=c1, size=(8, 1024, 4))]
buf345.met_dependencies = 
    [   MemoryDep(name='primals_128', index=c1, size=(8, 1024, 4)),
        MemoryDep(name='primals_129', index=c1, size=(8, 1024, 4))]
buf345.group.device = cpu
buf345.group.iteration = ((8, 1024, 4), ())
buf345.sizes = ([8, 1024, 4], [])
class buf345_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf338', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf340', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf341', get_index_2)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_128', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_129', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf321', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf345', get_index_6, relu, None)
        return store


buf346: ExternKernelSchedulerNode(Convolution)
buf346.writes = [StarDep(name='buf346')]
buf346.unmet_dependencies = [StarDep(name='buf345')]
buf346.met_dependencies = [StarDep(name='primals_130')]
buf346.node.kernel = aten.convolution


buf347: SchedulerNode(ComputedBuffer)
buf347.writes = 
    [   MemoryDep(name='buf347', index=c0, size=(512, 32)),
        MemoryDep(name='buf347', index=c0, size=(512,))]
buf347.unmet_dependencies = [MemoryDep(name='buf346', index=4*c0 + 2048*c1 + c2, size=(512, 8, 4))]
buf347.met_dependencies = []
buf347.group.device = cpu
buf347.group.iteration = ((512,), (8, 4))
buf347.sizes = ([512], [8, 4])
class buf347_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 4}
    index0 = 4*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf347', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf348: SchedulerNode(ComputedBuffer)
buf348.writes = [MemoryDep(name='buf348', index=c0, size=(512,))]
buf348.unmet_dependencies = [MemoryDep(name='buf347', index=c0, size=(512,))]
buf348.met_dependencies = []
buf348.group.device = cpu
buf348.group.iteration = ((512,), ())
buf348.sizes = ([512], [])
class buf348_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf348', get_index_1, div, None)
        return store


buf349: SchedulerNode(ComputedBuffer)
buf349.writes = 
    [   MemoryDep(name='buf349', index=c0, size=(512, 32)),
        MemoryDep(name='buf349', index=c0, size=(512,))]
buf349.unmet_dependencies = 
    [   MemoryDep(name='buf346', index=4*c0 + 2048*c1 + c2, size=(512, 8, 4)),
        MemoryDep(name='buf348', index=c0, size=(512, 32))]
buf349.met_dependencies = []
buf349.group.device = cpu
buf349.group.iteration = ((512,), (8, 4))
buf349.sizes = ([512], [8, 4])
class buf349_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 4}
    index0 = 4*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf348', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf349', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf350: SchedulerNode(ComputedBuffer)
buf350.writes = [MemoryDep(name='buf350', index=c0, size=(512,))]
buf350.unmet_dependencies = [MemoryDep(name='buf349', index=c0, size=(512,))]
buf350.met_dependencies = []
buf350.group.device = cpu
buf350.group.iteration = ((512,), ())
buf350.sizes = ([512], [])
class buf350_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf349', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf350', get_index_1, rsqrt, None)
        return store


buf351: SchedulerNode(ComputedBuffer)
buf351.writes = [MemoryDep(name='buf351', index=c0, size=(512,))]
buf351.unmet_dependencies = [MemoryDep(name='buf348', index=c0, size=(512,))]
buf351.met_dependencies = [MemoryDep(name='primals_291', index=c0, size=(512,))]
buf351.group.device = cpu
buf351.group.iteration = ((512,), ())
buf351.sizes = ([512], [])
class buf351_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_291', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf351', get_index_2, add, None)
        return store


buf352: SchedulerNode(ComputedBuffer)
buf352.writes = [MemoryDep(name='buf352', index=c0, size=(512,))]
buf352.unmet_dependencies = [MemoryDep(name='buf349', index=c0, size=(512,))]
buf352.met_dependencies = [MemoryDep(name='primals_292', index=c0, size=(512,))]
buf352.group.device = cpu
buf352.group.iteration = ((512,), ())
buf352.sizes = ([512], [])
class buf352_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf349', get_index)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.032258064516129, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_292', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf352', get_index_2, add, None)
        return store


buf353: SchedulerNode(ComputedBuffer)
buf353.writes = [MemoryDep(name='buf353', index=c0, size=(16384,))]
buf353.unmet_dependencies = 
    [   MemoryDep(name='buf346', index=c0, size=(16384,)),
        MemoryDep(name='buf348', index=c1, size=(8, 512, 4)),
        MemoryDep(name='buf349', index=c1, size=(8, 512, 4))]
buf353.met_dependencies = 
    [   MemoryDep(name='primals_131', index=c1, size=(8, 512, 4)),
        MemoryDep(name='primals_132', index=c1, size=(8, 512, 4))]
buf353.group.device = cpu
buf353.group.iteration = ((8, 512, 4), ())
buf353.sizes = ([8, 512, 4], [])
class buf353_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 4}
    index0 = 2048*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf348', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf349', get_index_2)
        constant = ops.constant(32, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_131', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_132', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf353', get_index_5, relu, None)
        return store


buf354: ExternKernelSchedulerNode(Convolution)
buf354.writes = [StarDep(name='buf354')]
buf354.unmet_dependencies = [StarDep(name='buf353')]
buf354.met_dependencies = [StarDep(name='primals_133')]
buf354.node.kernel = aten.convolution


buf355: SchedulerNode(ComputedBuffer)
buf355.writes = 
    [   MemoryDep(name='buf355', index=c0, size=(512, 8)),
        MemoryDep(name='buf355', index=c0, size=(512,))]
buf355.unmet_dependencies = [MemoryDep(name='buf354', index=c0 + 512*c1, size=(512, 8))]
buf355.met_dependencies = []
buf355.group.device = cpu
buf355.group.iteration = ((512,), (8,))
buf355.sizes = ([512], [8])
class buf355_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf355', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf356: SchedulerNode(ComputedBuffer)
buf356.writes = [MemoryDep(name='buf356', index=c0, size=(512,))]
buf356.unmet_dependencies = [MemoryDep(name='buf355', index=c0, size=(512,))]
buf356.met_dependencies = []
buf356.group.device = cpu
buf356.group.iteration = ((512,), ())
buf356.sizes = ([512], [])
class buf356_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf356', get_index_1, div, None)
        return store


buf357: SchedulerNode(ComputedBuffer)
buf357.writes = 
    [   MemoryDep(name='buf357', index=c0, size=(512, 8)),
        MemoryDep(name='buf357', index=c0, size=(512,))]
buf357.unmet_dependencies = 
    [   MemoryDep(name='buf354', index=c0 + 512*c1, size=(512, 8)),
        MemoryDep(name='buf356', index=c0, size=(512, 8))]
buf357.met_dependencies = []
buf357.group.device = cpu
buf357.group.iteration = ((512,), (8,))
buf357.sizes = ([512], [8])
class buf357_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf356', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf357', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf358: SchedulerNode(ComputedBuffer)
buf358.writes = [MemoryDep(name='buf358', index=c0, size=(512,))]
buf358.unmet_dependencies = [MemoryDep(name='buf356', index=c0, size=(512,))]
buf358.met_dependencies = [MemoryDep(name='primals_294', index=c0, size=(512,))]
buf358.group.device = cpu
buf358.group.iteration = ((512,), ())
buf358.sizes = ([512], [])
class buf358_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf356', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_294', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf358', get_index_2, add, None)
        return store


buf359: SchedulerNode(ComputedBuffer)
buf359.writes = [MemoryDep(name='buf359', index=c0, size=(512,))]
buf359.unmet_dependencies = [MemoryDep(name='buf357', index=c0, size=(512,))]
buf359.met_dependencies = [MemoryDep(name='primals_295', index=c0, size=(512,))]
buf359.group.device = cpu
buf359.group.iteration = ((512,), ())
buf359.sizes = ([512], [])
class buf359_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.1428571428571428, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_295', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf359', get_index_2, add, None)
        return store


buf360: SchedulerNode(ComputedBuffer)
buf360.writes = [MemoryDep(name='buf360', index=c0, size=(4096,))]
buf360.unmet_dependencies = 
    [   MemoryDep(name='buf354', index=c0, size=(4096,)),
        MemoryDep(name='buf356', index=c1, size=(8, 512)),
        MemoryDep(name='buf357', index=c1, size=(8, 512))]
buf360.met_dependencies = 
    [   MemoryDep(name='primals_134', index=c1, size=(8, 512)),
        MemoryDep(name='primals_135', index=c1, size=(8, 512))]
buf360.group.device = cpu
buf360.group.iteration = ((8, 512), ())
buf360.sizes = ([8, 512], [])
class buf360_loop_body:
    var_ranges = {z0: 8, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf356', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf357', get_index_2)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_134', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_135', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf360', get_index_5, relu, None)
        return store


buf361: ExternKernelSchedulerNode(Convolution)
buf361.writes = [StarDep(name='buf361')]
buf361.unmet_dependencies = [StarDep(name='buf360')]
buf361.met_dependencies = [StarDep(name='primals_136')]
buf361.node.kernel = aten.convolution


buf362: SchedulerNode(ComputedBuffer)
buf362.writes = 
    [   MemoryDep(name='buf362', index=c0, size=(2048, 8)),
        MemoryDep(name='buf362', index=c0, size=(2048,))]
buf362.unmet_dependencies = [MemoryDep(name='buf361', index=c0 + 2048*c1, size=(2048, 8))]
buf362.met_dependencies = []
buf362.group.device = cpu
buf362.group.iteration = ((2048,), (8,))
buf362.sizes = ([2048], [8])
class buf362_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf362', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf363: SchedulerNode(ComputedBuffer)
buf363.writes = [MemoryDep(name='buf363', index=c0, size=(2048,))]
buf363.unmet_dependencies = [MemoryDep(name='buf362', index=c0, size=(2048,))]
buf363.met_dependencies = []
buf363.group.device = cpu
buf363.group.iteration = ((2048,), ())
buf363.sizes = ([2048], [])
class buf363_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf362', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf363', get_index_1, div, None)
        return store


buf364: SchedulerNode(ComputedBuffer)
buf364.writes = 
    [   MemoryDep(name='buf364', index=c0, size=(2048, 8)),
        MemoryDep(name='buf364', index=c0, size=(2048,))]
buf364.unmet_dependencies = 
    [   MemoryDep(name='buf361', index=c0 + 2048*c1, size=(2048, 8)),
        MemoryDep(name='buf363', index=c0, size=(2048, 8))]
buf364.met_dependencies = []
buf364.group.device = cpu
buf364.group.iteration = ((2048,), (8,))
buf364.sizes = ([2048], [8])
class buf364_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf363', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf364', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf365: SchedulerNode(ComputedBuffer)
buf365.writes = [MemoryDep(name='buf365', index=c0, size=(2048,))]
buf365.unmet_dependencies = [MemoryDep(name='buf363', index=c0, size=(2048,))]
buf365.met_dependencies = [MemoryDep(name='primals_297', index=c0, size=(2048,))]
buf365.group.device = cpu
buf365.group.iteration = ((2048,), ())
buf365.sizes = ([2048], [])
class buf365_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_297', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf365', get_index_2, add, None)
        return store


buf366: SchedulerNode(ComputedBuffer)
buf366.writes = [MemoryDep(name='buf366', index=c0, size=(2048,))]
buf366.unmet_dependencies = [MemoryDep(name='buf364', index=c0, size=(2048,))]
buf366.met_dependencies = [MemoryDep(name='primals_298', index=c0, size=(2048,))]
buf366.group.device = cpu
buf366.group.iteration = ((2048,), ())
buf366.sizes = ([2048], [])
class buf366_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf364', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.1428571428571428, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_298', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf366', get_index_2, add, None)
        return store


buf367: ExternKernelSchedulerNode(Convolution)
buf367.writes = [StarDep(name='buf367')]
buf367.unmet_dependencies = [StarDep(name='buf345')]
buf367.met_dependencies = [StarDep(name='primals_139')]
buf367.node.kernel = aten.convolution


buf368: SchedulerNode(ComputedBuffer)
buf368.writes = 
    [   MemoryDep(name='buf368', index=c0, size=(2048, 8)),
        MemoryDep(name='buf368', index=c0, size=(2048,))]
buf368.unmet_dependencies = [MemoryDep(name='buf367', index=c0 + 2048*c1, size=(2048, 8))]
buf368.met_dependencies = []
buf368.group.device = cpu
buf368.group.iteration = ((2048,), (8,))
buf368.sizes = ([2048], [8])
class buf368_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf368', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf369: SchedulerNode(ComputedBuffer)
buf369.writes = [MemoryDep(name='buf369', index=c0, size=(2048,))]
buf369.unmet_dependencies = [MemoryDep(name='buf368', index=c0, size=(2048,))]
buf369.met_dependencies = []
buf369.group.device = cpu
buf369.group.iteration = ((2048,), ())
buf369.sizes = ([2048], [])
class buf369_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf369', get_index_1, div, None)
        return store


buf370: SchedulerNode(ComputedBuffer)
buf370.writes = 
    [   MemoryDep(name='buf370', index=c0, size=(2048, 8)),
        MemoryDep(name='buf370', index=c0, size=(2048,))]
buf370.unmet_dependencies = 
    [   MemoryDep(name='buf367', index=c0 + 2048*c1, size=(2048, 8)),
        MemoryDep(name='buf369', index=c0, size=(2048, 8))]
buf370.met_dependencies = []
buf370.group.device = cpu
buf370.group.iteration = ((2048,), (8,))
buf370.sizes = ([2048], [8])
class buf370_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf369', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf370', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf371: SchedulerNode(ComputedBuffer)
buf371.writes = [MemoryDep(name='buf371', index=c0, size=(2048,))]
buf371.unmet_dependencies = [MemoryDep(name='buf369', index=c0, size=(2048,))]
buf371.met_dependencies = [MemoryDep(name='primals_300', index=c0, size=(2048,))]
buf371.group.device = cpu
buf371.group.iteration = ((2048,), ())
buf371.sizes = ([2048], [])
class buf371_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf369', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_300', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf371', get_index_2, add, None)
        return store


buf372: SchedulerNode(ComputedBuffer)
buf372.writes = [MemoryDep(name='buf372', index=c0, size=(2048,))]
buf372.unmet_dependencies = [MemoryDep(name='buf370', index=c0, size=(2048,))]
buf372.met_dependencies = [MemoryDep(name='primals_301', index=c0, size=(2048,))]
buf372.group.device = cpu
buf372.group.iteration = ((2048,), ())
buf372.sizes = ([2048], [])
class buf372_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.1428571428571428, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_301', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf372', get_index_2, add, None)
        return store


buf373: SchedulerNode(ComputedBuffer)
buf373.writes = [MemoryDep(name='buf373', index=c0, size=(16384,))]
buf373.unmet_dependencies = 
    [   MemoryDep(name='buf361', index=c0, size=(16384,)),
        MemoryDep(name='buf363', index=c1, size=(8, 2048)),
        MemoryDep(name='buf364', index=c1, size=(8, 2048)),
        MemoryDep(name='buf367', index=c0, size=(16384,)),
        MemoryDep(name='buf369', index=c1, size=(8, 2048)),
        MemoryDep(name='buf370', index=c1, size=(8, 2048))]
buf373.met_dependencies = 
    [   MemoryDep(name='primals_137', index=c1, size=(8, 2048)),
        MemoryDep(name='primals_138', index=c1, size=(8, 2048)),
        MemoryDep(name='primals_140', index=c1, size=(8, 2048)),
        MemoryDep(name='primals_141', index=c1, size=(8, 2048))]
buf373.group.device = cpu
buf373.group.iteration = ((8, 2048), ())
buf373.sizes = ([8, 2048], [])
class buf373_loop_body:
    var_ranges = {z0: 8, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf363', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf364', get_index_2)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_137', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_138', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf367', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf369', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf370', get_index_7)
        constant_2 = ops.constant(8, torch.float32)
        div_1 = ops.div(load_7, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_140', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_141', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf373', get_index_10, add_4, None)
        return store


buf374: SchedulerNode(ComputedBuffer)
buf374.writes = [MemoryDep(name='buf374', index=c0, size=(16384,))]
buf374.unmet_dependencies = [MemoryDep(name='buf373', index=c0, size=(16384,))]
buf374.met_dependencies = []
buf374.group.device = cpu
buf374.group.iteration = ((16384,), ())
buf374.sizes = ([16384], [])
class buf374_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf373', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf374', get_index_1, relu, None)
        return store


buf375: ExternKernelSchedulerNode(Convolution)
buf375.writes = [StarDep(name='buf375')]
buf375.unmet_dependencies = [StarDep(name='buf374')]
buf375.met_dependencies = [StarDep(name='primals_142')]
buf375.node.kernel = aten.convolution


buf376: SchedulerNode(ComputedBuffer)
buf376.writes = 
    [   MemoryDep(name='buf376', index=c0, size=(512, 8)),
        MemoryDep(name='buf376', index=c0, size=(512,))]
buf376.unmet_dependencies = [MemoryDep(name='buf375', index=c0 + 512*c1, size=(512, 8))]
buf376.met_dependencies = []
buf376.group.device = cpu
buf376.group.iteration = ((512,), (8,))
buf376.sizes = ([512], [8])
class buf376_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf375', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf376', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf377: SchedulerNode(ComputedBuffer)
buf377.writes = [MemoryDep(name='buf377', index=c0, size=(512,))]
buf377.unmet_dependencies = [MemoryDep(name='buf376', index=c0, size=(512,))]
buf377.met_dependencies = []
buf377.group.device = cpu
buf377.group.iteration = ((512,), ())
buf377.sizes = ([512], [])
class buf377_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf376', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf377', get_index_1, div, None)
        return store


buf378: SchedulerNode(ComputedBuffer)
buf378.writes = 
    [   MemoryDep(name='buf378', index=c0, size=(512, 8)),
        MemoryDep(name='buf378', index=c0, size=(512,))]
buf378.unmet_dependencies = 
    [   MemoryDep(name='buf375', index=c0 + 512*c1, size=(512, 8)),
        MemoryDep(name='buf377', index=c0, size=(512, 8))]
buf378.met_dependencies = []
buf378.group.device = cpu
buf378.group.iteration = ((512,), (8,))
buf378.sizes = ([512], [8])
class buf378_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf375', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf377', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf378', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf379: SchedulerNode(ComputedBuffer)
buf379.writes = [MemoryDep(name='buf379', index=c0, size=(512,))]
buf379.unmet_dependencies = [MemoryDep(name='buf377', index=c0, size=(512,))]
buf379.met_dependencies = [MemoryDep(name='primals_303', index=c0, size=(512,))]
buf379.group.device = cpu
buf379.group.iteration = ((512,), ())
buf379.sizes = ([512], [])
class buf379_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf377', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_303', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf379', get_index_2, add, None)
        return store


buf380: SchedulerNode(ComputedBuffer)
buf380.writes = [MemoryDep(name='buf380', index=c0, size=(512,))]
buf380.unmet_dependencies = [MemoryDep(name='buf378', index=c0, size=(512,))]
buf380.met_dependencies = [MemoryDep(name='primals_304', index=c0, size=(512,))]
buf380.group.device = cpu
buf380.group.iteration = ((512,), ())
buf380.sizes = ([512], [])
class buf380_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.1428571428571428, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_304', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf380', get_index_2, add, None)
        return store


buf381: SchedulerNode(ComputedBuffer)
buf381.writes = [MemoryDep(name='buf381', index=c0, size=(4096,))]
buf381.unmet_dependencies = 
    [   MemoryDep(name='buf375', index=c0, size=(4096,)),
        MemoryDep(name='buf377', index=c1, size=(8, 512)),
        MemoryDep(name='buf378', index=c1, size=(8, 512))]
buf381.met_dependencies = 
    [   MemoryDep(name='primals_143', index=c1, size=(8, 512)),
        MemoryDep(name='primals_144', index=c1, size=(8, 512))]
buf381.group.device = cpu
buf381.group.iteration = ((8, 512), ())
buf381.sizes = ([8, 512], [])
class buf381_loop_body:
    var_ranges = {z0: 8, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf375', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf377', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf378', get_index_2)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_143', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_144', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf381', get_index_5, relu, None)
        return store


buf382: ExternKernelSchedulerNode(Convolution)
buf382.writes = [StarDep(name='buf382')]
buf382.unmet_dependencies = [StarDep(name='buf381')]
buf382.met_dependencies = [StarDep(name='primals_145')]
buf382.node.kernel = aten.convolution


buf383: SchedulerNode(ComputedBuffer)
buf383.writes = 
    [   MemoryDep(name='buf383', index=c0, size=(512, 8)),
        MemoryDep(name='buf383', index=c0, size=(512,))]
buf383.unmet_dependencies = [MemoryDep(name='buf382', index=c0 + 512*c1, size=(512, 8))]
buf383.met_dependencies = []
buf383.group.device = cpu
buf383.group.iteration = ((512,), (8,))
buf383.sizes = ([512], [8])
class buf383_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf382', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf383', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf384: SchedulerNode(ComputedBuffer)
buf384.writes = [MemoryDep(name='buf384', index=c0, size=(512,))]
buf384.unmet_dependencies = [MemoryDep(name='buf383', index=c0, size=(512,))]
buf384.met_dependencies = []
buf384.group.device = cpu
buf384.group.iteration = ((512,), ())
buf384.sizes = ([512], [])
class buf384_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf384', get_index_1, div, None)
        return store


buf385: SchedulerNode(ComputedBuffer)
buf385.writes = 
    [   MemoryDep(name='buf385', index=c0, size=(512, 8)),
        MemoryDep(name='buf385', index=c0, size=(512,))]
buf385.unmet_dependencies = 
    [   MemoryDep(name='buf382', index=c0 + 512*c1, size=(512, 8)),
        MemoryDep(name='buf384', index=c0, size=(512, 8))]
buf385.met_dependencies = []
buf385.group.device = cpu
buf385.group.iteration = ((512,), (8,))
buf385.sizes = ([512], [8])
class buf385_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf382', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf384', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf385', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf386: SchedulerNode(ComputedBuffer)
buf386.writes = [MemoryDep(name='buf386', index=c0, size=(512,))]
buf386.unmet_dependencies = [MemoryDep(name='buf384', index=c0, size=(512,))]
buf386.met_dependencies = [MemoryDep(name='primals_306', index=c0, size=(512,))]
buf386.group.device = cpu
buf386.group.iteration = ((512,), ())
buf386.sizes = ([512], [])
class buf386_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_306', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf386', get_index_2, add, None)
        return store


buf387: SchedulerNode(ComputedBuffer)
buf387.writes = [MemoryDep(name='buf387', index=c0, size=(512,))]
buf387.unmet_dependencies = [MemoryDep(name='buf385', index=c0, size=(512,))]
buf387.met_dependencies = [MemoryDep(name='primals_307', index=c0, size=(512,))]
buf387.group.device = cpu
buf387.group.iteration = ((512,), ())
buf387.sizes = ([512], [])
class buf387_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf385', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.1428571428571428, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_307', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf387', get_index_2, add, None)
        return store


buf388: SchedulerNode(ComputedBuffer)
buf388.writes = [MemoryDep(name='buf388', index=c0, size=(4096,))]
buf388.unmet_dependencies = 
    [   MemoryDep(name='buf382', index=c0, size=(4096,)),
        MemoryDep(name='buf384', index=c1, size=(8, 512)),
        MemoryDep(name='buf385', index=c1, size=(8, 512))]
buf388.met_dependencies = 
    [   MemoryDep(name='primals_146', index=c1, size=(8, 512)),
        MemoryDep(name='primals_147', index=c1, size=(8, 512))]
buf388.group.device = cpu
buf388.group.iteration = ((8, 512), ())
buf388.sizes = ([8, 512], [])
class buf388_loop_body:
    var_ranges = {z0: 8, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf382', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf384', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf385', get_index_2)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_146', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_147', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf388', get_index_5, relu, None)
        return store


buf389: ExternKernelSchedulerNode(Convolution)
buf389.writes = [StarDep(name='buf389')]
buf389.unmet_dependencies = [StarDep(name='buf388')]
buf389.met_dependencies = [StarDep(name='primals_148')]
buf389.node.kernel = aten.convolution


buf390: SchedulerNode(ComputedBuffer)
buf390.writes = 
    [   MemoryDep(name='buf390', index=c0, size=(2048, 8)),
        MemoryDep(name='buf390', index=c0, size=(2048,))]
buf390.unmet_dependencies = [MemoryDep(name='buf389', index=c0 + 2048*c1, size=(2048, 8))]
buf390.met_dependencies = []
buf390.group.device = cpu
buf390.group.iteration = ((2048,), (8,))
buf390.sizes = ([2048], [8])
class buf390_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf389', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf390', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf391: SchedulerNode(ComputedBuffer)
buf391.writes = [MemoryDep(name='buf391', index=c0, size=(2048,))]
buf391.unmet_dependencies = [MemoryDep(name='buf390', index=c0, size=(2048,))]
buf391.met_dependencies = []
buf391.group.device = cpu
buf391.group.iteration = ((2048,), ())
buf391.sizes = ([2048], [])
class buf391_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf390', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf391', get_index_1, div, None)
        return store


buf392: SchedulerNode(ComputedBuffer)
buf392.writes = 
    [   MemoryDep(name='buf392', index=c0, size=(2048, 8)),
        MemoryDep(name='buf392', index=c0, size=(2048,))]
buf392.unmet_dependencies = 
    [   MemoryDep(name='buf389', index=c0 + 2048*c1, size=(2048, 8)),
        MemoryDep(name='buf391', index=c0, size=(2048, 8))]
buf392.met_dependencies = []
buf392.group.device = cpu
buf392.group.iteration = ((2048,), (8,))
buf392.sizes = ([2048], [8])
class buf392_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf389', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf391', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf392', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf393: SchedulerNode(ComputedBuffer)
buf393.writes = [MemoryDep(name='buf393', index=c0, size=(2048,))]
buf393.unmet_dependencies = [MemoryDep(name='buf391', index=c0, size=(2048,))]
buf393.met_dependencies = [MemoryDep(name='primals_309', index=c0, size=(2048,))]
buf393.group.device = cpu
buf393.group.iteration = ((2048,), ())
buf393.sizes = ([2048], [])
class buf393_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_309', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf393', get_index_2, add, None)
        return store


buf394: SchedulerNode(ComputedBuffer)
buf394.writes = [MemoryDep(name='buf394', index=c0, size=(2048,))]
buf394.unmet_dependencies = [MemoryDep(name='buf392', index=c0, size=(2048,))]
buf394.met_dependencies = [MemoryDep(name='primals_310', index=c0, size=(2048,))]
buf394.group.device = cpu
buf394.group.iteration = ((2048,), ())
buf394.sizes = ([2048], [])
class buf394_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.1428571428571428, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_310', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf394', get_index_2, add, None)
        return store


buf395: SchedulerNode(ComputedBuffer)
buf395.writes = [MemoryDep(name='buf395', index=c0, size=(16384,))]
buf395.unmet_dependencies = 
    [   MemoryDep(name='buf374', index=c0, size=(16384,)),
        MemoryDep(name='buf389', index=c0, size=(16384,)),
        MemoryDep(name='buf391', index=c1, size=(8, 2048)),
        MemoryDep(name='buf392', index=c1, size=(8, 2048))]
buf395.met_dependencies = 
    [   MemoryDep(name='primals_149', index=c1, size=(8, 2048)),
        MemoryDep(name='primals_150', index=c1, size=(8, 2048))]
buf395.group.device = cpu
buf395.group.iteration = ((8, 2048), ())
buf395.sizes = ([8, 2048], [])
class buf395_loop_body:
    var_ranges = {z0: 8, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf389', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf391', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf392', get_index_2)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_149', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_150', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf374', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf395', get_index_6, relu, None)
        return store


buf396: ExternKernelSchedulerNode(Convolution)
buf396.writes = [StarDep(name='buf396')]
buf396.unmet_dependencies = [StarDep(name='buf395')]
buf396.met_dependencies = [StarDep(name='primals_151')]
buf396.node.kernel = aten.convolution


buf397: SchedulerNode(ComputedBuffer)
buf397.writes = 
    [   MemoryDep(name='buf397', index=c0, size=(512, 8)),
        MemoryDep(name='buf397', index=c0, size=(512,))]
buf397.unmet_dependencies = [MemoryDep(name='buf396', index=c0 + 512*c1, size=(512, 8))]
buf397.met_dependencies = []
buf397.group.device = cpu
buf397.group.iteration = ((512,), (8,))
buf397.sizes = ([512], [8])
class buf397_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf396', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf397', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf398: SchedulerNode(ComputedBuffer)
buf398.writes = [MemoryDep(name='buf398', index=c0, size=(512,))]
buf398.unmet_dependencies = [MemoryDep(name='buf397', index=c0, size=(512,))]
buf398.met_dependencies = []
buf398.group.device = cpu
buf398.group.iteration = ((512,), ())
buf398.sizes = ([512], [])
class buf398_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf397', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf398', get_index_1, div, None)
        return store


buf399: SchedulerNode(ComputedBuffer)
buf399.writes = 
    [   MemoryDep(name='buf399', index=c0, size=(512, 8)),
        MemoryDep(name='buf399', index=c0, size=(512,))]
buf399.unmet_dependencies = 
    [   MemoryDep(name='buf396', index=c0 + 512*c1, size=(512, 8)),
        MemoryDep(name='buf398', index=c0, size=(512, 8))]
buf399.met_dependencies = []
buf399.group.device = cpu
buf399.group.iteration = ((512,), (8,))
buf399.sizes = ([512], [8])
class buf399_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf396', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf398', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf399', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf400: SchedulerNode(ComputedBuffer)
buf400.writes = [MemoryDep(name='buf400', index=c0, size=(512,))]
buf400.unmet_dependencies = [MemoryDep(name='buf398', index=c0, size=(512,))]
buf400.met_dependencies = [MemoryDep(name='primals_312', index=c0, size=(512,))]
buf400.group.device = cpu
buf400.group.iteration = ((512,), ())
buf400.sizes = ([512], [])
class buf400_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf398', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_312', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf400', get_index_2, add, None)
        return store


buf401: SchedulerNode(ComputedBuffer)
buf401.writes = [MemoryDep(name='buf401', index=c0, size=(512,))]
buf401.unmet_dependencies = [MemoryDep(name='buf399', index=c0, size=(512,))]
buf401.met_dependencies = [MemoryDep(name='primals_313', index=c0, size=(512,))]
buf401.group.device = cpu
buf401.group.iteration = ((512,), ())
buf401.sizes = ([512], [])
class buf401_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.1428571428571428, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_313', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf401', get_index_2, add, None)
        return store


buf402: SchedulerNode(ComputedBuffer)
buf402.writes = [MemoryDep(name='buf402', index=c0, size=(4096,))]
buf402.unmet_dependencies = 
    [   MemoryDep(name='buf396', index=c0, size=(4096,)),
        MemoryDep(name='buf398', index=c1, size=(8, 512)),
        MemoryDep(name='buf399', index=c1, size=(8, 512))]
buf402.met_dependencies = 
    [   MemoryDep(name='primals_152', index=c1, size=(8, 512)),
        MemoryDep(name='primals_153', index=c1, size=(8, 512))]
buf402.group.device = cpu
buf402.group.iteration = ((8, 512), ())
buf402.sizes = ([8, 512], [])
class buf402_loop_body:
    var_ranges = {z0: 8, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf396', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf398', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf399', get_index_2)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_152', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_153', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf402', get_index_5, relu, None)
        return store


buf403: ExternKernelSchedulerNode(Convolution)
buf403.writes = [StarDep(name='buf403')]
buf403.unmet_dependencies = [StarDep(name='buf402')]
buf403.met_dependencies = [StarDep(name='primals_154')]
buf403.node.kernel = aten.convolution


buf404: SchedulerNode(ComputedBuffer)
buf404.writes = 
    [   MemoryDep(name='buf404', index=c0, size=(512, 8)),
        MemoryDep(name='buf404', index=c0, size=(512,))]
buf404.unmet_dependencies = [MemoryDep(name='buf403', index=c0 + 512*c1, size=(512, 8))]
buf404.met_dependencies = []
buf404.group.device = cpu
buf404.group.iteration = ((512,), (8,))
buf404.sizes = ([512], [8])
class buf404_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf404', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf405: SchedulerNode(ComputedBuffer)
buf405.writes = [MemoryDep(name='buf405', index=c0, size=(512,))]
buf405.unmet_dependencies = [MemoryDep(name='buf404', index=c0, size=(512,))]
buf405.met_dependencies = []
buf405.group.device = cpu
buf405.group.iteration = ((512,), ())
buf405.sizes = ([512], [])
class buf405_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf404', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf405', get_index_1, div, None)
        return store


buf406: SchedulerNode(ComputedBuffer)
buf406.writes = 
    [   MemoryDep(name='buf406', index=c0, size=(512, 8)),
        MemoryDep(name='buf406', index=c0, size=(512,))]
buf406.unmet_dependencies = 
    [   MemoryDep(name='buf403', index=c0 + 512*c1, size=(512, 8)),
        MemoryDep(name='buf405', index=c0, size=(512, 8))]
buf406.met_dependencies = []
buf406.group.device = cpu
buf406.group.iteration = ((512,), (8,))
buf406.sizes = ([512], [8])
class buf406_loop_body:
    var_ranges = {z0: 512, z1: 8}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf405', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf406', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf407: SchedulerNode(ComputedBuffer)
buf407.writes = [MemoryDep(name='buf407', index=c0, size=(512,))]
buf407.unmet_dependencies = [MemoryDep(name='buf405', index=c0, size=(512,))]
buf407.met_dependencies = [MemoryDep(name='primals_315', index=c0, size=(512,))]
buf407.group.device = cpu
buf407.group.iteration = ((512,), ())
buf407.sizes = ([512], [])
class buf407_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf405', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_315', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf407', get_index_2, add, None)
        return store


buf408: SchedulerNode(ComputedBuffer)
buf408.writes = [MemoryDep(name='buf408', index=c0, size=(512,))]
buf408.unmet_dependencies = [MemoryDep(name='buf406', index=c0, size=(512,))]
buf408.met_dependencies = [MemoryDep(name='primals_316', index=c0, size=(512,))]
buf408.group.device = cpu
buf408.group.iteration = ((512,), ())
buf408.sizes = ([512], [])
class buf408_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.1428571428571428, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_316', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf408', get_index_2, add, None)
        return store


buf409: SchedulerNode(ComputedBuffer)
buf409.writes = [MemoryDep(name='buf409', index=c0, size=(4096,))]
buf409.unmet_dependencies = 
    [   MemoryDep(name='buf403', index=c0, size=(4096,)),
        MemoryDep(name='buf405', index=c1, size=(8, 512)),
        MemoryDep(name='buf406', index=c1, size=(8, 512))]
buf409.met_dependencies = 
    [   MemoryDep(name='primals_155', index=c1, size=(8, 512)),
        MemoryDep(name='primals_156', index=c1, size=(8, 512))]
buf409.group.device = cpu
buf409.group.iteration = ((8, 512), ())
buf409.sizes = ([8, 512], [])
class buf409_loop_body:
    var_ranges = {z0: 8, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf405', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf406', get_index_2)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_155', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_156', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf409', get_index_5, relu, None)
        return store


buf410: ExternKernelSchedulerNode(Convolution)
buf410.writes = [StarDep(name='buf410')]
buf410.unmet_dependencies = [StarDep(name='buf409')]
buf410.met_dependencies = [StarDep(name='primals_157')]
buf410.node.kernel = aten.convolution


buf411: SchedulerNode(ComputedBuffer)
buf411.writes = 
    [   MemoryDep(name='buf411', index=c0, size=(2048, 8)),
        MemoryDep(name='buf411', index=c0, size=(2048,))]
buf411.unmet_dependencies = [MemoryDep(name='buf410', index=c0 + 2048*c1, size=(2048, 8))]
buf411.met_dependencies = []
buf411.group.device = cpu
buf411.group.iteration = ((2048,), (8,))
buf411.sizes = ([2048], [8])
class buf411_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf410', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf411', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf412: SchedulerNode(ComputedBuffer)
buf412.writes = [MemoryDep(name='buf412', index=c0, size=(2048,))]
buf412.unmet_dependencies = [MemoryDep(name='buf411', index=c0, size=(2048,))]
buf412.met_dependencies = []
buf412.group.device = cpu
buf412.group.iteration = ((2048,), ())
buf412.sizes = ([2048], [])
class buf412_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf412', get_index_1, div, None)
        return store


buf413: SchedulerNode(ComputedBuffer)
buf413.writes = 
    [   MemoryDep(name='buf413', index=c0, size=(2048, 8)),
        MemoryDep(name='buf413', index=c0, size=(2048,))]
buf413.unmet_dependencies = 
    [   MemoryDep(name='buf410', index=c0 + 2048*c1, size=(2048, 8)),
        MemoryDep(name='buf412', index=c0, size=(2048, 8))]
buf413.met_dependencies = []
buf413.group.device = cpu
buf413.group.iteration = ((2048,), (8,))
buf413.sizes = ([2048], [8])
class buf413_loop_body:
    var_ranges = {z0: 2048, z1: 8}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf410', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf412', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf413', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf414: SchedulerNode(ComputedBuffer)
buf414.writes = [MemoryDep(name='buf414', index=c0, size=(2048,))]
buf414.unmet_dependencies = [MemoryDep(name='buf412', index=c0, size=(2048,))]
buf414.met_dependencies = [MemoryDep(name='primals_318', index=c0, size=(2048,))]
buf414.group.device = cpu
buf414.group.iteration = ((2048,), ())
buf414.sizes = ([2048], [])
class buf414_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_318', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf414', get_index_2, add, None)
        return store


buf415: SchedulerNode(ComputedBuffer)
buf415.writes = [MemoryDep(name='buf415', index=c0, size=(2048,))]
buf415.unmet_dependencies = [MemoryDep(name='buf413', index=c0, size=(2048,))]
buf415.met_dependencies = [MemoryDep(name='primals_319', index=c0, size=(2048,))]
buf415.group.device = cpu
buf415.group.iteration = ((2048,), ())
buf415.sizes = ([2048], [])
class buf415_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf413', get_index)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.1428571428571428, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_319', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf415', get_index_2, add, None)
        return store


buf416: SchedulerNode(ComputedBuffer)
buf416.writes = [MemoryDep(name='buf416', index=c0, size=(16384,))]
buf416.unmet_dependencies = 
    [   MemoryDep(name='buf395', index=c0, size=(16384,)),
        MemoryDep(name='buf410', index=c0, size=(16384,)),
        MemoryDep(name='buf412', index=c1, size=(8, 2048)),
        MemoryDep(name='buf413', index=c1, size=(8, 2048))]
buf416.met_dependencies = 
    [   MemoryDep(name='primals_158', index=c1, size=(8, 2048)),
        MemoryDep(name='primals_159', index=c1, size=(8, 2048))]
buf416.group.device = cpu
buf416.group.iteration = ((8, 2048), ())
buf416.sizes = ([8, 2048], [])
class buf416_loop_body:
    var_ranges = {z0: 8, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf410', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf412', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf413', get_index_2)
        constant = ops.constant(8, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_158', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_159', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf395', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf416', get_index_6, relu, None)
        return store


buf417: SchedulerNode(ComputedBuffer)
buf417.writes = [MemoryDep(name='buf417', index=c0, size=(16384,))]
buf417.unmet_dependencies = [MemoryDep(name='buf416', index=c0, size=(16384,))]
buf417.met_dependencies = []
buf417.group.device = cpu
buf417.group.iteration = ((16384,), ())
buf417.sizes = ([16384], [])
class buf417_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf416', get_index)
        constant = ops.constant(1, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf417', get_index_1, div, None)
        return store


buf418: ExternKernelSchedulerNode(ExternKernelOut)
buf418.writes = [StarDep(name='buf418')]
buf418.unmet_dependencies = [StarDep(name='buf417')]
buf418.met_dependencies = [StarDep(name='primals_160'), StarDep(name='primals_161')]
buf418.node.kernel = extern_kernels.addmm


buf419: SchedulerNode(ComputedBuffer)
buf419.writes = [MemoryDep(name='buf419', index=c0, size=(16384,))]
buf419.unmet_dependencies = [MemoryDep(name='buf416', index=c0, size=(16384,))]
buf419.met_dependencies = []
buf419.group.device = cpu
buf419.group.iteration = ((16384,), ())
buf419.sizes = ([16384], [])
class buf419_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf416', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf419', get_index_1, le, None)
        return store


buf420: SchedulerNode(ComputedBuffer)
buf420.writes = [MemoryDep(name='buf420', index=0, size=())]
buf420.unmet_dependencies = []
buf420.met_dependencies = [MemoryDep(name='primals_164', index=0, size=())]
buf420.group.device = cpu
buf420.group.iteration = ((), ())
buf420.sizes = ([], [])
class buf420_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_164', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf420', get_index_1, add, None)
        return store


buf421: SchedulerNode(ComputedBuffer)
buf421.writes = [MemoryDep(name='buf421', index=0, size=())]
buf421.unmet_dependencies = []
buf421.met_dependencies = [MemoryDep(name='primals_167', index=0, size=())]
buf421.group.device = cpu
buf421.group.iteration = ((), ())
buf421.sizes = ([], [])
class buf421_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_167', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf421', get_index_1, add, None)
        return store


buf422: SchedulerNode(ComputedBuffer)
buf422.writes = [MemoryDep(name='buf422', index=0, size=())]
buf422.unmet_dependencies = []
buf422.met_dependencies = [MemoryDep(name='primals_170', index=0, size=())]
buf422.group.device = cpu
buf422.group.iteration = ((), ())
buf422.sizes = ([], [])
class buf422_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_170', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf422', get_index_1, add, None)
        return store


buf423: SchedulerNode(ComputedBuffer)
buf423.writes = [MemoryDep(name='buf423', index=0, size=())]
buf423.unmet_dependencies = []
buf423.met_dependencies = [MemoryDep(name='primals_173', index=0, size=())]
buf423.group.device = cpu
buf423.group.iteration = ((), ())
buf423.sizes = ([], [])
class buf423_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_173', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf423', get_index_1, add, None)
        return store


buf424: SchedulerNode(ComputedBuffer)
buf424.writes = [MemoryDep(name='buf424', index=0, size=())]
buf424.unmet_dependencies = []
buf424.met_dependencies = [MemoryDep(name='primals_176', index=0, size=())]
buf424.group.device = cpu
buf424.group.iteration = ((), ())
buf424.sizes = ([], [])
class buf424_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_176', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf424', get_index_1, add, None)
        return store


buf425: SchedulerNode(ComputedBuffer)
buf425.writes = [MemoryDep(name='buf425', index=0, size=())]
buf425.unmet_dependencies = []
buf425.met_dependencies = [MemoryDep(name='primals_179', index=0, size=())]
buf425.group.device = cpu
buf425.group.iteration = ((), ())
buf425.sizes = ([], [])
class buf425_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_179', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf425', get_index_1, add, None)
        return store


buf426: SchedulerNode(ComputedBuffer)
buf426.writes = [MemoryDep(name='buf426', index=0, size=())]
buf426.unmet_dependencies = []
buf426.met_dependencies = [MemoryDep(name='primals_182', index=0, size=())]
buf426.group.device = cpu
buf426.group.iteration = ((), ())
buf426.sizes = ([], [])
class buf426_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_182', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf426', get_index_1, add, None)
        return store


buf427: SchedulerNode(ComputedBuffer)
buf427.writes = [MemoryDep(name='buf427', index=0, size=())]
buf427.unmet_dependencies = []
buf427.met_dependencies = [MemoryDep(name='primals_185', index=0, size=())]
buf427.group.device = cpu
buf427.group.iteration = ((), ())
buf427.sizes = ([], [])
class buf427_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_185', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf427', get_index_1, add, None)
        return store


buf428: SchedulerNode(ComputedBuffer)
buf428.writes = [MemoryDep(name='buf428', index=0, size=())]
buf428.unmet_dependencies = []
buf428.met_dependencies = [MemoryDep(name='primals_188', index=0, size=())]
buf428.group.device = cpu
buf428.group.iteration = ((), ())
buf428.sizes = ([], [])
class buf428_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_188', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf428', get_index_1, add, None)
        return store


buf429: SchedulerNode(ComputedBuffer)
buf429.writes = [MemoryDep(name='buf429', index=0, size=())]
buf429.unmet_dependencies = []
buf429.met_dependencies = [MemoryDep(name='primals_191', index=0, size=())]
buf429.group.device = cpu
buf429.group.iteration = ((), ())
buf429.sizes = ([], [])
class buf429_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_191', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf429', get_index_1, add, None)
        return store


buf430: SchedulerNode(ComputedBuffer)
buf430.writes = [MemoryDep(name='buf430', index=0, size=())]
buf430.unmet_dependencies = []
buf430.met_dependencies = [MemoryDep(name='primals_194', index=0, size=())]
buf430.group.device = cpu
buf430.group.iteration = ((), ())
buf430.sizes = ([], [])
class buf430_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_194', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf430', get_index_1, add, None)
        return store


buf431: SchedulerNode(ComputedBuffer)
buf431.writes = [MemoryDep(name='buf431', index=0, size=())]
buf431.unmet_dependencies = []
buf431.met_dependencies = [MemoryDep(name='primals_197', index=0, size=())]
buf431.group.device = cpu
buf431.group.iteration = ((), ())
buf431.sizes = ([], [])
class buf431_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_197', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf431', get_index_1, add, None)
        return store


buf432: SchedulerNode(ComputedBuffer)
buf432.writes = [MemoryDep(name='buf432', index=0, size=())]
buf432.unmet_dependencies = []
buf432.met_dependencies = [MemoryDep(name='primals_200', index=0, size=())]
buf432.group.device = cpu
buf432.group.iteration = ((), ())
buf432.sizes = ([], [])
class buf432_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_200', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf432', get_index_1, add, None)
        return store


buf433: SchedulerNode(ComputedBuffer)
buf433.writes = [MemoryDep(name='buf433', index=0, size=())]
buf433.unmet_dependencies = []
buf433.met_dependencies = [MemoryDep(name='primals_203', index=0, size=())]
buf433.group.device = cpu
buf433.group.iteration = ((), ())
buf433.sizes = ([], [])
class buf433_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_203', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf433', get_index_1, add, None)
        return store


buf434: SchedulerNode(ComputedBuffer)
buf434.writes = [MemoryDep(name='buf434', index=0, size=())]
buf434.unmet_dependencies = []
buf434.met_dependencies = [MemoryDep(name='primals_206', index=0, size=())]
buf434.group.device = cpu
buf434.group.iteration = ((), ())
buf434.sizes = ([], [])
class buf434_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_206', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf434', get_index_1, add, None)
        return store


buf435: SchedulerNode(ComputedBuffer)
buf435.writes = [MemoryDep(name='buf435', index=0, size=())]
buf435.unmet_dependencies = []
buf435.met_dependencies = [MemoryDep(name='primals_209', index=0, size=())]
buf435.group.device = cpu
buf435.group.iteration = ((), ())
buf435.sizes = ([], [])
class buf435_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_209', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf435', get_index_1, add, None)
        return store


buf436: SchedulerNode(ComputedBuffer)
buf436.writes = [MemoryDep(name='buf436', index=0, size=())]
buf436.unmet_dependencies = []
buf436.met_dependencies = [MemoryDep(name='primals_212', index=0, size=())]
buf436.group.device = cpu
buf436.group.iteration = ((), ())
buf436.sizes = ([], [])
class buf436_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_212', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf436', get_index_1, add, None)
        return store


buf437: SchedulerNode(ComputedBuffer)
buf437.writes = [MemoryDep(name='buf437', index=0, size=())]
buf437.unmet_dependencies = []
buf437.met_dependencies = [MemoryDep(name='primals_215', index=0, size=())]
buf437.group.device = cpu
buf437.group.iteration = ((), ())
buf437.sizes = ([], [])
class buf437_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_215', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf437', get_index_1, add, None)
        return store


buf438: SchedulerNode(ComputedBuffer)
buf438.writes = [MemoryDep(name='buf438', index=0, size=())]
buf438.unmet_dependencies = []
buf438.met_dependencies = [MemoryDep(name='primals_218', index=0, size=())]
buf438.group.device = cpu
buf438.group.iteration = ((), ())
buf438.sizes = ([], [])
class buf438_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_218', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf438', get_index_1, add, None)
        return store


buf439: SchedulerNode(ComputedBuffer)
buf439.writes = [MemoryDep(name='buf439', index=0, size=())]
buf439.unmet_dependencies = []
buf439.met_dependencies = [MemoryDep(name='primals_221', index=0, size=())]
buf439.group.device = cpu
buf439.group.iteration = ((), ())
buf439.sizes = ([], [])
class buf439_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_221', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf439', get_index_1, add, None)
        return store


buf440: SchedulerNode(ComputedBuffer)
buf440.writes = [MemoryDep(name='buf440', index=0, size=())]
buf440.unmet_dependencies = []
buf440.met_dependencies = [MemoryDep(name='primals_224', index=0, size=())]
buf440.group.device = cpu
buf440.group.iteration = ((), ())
buf440.sizes = ([], [])
class buf440_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_224', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf440', get_index_1, add, None)
        return store


buf441: SchedulerNode(ComputedBuffer)
buf441.writes = [MemoryDep(name='buf441', index=0, size=())]
buf441.unmet_dependencies = []
buf441.met_dependencies = [MemoryDep(name='primals_227', index=0, size=())]
buf441.group.device = cpu
buf441.group.iteration = ((), ())
buf441.sizes = ([], [])
class buf441_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_227', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf441', get_index_1, add, None)
        return store


buf442: SchedulerNode(ComputedBuffer)
buf442.writes = [MemoryDep(name='buf442', index=0, size=())]
buf442.unmet_dependencies = []
buf442.met_dependencies = [MemoryDep(name='primals_230', index=0, size=())]
buf442.group.device = cpu
buf442.group.iteration = ((), ())
buf442.sizes = ([], [])
class buf442_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_230', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf442', get_index_1, add, None)
        return store


buf443: SchedulerNode(ComputedBuffer)
buf443.writes = [MemoryDep(name='buf443', index=0, size=())]
buf443.unmet_dependencies = []
buf443.met_dependencies = [MemoryDep(name='primals_233', index=0, size=())]
buf443.group.device = cpu
buf443.group.iteration = ((), ())
buf443.sizes = ([], [])
class buf443_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_233', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf443', get_index_1, add, None)
        return store


buf444: SchedulerNode(ComputedBuffer)
buf444.writes = [MemoryDep(name='buf444', index=0, size=())]
buf444.unmet_dependencies = []
buf444.met_dependencies = [MemoryDep(name='primals_236', index=0, size=())]
buf444.group.device = cpu
buf444.group.iteration = ((), ())
buf444.sizes = ([], [])
class buf444_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_236', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf444', get_index_1, add, None)
        return store


buf445: SchedulerNode(ComputedBuffer)
buf445.writes = [MemoryDep(name='buf445', index=0, size=())]
buf445.unmet_dependencies = []
buf445.met_dependencies = [MemoryDep(name='primals_239', index=0, size=())]
buf445.group.device = cpu
buf445.group.iteration = ((), ())
buf445.sizes = ([], [])
class buf445_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_239', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf445', get_index_1, add, None)
        return store


buf446: SchedulerNode(ComputedBuffer)
buf446.writes = [MemoryDep(name='buf446', index=0, size=())]
buf446.unmet_dependencies = []
buf446.met_dependencies = [MemoryDep(name='primals_242', index=0, size=())]
buf446.group.device = cpu
buf446.group.iteration = ((), ())
buf446.sizes = ([], [])
class buf446_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_242', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf446', get_index_1, add, None)
        return store


buf447: SchedulerNode(ComputedBuffer)
buf447.writes = [MemoryDep(name='buf447', index=0, size=())]
buf447.unmet_dependencies = []
buf447.met_dependencies = [MemoryDep(name='primals_245', index=0, size=())]
buf447.group.device = cpu
buf447.group.iteration = ((), ())
buf447.sizes = ([], [])
class buf447_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_245', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf447', get_index_1, add, None)
        return store


buf448: SchedulerNode(ComputedBuffer)
buf448.writes = [MemoryDep(name='buf448', index=0, size=())]
buf448.unmet_dependencies = []
buf448.met_dependencies = [MemoryDep(name='primals_248', index=0, size=())]
buf448.group.device = cpu
buf448.group.iteration = ((), ())
buf448.sizes = ([], [])
class buf448_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_248', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf448', get_index_1, add, None)
        return store


buf449: SchedulerNode(ComputedBuffer)
buf449.writes = [MemoryDep(name='buf449', index=0, size=())]
buf449.unmet_dependencies = []
buf449.met_dependencies = [MemoryDep(name='primals_251', index=0, size=())]
buf449.group.device = cpu
buf449.group.iteration = ((), ())
buf449.sizes = ([], [])
class buf449_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_251', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf449', get_index_1, add, None)
        return store


buf450: SchedulerNode(ComputedBuffer)
buf450.writes = [MemoryDep(name='buf450', index=0, size=())]
buf450.unmet_dependencies = []
buf450.met_dependencies = [MemoryDep(name='primals_254', index=0, size=())]
buf450.group.device = cpu
buf450.group.iteration = ((), ())
buf450.sizes = ([], [])
class buf450_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_254', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf450', get_index_1, add, None)
        return store


buf451: SchedulerNode(ComputedBuffer)
buf451.writes = [MemoryDep(name='buf451', index=0, size=())]
buf451.unmet_dependencies = []
buf451.met_dependencies = [MemoryDep(name='primals_257', index=0, size=())]
buf451.group.device = cpu
buf451.group.iteration = ((), ())
buf451.sizes = ([], [])
class buf451_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_257', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf451', get_index_1, add, None)
        return store


buf452: SchedulerNode(ComputedBuffer)
buf452.writes = [MemoryDep(name='buf452', index=0, size=())]
buf452.unmet_dependencies = []
buf452.met_dependencies = [MemoryDep(name='primals_260', index=0, size=())]
buf452.group.device = cpu
buf452.group.iteration = ((), ())
buf452.sizes = ([], [])
class buf452_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_260', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf452', get_index_1, add, None)
        return store


buf453: SchedulerNode(ComputedBuffer)
buf453.writes = [MemoryDep(name='buf453', index=0, size=())]
buf453.unmet_dependencies = []
buf453.met_dependencies = [MemoryDep(name='primals_263', index=0, size=())]
buf453.group.device = cpu
buf453.group.iteration = ((), ())
buf453.sizes = ([], [])
class buf453_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_263', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf453', get_index_1, add, None)
        return store


buf454: SchedulerNode(ComputedBuffer)
buf454.writes = [MemoryDep(name='buf454', index=0, size=())]
buf454.unmet_dependencies = []
buf454.met_dependencies = [MemoryDep(name='primals_266', index=0, size=())]
buf454.group.device = cpu
buf454.group.iteration = ((), ())
buf454.sizes = ([], [])
class buf454_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_266', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf454', get_index_1, add, None)
        return store


buf455: SchedulerNode(ComputedBuffer)
buf455.writes = [MemoryDep(name='buf455', index=0, size=())]
buf455.unmet_dependencies = []
buf455.met_dependencies = [MemoryDep(name='primals_269', index=0, size=())]
buf455.group.device = cpu
buf455.group.iteration = ((), ())
buf455.sizes = ([], [])
class buf455_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_269', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf455', get_index_1, add, None)
        return store


buf456: SchedulerNode(ComputedBuffer)
buf456.writes = [MemoryDep(name='buf456', index=0, size=())]
buf456.unmet_dependencies = []
buf456.met_dependencies = [MemoryDep(name='primals_272', index=0, size=())]
buf456.group.device = cpu
buf456.group.iteration = ((), ())
buf456.sizes = ([], [])
class buf456_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_272', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf456', get_index_1, add, None)
        return store


buf457: SchedulerNode(ComputedBuffer)
buf457.writes = [MemoryDep(name='buf457', index=0, size=())]
buf457.unmet_dependencies = []
buf457.met_dependencies = [MemoryDep(name='primals_275', index=0, size=())]
buf457.group.device = cpu
buf457.group.iteration = ((), ())
buf457.sizes = ([], [])
class buf457_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_275', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf457', get_index_1, add, None)
        return store


buf458: SchedulerNode(ComputedBuffer)
buf458.writes = [MemoryDep(name='buf458', index=0, size=())]
buf458.unmet_dependencies = []
buf458.met_dependencies = [MemoryDep(name='primals_278', index=0, size=())]
buf458.group.device = cpu
buf458.group.iteration = ((), ())
buf458.sizes = ([], [])
class buf458_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_278', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf458', get_index_1, add, None)
        return store


buf459: SchedulerNode(ComputedBuffer)
buf459.writes = [MemoryDep(name='buf459', index=0, size=())]
buf459.unmet_dependencies = []
buf459.met_dependencies = [MemoryDep(name='primals_281', index=0, size=())]
buf459.group.device = cpu
buf459.group.iteration = ((), ())
buf459.sizes = ([], [])
class buf459_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_281', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf459', get_index_1, add, None)
        return store


buf460: SchedulerNode(ComputedBuffer)
buf460.writes = [MemoryDep(name='buf460', index=0, size=())]
buf460.unmet_dependencies = []
buf460.met_dependencies = [MemoryDep(name='primals_284', index=0, size=())]
buf460.group.device = cpu
buf460.group.iteration = ((), ())
buf460.sizes = ([], [])
class buf460_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_284', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf460', get_index_1, add, None)
        return store


buf461: SchedulerNode(ComputedBuffer)
buf461.writes = [MemoryDep(name='buf461', index=0, size=())]
buf461.unmet_dependencies = []
buf461.met_dependencies = [MemoryDep(name='primals_287', index=0, size=())]
buf461.group.device = cpu
buf461.group.iteration = ((), ())
buf461.sizes = ([], [])
class buf461_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_287', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf461', get_index_1, add, None)
        return store


buf462: SchedulerNode(ComputedBuffer)
buf462.writes = [MemoryDep(name='buf462', index=0, size=())]
buf462.unmet_dependencies = []
buf462.met_dependencies = [MemoryDep(name='primals_290', index=0, size=())]
buf462.group.device = cpu
buf462.group.iteration = ((), ())
buf462.sizes = ([], [])
class buf462_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_290', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf462', get_index_1, add, None)
        return store


buf463: SchedulerNode(ComputedBuffer)
buf463.writes = [MemoryDep(name='buf463', index=0, size=())]
buf463.unmet_dependencies = []
buf463.met_dependencies = [MemoryDep(name='primals_293', index=0, size=())]
buf463.group.device = cpu
buf463.group.iteration = ((), ())
buf463.sizes = ([], [])
class buf463_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_293', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf463', get_index_1, add, None)
        return store


buf464: SchedulerNode(ComputedBuffer)
buf464.writes = [MemoryDep(name='buf464', index=0, size=())]
buf464.unmet_dependencies = []
buf464.met_dependencies = [MemoryDep(name='primals_296', index=0, size=())]
buf464.group.device = cpu
buf464.group.iteration = ((), ())
buf464.sizes = ([], [])
class buf464_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_296', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf464', get_index_1, add, None)
        return store


buf465: SchedulerNode(ComputedBuffer)
buf465.writes = [MemoryDep(name='buf465', index=0, size=())]
buf465.unmet_dependencies = []
buf465.met_dependencies = [MemoryDep(name='primals_299', index=0, size=())]
buf465.group.device = cpu
buf465.group.iteration = ((), ())
buf465.sizes = ([], [])
class buf465_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_299', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf465', get_index_1, add, None)
        return store


buf466: SchedulerNode(ComputedBuffer)
buf466.writes = [MemoryDep(name='buf466', index=0, size=())]
buf466.unmet_dependencies = []
buf466.met_dependencies = [MemoryDep(name='primals_302', index=0, size=())]
buf466.group.device = cpu
buf466.group.iteration = ((), ())
buf466.sizes = ([], [])
class buf466_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_302', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf466', get_index_1, add, None)
        return store


buf467: SchedulerNode(ComputedBuffer)
buf467.writes = [MemoryDep(name='buf467', index=0, size=())]
buf467.unmet_dependencies = []
buf467.met_dependencies = [MemoryDep(name='primals_305', index=0, size=())]
buf467.group.device = cpu
buf467.group.iteration = ((), ())
buf467.sizes = ([], [])
class buf467_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_305', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf467', get_index_1, add, None)
        return store


buf468: SchedulerNode(ComputedBuffer)
buf468.writes = [MemoryDep(name='buf468', index=0, size=())]
buf468.unmet_dependencies = []
buf468.met_dependencies = [MemoryDep(name='primals_308', index=0, size=())]
buf468.group.device = cpu
buf468.group.iteration = ((), ())
buf468.sizes = ([], [])
class buf468_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_308', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf468', get_index_1, add, None)
        return store


buf469: SchedulerNode(ComputedBuffer)
buf469.writes = [MemoryDep(name='buf469', index=0, size=())]
buf469.unmet_dependencies = []
buf469.met_dependencies = [MemoryDep(name='primals_311', index=0, size=())]
buf469.group.device = cpu
buf469.group.iteration = ((), ())
buf469.sizes = ([], [])
class buf469_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_311', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf469', get_index_1, add, None)
        return store


buf470: SchedulerNode(ComputedBuffer)
buf470.writes = [MemoryDep(name='buf470', index=0, size=())]
buf470.unmet_dependencies = []
buf470.met_dependencies = [MemoryDep(name='primals_314', index=0, size=())]
buf470.group.device = cpu
buf470.group.iteration = ((), ())
buf470.sizes = ([], [])
class buf470_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_314', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf470', get_index_1, add, None)
        return store


buf471: SchedulerNode(ComputedBuffer)
buf471.writes = [MemoryDep(name='buf471', index=0, size=())]
buf471.unmet_dependencies = []
buf471.met_dependencies = [MemoryDep(name='primals_317', index=0, size=())]
buf471.group.device = cpu
buf471.group.iteration = ((), ())
buf471.sizes = ([], [])
class buf471_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_317', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf471', get_index_1, add, None)
        return store


buf472: SchedulerNode(ComputedBuffer)
buf472.writes = [MemoryDep(name='buf472', index=0, size=())]
buf472.unmet_dependencies = []
buf472.met_dependencies = [MemoryDep(name='primals_320', index=0, size=())]
buf472.group.device = cpu
buf472.group.iteration = ((), ())
buf472.sizes = ([], [])
class buf472_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_320', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf472', get_index_1, add, None)
        return store


