buf0: ExternKernelSchedulerNode(Convolution)
buf0.writes = [StarDep(name='buf0')]
buf0.unmet_dependencies = []
buf0.met_dependencies = [StarDep(name='arg0_1'), StarDep(name='arg320_1')]
buf0.node.kernel = aten.convolution


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = 
    [   MemoryDep(name='buf2', index=c0, size=(64, 4096)),
        MemoryDep(name='buf2', index=c0, size=(64,))]
buf2.unmet_dependencies = [MemoryDep(name='buf0', index=256*c0 + 16384*c1 + c2, size=(64, 16, 256))]
buf2.met_dependencies = []
buf2.group.device = cpu
buf2.group.iteration = ((64,), (16, 256))
buf2.sizes = ([64], [16, 256])
class buf2_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 256}
    index0 = 256*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf2', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf3_buf321_buf322: FusedSchedulerNode(NoneType)
buf3_buf321_buf322.writes = 
    [   MemoryDep(name='buf3', index=c0, size=(64,)),
        MemoryDep(name='buf321', index=c0, size=(64,)),
        MemoryDep(name='buf322', index=c0, size=(64,))]
buf3_buf321_buf322.unmet_dependencies = [MemoryDep(name='buf2', index=c0, size=(64,))]
buf3_buf321_buf322.met_dependencies = [MemoryDep(name='arg161_1', index=c0, size=(64,)), StarDep(name='arg161_1')]
buf3_buf321_buf322.snodes = ['buf3', 'buf321', 'buf322']


buf4: SchedulerNode(ComputedBuffer)
buf4.writes = 
    [   MemoryDep(name='buf4', index=c0, size=(64, 4096)),
        MemoryDep(name='buf4', index=c0, size=(64,))]
buf4.unmet_dependencies = 
    [   MemoryDep(name='buf0', index=256*c0 + 16384*c1 + c2, size=(64, 16, 256)),
        MemoryDep(name='buf3', index=c0, size=(64, 4096))]
buf4.met_dependencies = []
buf4.group.device = cpu
buf4.group.iteration = ((64,), (16, 256))
buf4.sizes = ([64], [16, 256])
class buf4_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 256}
    index0 = 256*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf3', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf4', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf5: SchedulerNode(ComputedBuffer)
buf5.writes = [MemoryDep(name='buf5', index=c0, size=(262144,))]
buf5.unmet_dependencies = 
    [   MemoryDep(name='buf0', index=c0, size=(262144,)),
        MemoryDep(name='buf3', index=c1, size=(16, 64, 256)),
        MemoryDep(name='buf4', index=c1, size=(16, 64, 256))]
buf5.met_dependencies = 
    [   MemoryDep(name='arg1_1', index=c1, size=(16, 64, 256)),
        MemoryDep(name='arg2_1', index=c1, size=(16, 64, 256))]
buf5.group.device = cpu
buf5.group.iteration = ((16, 64, 256), ())
buf5.sizes = ([16, 64, 256], [])
class buf5_loop_body:
    var_ranges = {z0: 16, z1: 64, z2: 256}
    index0 = 16384*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf3', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf4', get_index_2)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg2_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf5', get_index_5, relu, None)
        return store


buf6: SchedulerNode(ComputedBuffer)
buf6.writes = [MemoryDep(name='buf6', index=c0, size=(65536,))]
buf6.unmet_dependencies = 
    [   MemoryDep(name='buf5', index=32*c0 + 2*c1 + 1, size=(8192, 8)),
        MemoryDep(name='buf5', index=32*c0 + 2*c1 + 15, size=(8192, 8)),
        MemoryDep(name='buf5', index=32*c0 + 2*c1 + 16, size=(8192, 8)),
        MemoryDep(name='buf5', index=32*c0 + 2*c1 + 17, size=(8192, 8)),
        MemoryDep(name='buf5', index=32*c0 + 2*c1 - 1, size=(8192, 8)),
        MemoryDep(name='buf5', index=32*c0 + 2*c1 - 15, size=(8192, 8)),
        MemoryDep(name='buf5', index=32*c0 + 2*c1 - 16, size=(8192, 8)),
        MemoryDep(name='buf5', index=32*c0 + 2*c1 - 17, size=(8192, 8)),
        MemoryDep(name='buf5', index=32*c0 + 2*c1, size=(8192, 8))]
buf6.met_dependencies = []
buf6.group.device = cpu
buf6.group.iteration = ((1024, 8, 8), ())
buf6.sizes = ([1024, 8, 8], [])
class buf6_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 8}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 256*z0 + 32*z1 + 2*z2 - 17
    index3 = 2*z2
    index4 = 256*z0 + 32*z1 + 2*z2 - 16
    index5 = 2*z2 + 1
    index6 = 256*z0 + 32*z1 + 2*z2 - 15
    index7 = 2*z1
    index8 = 256*z0 + 32*z1 + 2*z2 - 1
    index9 = 256*z0 + 32*z1 + 2*z2
    index10 = 256*z0 + 32*z1 + 2*z2 + 1
    index11 = 2*z1 + 1
    index12 = 256*z0 + 32*z1 + 2*z2 + 15
    index13 = 256*z0 + 32*z1 + 2*z2 + 16
    index14 = 256*z0 + 32*z1 + 2*z2 + 17
    index15 = 64*z0 + 8*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(16, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(16, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(16, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(16, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(16, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(16, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(16, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(16, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(16, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(16, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(16, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(16, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(16, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(16, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(16, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(16, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(16, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index15')
        store = ops.store('buf6', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf5', get_index)
        return load


buf8: ExternKernelSchedulerNode(Convolution)
buf8.writes = [StarDep(name='buf8')]
buf8.unmet_dependencies = [StarDep(name='buf6')]
buf8.met_dependencies = [StarDep(name='arg3_1')]
buf8.node.kernel = aten.convolution


buf10: SchedulerNode(ComputedBuffer)
buf10.writes = 
    [   MemoryDep(name='buf10', index=c0, size=(64, 1024)),
        MemoryDep(name='buf10', index=c0, size=(64,))]
buf10.unmet_dependencies = [MemoryDep(name='buf8', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64))]
buf10.met_dependencies = []
buf10.group.device = cpu
buf10.group.iteration = ((64,), (16, 64))
buf10.sizes = ([64], [16, 64])
class buf10_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf10', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf11_buf327_buf328: FusedSchedulerNode(NoneType)
buf11_buf327_buf328.writes = 
    [   MemoryDep(name='buf11', index=c0, size=(64,)),
        MemoryDep(name='buf327', index=c0, size=(64,)),
        MemoryDep(name='buf328', index=c0, size=(64,))]
buf11_buf327_buf328.unmet_dependencies = [MemoryDep(name='buf10', index=c0, size=(64,))]
buf11_buf327_buf328.met_dependencies = [MemoryDep(name='arg164_1', index=c0, size=(64,)), StarDep(name='arg164_1')]
buf11_buf327_buf328.snodes = ['buf11', 'buf327', 'buf328']


buf12: SchedulerNode(ComputedBuffer)
buf12.writes = 
    [   MemoryDep(name='buf12', index=c0, size=(64, 1024)),
        MemoryDep(name='buf12', index=c0, size=(64,))]
buf12.unmet_dependencies = 
    [   MemoryDep(name='buf11', index=c0, size=(64, 1024)),
        MemoryDep(name='buf8', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64))]
buf12.met_dependencies = []
buf12.group.device = cpu
buf12.group.iteration = ((64,), (16, 64))
buf12.sizes = ([64], [16, 64])
class buf12_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf11', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf12', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf13: SchedulerNode(ComputedBuffer)
buf13.writes = [MemoryDep(name='buf13', index=c0, size=(65536,))]
buf13.unmet_dependencies = 
    [   MemoryDep(name='buf11', index=c1, size=(16, 64, 64)),
        MemoryDep(name='buf12', index=c1, size=(16, 64, 64)),
        MemoryDep(name='buf8', index=c0, size=(65536,))]
buf13.met_dependencies = 
    [   MemoryDep(name='arg4_1', index=c1, size=(16, 64, 64)),
        MemoryDep(name='arg5_1', index=c1, size=(16, 64, 64))]
buf13.group.device = cpu
buf13.group.iteration = ((16, 64, 64), ())
buf13.sizes = ([16, 64, 64], [])
class buf13_loop_body:
    var_ranges = {z0: 16, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf11', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf12', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf13', get_index_5, relu, None)
        return store


buf14: ExternKernelSchedulerNode(Convolution)
buf14.writes = [StarDep(name='buf14')]
buf14.unmet_dependencies = [StarDep(name='buf13')]
buf14.met_dependencies = [StarDep(name='arg6_1')]
buf14.node.kernel = aten.convolution


buf16: SchedulerNode(ComputedBuffer)
buf16.writes = 
    [   MemoryDep(name='buf16', index=c0, size=(64, 1024)),
        MemoryDep(name='buf16', index=c0, size=(64,))]
buf16.unmet_dependencies = [MemoryDep(name='buf14', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64))]
buf16.met_dependencies = []
buf16.group.device = cpu
buf16.group.iteration = ((64,), (16, 64))
buf16.sizes = ([64], [16, 64])
class buf16_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf16', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf17_buf333_buf334: FusedSchedulerNode(NoneType)
buf17_buf333_buf334.writes = 
    [   MemoryDep(name='buf17', index=c0, size=(64,)),
        MemoryDep(name='buf333', index=c0, size=(64,)),
        MemoryDep(name='buf334', index=c0, size=(64,))]
buf17_buf333_buf334.unmet_dependencies = [MemoryDep(name='buf16', index=c0, size=(64,))]
buf17_buf333_buf334.met_dependencies = [MemoryDep(name='arg167_1', index=c0, size=(64,)), StarDep(name='arg167_1')]
buf17_buf333_buf334.snodes = ['buf17', 'buf333', 'buf334']


buf18: SchedulerNode(ComputedBuffer)
buf18.writes = 
    [   MemoryDep(name='buf18', index=c0, size=(64, 1024)),
        MemoryDep(name='buf18', index=c0, size=(64,))]
buf18.unmet_dependencies = 
    [   MemoryDep(name='buf14', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64)),
        MemoryDep(name='buf17', index=c0, size=(64, 1024))]
buf18.met_dependencies = []
buf18.group.device = cpu
buf18.group.iteration = ((64,), (16, 64))
buf18.sizes = ([64], [16, 64])
class buf18_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf17', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf18', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf19: SchedulerNode(ComputedBuffer)
buf19.writes = [MemoryDep(name='buf19', index=c0, size=(65536,))]
buf19.unmet_dependencies = 
    [   MemoryDep(name='buf14', index=c0, size=(65536,)),
        MemoryDep(name='buf17', index=c1, size=(16, 64, 64)),
        MemoryDep(name='buf18', index=c1, size=(16, 64, 64))]
buf19.met_dependencies = 
    [   MemoryDep(name='arg7_1', index=c1, size=(16, 64, 64)),
        MemoryDep(name='arg8_1', index=c1, size=(16, 64, 64))]
buf19.group.device = cpu
buf19.group.iteration = ((16, 64, 64), ())
buf19.sizes = ([16, 64, 64], [])
class buf19_loop_body:
    var_ranges = {z0: 16, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf17', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf18', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg7_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg8_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf19', get_index_5, relu, None)
        return store


buf20: ExternKernelSchedulerNode(Convolution)
buf20.writes = [StarDep(name='buf20')]
buf20.unmet_dependencies = [StarDep(name='buf19')]
buf20.met_dependencies = [StarDep(name='arg9_1')]
buf20.node.kernel = aten.convolution


buf22: SchedulerNode(ComputedBuffer)
buf22.writes = 
    [   MemoryDep(name='buf22', index=c0, size=(256, 1024)),
        MemoryDep(name='buf22', index=c0, size=(256,))]
buf22.unmet_dependencies = [MemoryDep(name='buf20', index=64*c0 + 16384*c1 + c2, size=(256, 16, 64))]
buf22.met_dependencies = []
buf22.group.device = cpu
buf22.group.iteration = ((256,), (16, 64))
buf22.sizes = ([256], [16, 64])
class buf22_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf22', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf23_buf339_buf340: FusedSchedulerNode(NoneType)
buf23_buf339_buf340.writes = 
    [   MemoryDep(name='buf23', index=c0, size=(256,)),
        MemoryDep(name='buf339', index=c0, size=(256,)),
        MemoryDep(name='buf340', index=c0, size=(256,))]
buf23_buf339_buf340.unmet_dependencies = [MemoryDep(name='buf22', index=c0, size=(256,))]
buf23_buf339_buf340.met_dependencies = [MemoryDep(name='arg170_1', index=c0, size=(256,)), StarDep(name='arg170_1')]
buf23_buf339_buf340.snodes = ['buf23', 'buf339', 'buf340']


buf24: SchedulerNode(ComputedBuffer)
buf24.writes = 
    [   MemoryDep(name='buf24', index=c0, size=(256, 1024)),
        MemoryDep(name='buf24', index=c0, size=(256,))]
buf24.unmet_dependencies = 
    [   MemoryDep(name='buf20', index=64*c0 + 16384*c1 + c2, size=(256, 16, 64)),
        MemoryDep(name='buf23', index=c0, size=(256, 1024))]
buf24.met_dependencies = []
buf24.group.device = cpu
buf24.group.iteration = ((256,), (16, 64))
buf24.sizes = ([256], [16, 64])
class buf24_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf23', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf24', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf25: ExternKernelSchedulerNode(Convolution)
buf25.writes = [StarDep(name='buf25')]
buf25.unmet_dependencies = [StarDep(name='buf6')]
buf25.met_dependencies = [StarDep(name='arg12_1')]
buf25.node.kernel = aten.convolution


buf27: SchedulerNode(ComputedBuffer)
buf27.writes = 
    [   MemoryDep(name='buf27', index=c0, size=(256, 1024)),
        MemoryDep(name='buf27', index=c0, size=(256,))]
buf27.unmet_dependencies = [MemoryDep(name='buf25', index=64*c0 + 16384*c1 + c2, size=(256, 16, 64))]
buf27.met_dependencies = []
buf27.group.device = cpu
buf27.group.iteration = ((256,), (16, 64))
buf27.sizes = ([256], [16, 64])
class buf27_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf27', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf28_buf345_buf346: FusedSchedulerNode(NoneType)
buf28_buf345_buf346.writes = 
    [   MemoryDep(name='buf28', index=c0, size=(256,)),
        MemoryDep(name='buf345', index=c0, size=(256,)),
        MemoryDep(name='buf346', index=c0, size=(256,))]
buf28_buf345_buf346.unmet_dependencies = [MemoryDep(name='buf27', index=c0, size=(256,))]
buf28_buf345_buf346.met_dependencies = [MemoryDep(name='arg173_1', index=c0, size=(256,)), StarDep(name='arg173_1')]
buf28_buf345_buf346.snodes = ['buf28', 'buf345', 'buf346']


buf29: SchedulerNode(ComputedBuffer)
buf29.writes = 
    [   MemoryDep(name='buf29', index=c0, size=(256, 1024)),
        MemoryDep(name='buf29', index=c0, size=(256,))]
buf29.unmet_dependencies = 
    [   MemoryDep(name='buf25', index=64*c0 + 16384*c1 + c2, size=(256, 16, 64)),
        MemoryDep(name='buf28', index=c0, size=(256, 1024))]
buf29.met_dependencies = []
buf29.group.device = cpu
buf29.group.iteration = ((256,), (16, 64))
buf29.sizes = ([256], [16, 64])
class buf29_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf28', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf29', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf30: SchedulerNode(ComputedBuffer)
buf30.writes = [MemoryDep(name='buf30', index=c0, size=(262144,))]
buf30.unmet_dependencies = 
    [   MemoryDep(name='buf20', index=c0, size=(262144,)),
        MemoryDep(name='buf23', index=c1, size=(16, 256, 64)),
        MemoryDep(name='buf24', index=c1, size=(16, 256, 64)),
        MemoryDep(name='buf25', index=c0, size=(262144,)),
        MemoryDep(name='buf28', index=c1, size=(16, 256, 64)),
        MemoryDep(name='buf29', index=c1, size=(16, 256, 64))]
buf30.met_dependencies = 
    [   MemoryDep(name='arg10_1', index=c1, size=(16, 256, 64)),
        MemoryDep(name='arg11_1', index=c1, size=(16, 256, 64)),
        MemoryDep(name='arg13_1', index=c1, size=(16, 256, 64)),
        MemoryDep(name='arg14_1', index=c1, size=(16, 256, 64))]
buf30.group.device = cpu
buf30.group.iteration = ((16, 256, 64), ())
buf30.sizes = ([16, 256, 64], [])
class buf30_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 64}
    index0 = 16384*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf23', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf24', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg10_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg11_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf25', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf28', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf29', get_index_7)
        constant_2 = ops.constant(1024, torch.float32)
        div_1 = ops.div(load_7, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg13_1', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg14_1', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf30', get_index_10, add_4, None)
        return store


buf31: SchedulerNode(ComputedBuffer)
buf31.writes = [MemoryDep(name='buf31', index=c0, size=(262144,))]
buf31.unmet_dependencies = [MemoryDep(name='buf30', index=c0, size=(262144,))]
buf31.met_dependencies = []
buf31.group.device = cpu
buf31.group.iteration = ((262144,), ())
buf31.sizes = ([262144], [])
class buf31_loop_body:
    var_ranges = {z0: 262144}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf31', get_index_1, relu, None)
        return store


buf32: ExternKernelSchedulerNode(Convolution)
buf32.writes = [StarDep(name='buf32')]
buf32.unmet_dependencies = [StarDep(name='buf31')]
buf32.met_dependencies = [StarDep(name='arg15_1')]
buf32.node.kernel = aten.convolution


buf34: SchedulerNode(ComputedBuffer)
buf34.writes = 
    [   MemoryDep(name='buf34', index=c0, size=(64, 1024)),
        MemoryDep(name='buf34', index=c0, size=(64,))]
buf34.unmet_dependencies = [MemoryDep(name='buf32', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64))]
buf34.met_dependencies = []
buf34.group.device = cpu
buf34.group.iteration = ((64,), (16, 64))
buf34.sizes = ([64], [16, 64])
class buf34_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf34', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf35_buf351_buf352: FusedSchedulerNode(NoneType)
buf35_buf351_buf352.writes = 
    [   MemoryDep(name='buf35', index=c0, size=(64,)),
        MemoryDep(name='buf351', index=c0, size=(64,)),
        MemoryDep(name='buf352', index=c0, size=(64,))]
buf35_buf351_buf352.unmet_dependencies = [MemoryDep(name='buf34', index=c0, size=(64,))]
buf35_buf351_buf352.met_dependencies = [MemoryDep(name='arg176_1', index=c0, size=(64,)), StarDep(name='arg176_1')]
buf35_buf351_buf352.snodes = ['buf35', 'buf351', 'buf352']


buf36: SchedulerNode(ComputedBuffer)
buf36.writes = 
    [   MemoryDep(name='buf36', index=c0, size=(64, 1024)),
        MemoryDep(name='buf36', index=c0, size=(64,))]
buf36.unmet_dependencies = 
    [   MemoryDep(name='buf32', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64)),
        MemoryDep(name='buf35', index=c0, size=(64, 1024))]
buf36.met_dependencies = []
buf36.group.device = cpu
buf36.group.iteration = ((64,), (16, 64))
buf36.sizes = ([64], [16, 64])
class buf36_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf35', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf36', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf37: SchedulerNode(ComputedBuffer)
buf37.writes = [MemoryDep(name='buf37', index=c0, size=(65536,))]
buf37.unmet_dependencies = 
    [   MemoryDep(name='buf32', index=c0, size=(65536,)),
        MemoryDep(name='buf35', index=c1, size=(16, 64, 64)),
        MemoryDep(name='buf36', index=c1, size=(16, 64, 64))]
buf37.met_dependencies = 
    [   MemoryDep(name='arg16_1', index=c1, size=(16, 64, 64)),
        MemoryDep(name='arg17_1', index=c1, size=(16, 64, 64))]
buf37.group.device = cpu
buf37.group.iteration = ((16, 64, 64), ())
buf37.sizes = ([16, 64, 64], [])
class buf37_loop_body:
    var_ranges = {z0: 16, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf35', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf36', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg16_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg17_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf37', get_index_5, relu, None)
        return store


buf38: ExternKernelSchedulerNode(Convolution)
buf38.writes = [StarDep(name='buf38')]
buf38.unmet_dependencies = [StarDep(name='buf37')]
buf38.met_dependencies = [StarDep(name='arg18_1')]
buf38.node.kernel = aten.convolution


buf40: SchedulerNode(ComputedBuffer)
buf40.writes = 
    [   MemoryDep(name='buf40', index=c0, size=(64, 1024)),
        MemoryDep(name='buf40', index=c0, size=(64,))]
buf40.unmet_dependencies = [MemoryDep(name='buf38', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64))]
buf40.met_dependencies = []
buf40.group.device = cpu
buf40.group.iteration = ((64,), (16, 64))
buf40.sizes = ([64], [16, 64])
class buf40_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf40', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf41_buf357_buf358: FusedSchedulerNode(NoneType)
buf41_buf357_buf358.writes = 
    [   MemoryDep(name='buf357', index=c0, size=(64,)),
        MemoryDep(name='buf358', index=c0, size=(64,)),
        MemoryDep(name='buf41', index=c0, size=(64,))]
buf41_buf357_buf358.unmet_dependencies = [MemoryDep(name='buf40', index=c0, size=(64,))]
buf41_buf357_buf358.met_dependencies = [MemoryDep(name='arg179_1', index=c0, size=(64,)), StarDep(name='arg179_1')]
buf41_buf357_buf358.snodes = ['buf41', 'buf357', 'buf358']


buf42: SchedulerNode(ComputedBuffer)
buf42.writes = 
    [   MemoryDep(name='buf42', index=c0, size=(64, 1024)),
        MemoryDep(name='buf42', index=c0, size=(64,))]
buf42.unmet_dependencies = 
    [   MemoryDep(name='buf38', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64)),
        MemoryDep(name='buf41', index=c0, size=(64, 1024))]
buf42.met_dependencies = []
buf42.group.device = cpu
buf42.group.iteration = ((64,), (16, 64))
buf42.sizes = ([64], [16, 64])
class buf42_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf41', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf42', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf43: SchedulerNode(ComputedBuffer)
buf43.writes = [MemoryDep(name='buf43', index=c0, size=(65536,))]
buf43.unmet_dependencies = 
    [   MemoryDep(name='buf38', index=c0, size=(65536,)),
        MemoryDep(name='buf41', index=c1, size=(16, 64, 64)),
        MemoryDep(name='buf42', index=c1, size=(16, 64, 64))]
buf43.met_dependencies = 
    [   MemoryDep(name='arg19_1', index=c1, size=(16, 64, 64)),
        MemoryDep(name='arg20_1', index=c1, size=(16, 64, 64))]
buf43.group.device = cpu
buf43.group.iteration = ((16, 64, 64), ())
buf43.sizes = ([16, 64, 64], [])
class buf43_loop_body:
    var_ranges = {z0: 16, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf41', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf42', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg20_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf43', get_index_5, relu, None)
        return store


buf44: ExternKernelSchedulerNode(Convolution)
buf44.writes = [StarDep(name='buf44')]
buf44.unmet_dependencies = [StarDep(name='buf43')]
buf44.met_dependencies = [StarDep(name='arg21_1')]
buf44.node.kernel = aten.convolution


buf46: SchedulerNode(ComputedBuffer)
buf46.writes = 
    [   MemoryDep(name='buf46', index=c0, size=(256, 1024)),
        MemoryDep(name='buf46', index=c0, size=(256,))]
buf46.unmet_dependencies = [MemoryDep(name='buf44', index=64*c0 + 16384*c1 + c2, size=(256, 16, 64))]
buf46.met_dependencies = []
buf46.group.device = cpu
buf46.group.iteration = ((256,), (16, 64))
buf46.sizes = ([256], [16, 64])
class buf46_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf46', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf47_buf363_buf364: FusedSchedulerNode(NoneType)
buf47_buf363_buf364.writes = 
    [   MemoryDep(name='buf363', index=c0, size=(256,)),
        MemoryDep(name='buf364', index=c0, size=(256,)),
        MemoryDep(name='buf47', index=c0, size=(256,))]
buf47_buf363_buf364.unmet_dependencies = [MemoryDep(name='buf46', index=c0, size=(256,))]
buf47_buf363_buf364.met_dependencies = [MemoryDep(name='arg182_1', index=c0, size=(256,)), StarDep(name='arg182_1')]
buf47_buf363_buf364.snodes = ['buf47', 'buf363', 'buf364']


buf48: SchedulerNode(ComputedBuffer)
buf48.writes = 
    [   MemoryDep(name='buf48', index=c0, size=(256, 1024)),
        MemoryDep(name='buf48', index=c0, size=(256,))]
buf48.unmet_dependencies = 
    [   MemoryDep(name='buf44', index=64*c0 + 16384*c1 + c2, size=(256, 16, 64)),
        MemoryDep(name='buf47', index=c0, size=(256, 1024))]
buf48.met_dependencies = []
buf48.group.device = cpu
buf48.group.iteration = ((256,), (16, 64))
buf48.sizes = ([256], [16, 64])
class buf48_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf47', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf48', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf49: SchedulerNode(ComputedBuffer)
buf49.writes = [MemoryDep(name='buf49', index=c0, size=(262144,))]
buf49.unmet_dependencies = 
    [   MemoryDep(name='buf31', index=c0, size=(262144,)),
        MemoryDep(name='buf44', index=c0, size=(262144,)),
        MemoryDep(name='buf47', index=c1, size=(16, 256, 64)),
        MemoryDep(name='buf48', index=c1, size=(16, 256, 64))]
buf49.met_dependencies = 
    [   MemoryDep(name='arg22_1', index=c1, size=(16, 256, 64)),
        MemoryDep(name='arg23_1', index=c1, size=(16, 256, 64))]
buf49.group.device = cpu
buf49.group.iteration = ((16, 256, 64), ())
buf49.sizes = ([16, 256, 64], [])
class buf49_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 64}
    index0 = 16384*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf47', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf48', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg22_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg23_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf31', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf49', get_index_6, relu, None)
        return store


buf50: ExternKernelSchedulerNode(Convolution)
buf50.writes = [StarDep(name='buf50')]
buf50.unmet_dependencies = [StarDep(name='buf49')]
buf50.met_dependencies = [StarDep(name='arg24_1')]
buf50.node.kernel = aten.convolution


buf52: SchedulerNode(ComputedBuffer)
buf52.writes = 
    [   MemoryDep(name='buf52', index=c0, size=(64, 1024)),
        MemoryDep(name='buf52', index=c0, size=(64,))]
buf52.unmet_dependencies = [MemoryDep(name='buf50', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64))]
buf52.met_dependencies = []
buf52.group.device = cpu
buf52.group.iteration = ((64,), (16, 64))
buf52.sizes = ([64], [16, 64])
class buf52_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf52', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf53_buf369_buf370: FusedSchedulerNode(NoneType)
buf53_buf369_buf370.writes = 
    [   MemoryDep(name='buf369', index=c0, size=(64,)),
        MemoryDep(name='buf370', index=c0, size=(64,)),
        MemoryDep(name='buf53', index=c0, size=(64,))]
buf53_buf369_buf370.unmet_dependencies = [MemoryDep(name='buf52', index=c0, size=(64,))]
buf53_buf369_buf370.met_dependencies = [MemoryDep(name='arg185_1', index=c0, size=(64,)), StarDep(name='arg185_1')]
buf53_buf369_buf370.snodes = ['buf53', 'buf369', 'buf370']


buf54: SchedulerNode(ComputedBuffer)
buf54.writes = 
    [   MemoryDep(name='buf54', index=c0, size=(64, 1024)),
        MemoryDep(name='buf54', index=c0, size=(64,))]
buf54.unmet_dependencies = 
    [   MemoryDep(name='buf50', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64)),
        MemoryDep(name='buf53', index=c0, size=(64, 1024))]
buf54.met_dependencies = []
buf54.group.device = cpu
buf54.group.iteration = ((64,), (16, 64))
buf54.sizes = ([64], [16, 64])
class buf54_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf53', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf54', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf55: SchedulerNode(ComputedBuffer)
buf55.writes = [MemoryDep(name='buf55', index=c0, size=(65536,))]
buf55.unmet_dependencies = 
    [   MemoryDep(name='buf50', index=c0, size=(65536,)),
        MemoryDep(name='buf53', index=c1, size=(16, 64, 64)),
        MemoryDep(name='buf54', index=c1, size=(16, 64, 64))]
buf55.met_dependencies = 
    [   MemoryDep(name='arg25_1', index=c1, size=(16, 64, 64)),
        MemoryDep(name='arg26_1', index=c1, size=(16, 64, 64))]
buf55.group.device = cpu
buf55.group.iteration = ((16, 64, 64), ())
buf55.sizes = ([16, 64, 64], [])
class buf55_loop_body:
    var_ranges = {z0: 16, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf53', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf54', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg25_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg26_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf55', get_index_5, relu, None)
        return store


buf56: ExternKernelSchedulerNode(Convolution)
buf56.writes = [StarDep(name='buf56')]
buf56.unmet_dependencies = [StarDep(name='buf55')]
buf56.met_dependencies = [StarDep(name='arg27_1')]
buf56.node.kernel = aten.convolution


buf58: SchedulerNode(ComputedBuffer)
buf58.writes = 
    [   MemoryDep(name='buf58', index=c0, size=(64, 1024)),
        MemoryDep(name='buf58', index=c0, size=(64,))]
buf58.unmet_dependencies = [MemoryDep(name='buf56', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64))]
buf58.met_dependencies = []
buf58.group.device = cpu
buf58.group.iteration = ((64,), (16, 64))
buf58.sizes = ([64], [16, 64])
class buf58_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf58', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf59_buf375_buf376: FusedSchedulerNode(NoneType)
buf59_buf375_buf376.writes = 
    [   MemoryDep(name='buf375', index=c0, size=(64,)),
        MemoryDep(name='buf376', index=c0, size=(64,)),
        MemoryDep(name='buf59', index=c0, size=(64,))]
buf59_buf375_buf376.unmet_dependencies = [MemoryDep(name='buf58', index=c0, size=(64,))]
buf59_buf375_buf376.met_dependencies = [MemoryDep(name='arg188_1', index=c0, size=(64,)), StarDep(name='arg188_1')]
buf59_buf375_buf376.snodes = ['buf59', 'buf375', 'buf376']


buf60: SchedulerNode(ComputedBuffer)
buf60.writes = 
    [   MemoryDep(name='buf60', index=c0, size=(64, 1024)),
        MemoryDep(name='buf60', index=c0, size=(64,))]
buf60.unmet_dependencies = 
    [   MemoryDep(name='buf56', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64)),
        MemoryDep(name='buf59', index=c0, size=(64, 1024))]
buf60.met_dependencies = []
buf60.group.device = cpu
buf60.group.iteration = ((64,), (16, 64))
buf60.sizes = ([64], [16, 64])
class buf60_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf59', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf60', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf61: SchedulerNode(ComputedBuffer)
buf61.writes = [MemoryDep(name='buf61', index=c0, size=(65536,))]
buf61.unmet_dependencies = 
    [   MemoryDep(name='buf56', index=c0, size=(65536,)),
        MemoryDep(name='buf59', index=c1, size=(16, 64, 64)),
        MemoryDep(name='buf60', index=c1, size=(16, 64, 64))]
buf61.met_dependencies = 
    [   MemoryDep(name='arg28_1', index=c1, size=(16, 64, 64)),
        MemoryDep(name='arg29_1', index=c1, size=(16, 64, 64))]
buf61.group.device = cpu
buf61.group.iteration = ((16, 64, 64), ())
buf61.sizes = ([16, 64, 64], [])
class buf61_loop_body:
    var_ranges = {z0: 16, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf59', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf60', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg28_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg29_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf61', get_index_5, relu, None)
        return store


buf62: ExternKernelSchedulerNode(Convolution)
buf62.writes = [StarDep(name='buf62')]
buf62.unmet_dependencies = [StarDep(name='buf61')]
buf62.met_dependencies = [StarDep(name='arg30_1')]
buf62.node.kernel = aten.convolution


buf64: SchedulerNode(ComputedBuffer)
buf64.writes = 
    [   MemoryDep(name='buf64', index=c0, size=(256, 1024)),
        MemoryDep(name='buf64', index=c0, size=(256,))]
buf64.unmet_dependencies = [MemoryDep(name='buf62', index=64*c0 + 16384*c1 + c2, size=(256, 16, 64))]
buf64.met_dependencies = []
buf64.group.device = cpu
buf64.group.iteration = ((256,), (16, 64))
buf64.sizes = ([256], [16, 64])
class buf64_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf64', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf65_buf381_buf382: FusedSchedulerNode(NoneType)
buf65_buf381_buf382.writes = 
    [   MemoryDep(name='buf381', index=c0, size=(256,)),
        MemoryDep(name='buf382', index=c0, size=(256,)),
        MemoryDep(name='buf65', index=c0, size=(256,))]
buf65_buf381_buf382.unmet_dependencies = [MemoryDep(name='buf64', index=c0, size=(256,))]
buf65_buf381_buf382.met_dependencies = [MemoryDep(name='arg191_1', index=c0, size=(256,)), StarDep(name='arg191_1')]
buf65_buf381_buf382.snodes = ['buf65', 'buf381', 'buf382']


buf66: SchedulerNode(ComputedBuffer)
buf66.writes = 
    [   MemoryDep(name='buf66', index=c0, size=(256, 1024)),
        MemoryDep(name='buf66', index=c0, size=(256,))]
buf66.unmet_dependencies = 
    [   MemoryDep(name='buf62', index=64*c0 + 16384*c1 + c2, size=(256, 16, 64)),
        MemoryDep(name='buf65', index=c0, size=(256, 1024))]
buf66.met_dependencies = []
buf66.group.device = cpu
buf66.group.iteration = ((256,), (16, 64))
buf66.sizes = ([256], [16, 64])
class buf66_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf65', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf66', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf67: SchedulerNode(ComputedBuffer)
buf67.writes = [MemoryDep(name='buf67', index=c0, size=(262144,))]
buf67.unmet_dependencies = 
    [   MemoryDep(name='buf49', index=c0, size=(262144,)),
        MemoryDep(name='buf62', index=c0, size=(262144,)),
        MemoryDep(name='buf65', index=c1, size=(16, 256, 64)),
        MemoryDep(name='buf66', index=c1, size=(16, 256, 64))]
buf67.met_dependencies = 
    [   MemoryDep(name='arg31_1', index=c1, size=(16, 256, 64)),
        MemoryDep(name='arg32_1', index=c1, size=(16, 256, 64))]
buf67.group.device = cpu
buf67.group.iteration = ((16, 256, 64), ())
buf67.sizes = ([16, 256, 64], [])
class buf67_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 64}
    index0 = 16384*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf65', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf66', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg31_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg32_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf49', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf67', get_index_6, relu, None)
        return store


buf68: ExternKernelSchedulerNode(Convolution)
buf68.writes = [StarDep(name='buf68')]
buf68.unmet_dependencies = [StarDep(name='buf67')]
buf68.met_dependencies = [StarDep(name='arg33_1')]
buf68.node.kernel = aten.convolution


buf70: SchedulerNode(ComputedBuffer)
buf70.writes = 
    [   MemoryDep(name='buf70', index=c0, size=(128, 1024)),
        MemoryDep(name='buf70', index=c0, size=(128,))]
buf70.unmet_dependencies = [MemoryDep(name='buf68', index=64*c0 + 8192*c1 + c2, size=(128, 16, 64))]
buf70.met_dependencies = []
buf70.group.device = cpu
buf70.group.iteration = ((128,), (16, 64))
buf70.sizes = ([128], [16, 64])
class buf70_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 64}
    index0 = 64*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf70', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf71_buf387_buf388: FusedSchedulerNode(NoneType)
buf71_buf387_buf388.writes = 
    [   MemoryDep(name='buf387', index=c0, size=(128,)),
        MemoryDep(name='buf388', index=c0, size=(128,)),
        MemoryDep(name='buf71', index=c0, size=(128,))]
buf71_buf387_buf388.unmet_dependencies = [MemoryDep(name='buf70', index=c0, size=(128,))]
buf71_buf387_buf388.met_dependencies = [MemoryDep(name='arg194_1', index=c0, size=(128,)), StarDep(name='arg194_1')]
buf71_buf387_buf388.snodes = ['buf71', 'buf387', 'buf388']


buf72: SchedulerNode(ComputedBuffer)
buf72.writes = 
    [   MemoryDep(name='buf72', index=c0, size=(128, 1024)),
        MemoryDep(name='buf72', index=c0, size=(128,))]
buf72.unmet_dependencies = 
    [   MemoryDep(name='buf68', index=64*c0 + 8192*c1 + c2, size=(128, 16, 64)),
        MemoryDep(name='buf71', index=c0, size=(128, 1024))]
buf72.met_dependencies = []
buf72.group.device = cpu
buf72.group.iteration = ((128,), (16, 64))
buf72.sizes = ([128], [16, 64])
class buf72_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 64}
    index0 = 64*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf71', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf72', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf73: SchedulerNode(ComputedBuffer)
buf73.writes = [MemoryDep(name='buf73', index=c0, size=(131072,))]
buf73.unmet_dependencies = 
    [   MemoryDep(name='buf68', index=c0, size=(131072,)),
        MemoryDep(name='buf71', index=c1, size=(16, 128, 64)),
        MemoryDep(name='buf72', index=c1, size=(16, 128, 64))]
buf73.met_dependencies = 
    [   MemoryDep(name='arg34_1', index=c1, size=(16, 128, 64)),
        MemoryDep(name='arg35_1', index=c1, size=(16, 128, 64))]
buf73.group.device = cpu
buf73.group.iteration = ((16, 128, 64), ())
buf73.sizes = ([16, 128, 64], [])
class buf73_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 64}
    index0 = 8192*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf71', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf72', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg34_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg35_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf73', get_index_5, relu, None)
        return store


buf74: ExternKernelSchedulerNode(Convolution)
buf74.writes = [StarDep(name='buf74')]
buf74.unmet_dependencies = [StarDep(name='buf73')]
buf74.met_dependencies = [StarDep(name='arg36_1')]
buf74.node.kernel = aten.convolution


buf76: SchedulerNode(ComputedBuffer)
buf76.writes = 
    [   MemoryDep(name='buf76', index=c0, size=(128, 256)),
        MemoryDep(name='buf76', index=c0, size=(128,))]
buf76.unmet_dependencies = [MemoryDep(name='buf74', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16))]
buf76.met_dependencies = []
buf76.group.device = cpu
buf76.group.iteration = ((128,), (16, 16))
buf76.sizes = ([128], [16, 16])
class buf76_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf76', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf77_buf393_buf394: FusedSchedulerNode(NoneType)
buf77_buf393_buf394.writes = 
    [   MemoryDep(name='buf393', index=c0, size=(128,)),
        MemoryDep(name='buf394', index=c0, size=(128,)),
        MemoryDep(name='buf77', index=c0, size=(128,))]
buf77_buf393_buf394.unmet_dependencies = [MemoryDep(name='buf76', index=c0, size=(128,))]
buf77_buf393_buf394.met_dependencies = [MemoryDep(name='arg197_1', index=c0, size=(128,)), StarDep(name='arg197_1')]
buf77_buf393_buf394.snodes = ['buf77', 'buf393', 'buf394']


buf78: SchedulerNode(ComputedBuffer)
buf78.writes = 
    [   MemoryDep(name='buf78', index=c0, size=(128, 256)),
        MemoryDep(name='buf78', index=c0, size=(128,))]
buf78.unmet_dependencies = 
    [   MemoryDep(name='buf74', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16)),
        MemoryDep(name='buf77', index=c0, size=(128, 256))]
buf78.met_dependencies = []
buf78.group.device = cpu
buf78.group.iteration = ((128,), (16, 16))
buf78.sizes = ([128], [16, 16])
class buf78_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf77', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf78', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf79: SchedulerNode(ComputedBuffer)
buf79.writes = [MemoryDep(name='buf79', index=c0, size=(32768,))]
buf79.unmet_dependencies = 
    [   MemoryDep(name='buf74', index=c0, size=(32768,)),
        MemoryDep(name='buf77', index=c1, size=(16, 128, 16)),
        MemoryDep(name='buf78', index=c1, size=(16, 128, 16))]
buf79.met_dependencies = 
    [   MemoryDep(name='arg37_1', index=c1, size=(16, 128, 16)),
        MemoryDep(name='arg38_1', index=c1, size=(16, 128, 16))]
buf79.group.device = cpu
buf79.group.iteration = ((16, 128, 16), ())
buf79.sizes = ([16, 128, 16], [])
class buf79_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf77', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf78', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg37_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg38_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf79', get_index_5, relu, None)
        return store


buf80: ExternKernelSchedulerNode(Convolution)
buf80.writes = [StarDep(name='buf80')]
buf80.unmet_dependencies = [StarDep(name='buf79')]
buf80.met_dependencies = [StarDep(name='arg39_1')]
buf80.node.kernel = aten.convolution


buf82: SchedulerNode(ComputedBuffer)
buf82.writes = 
    [   MemoryDep(name='buf82', index=c0, size=(512, 256)),
        MemoryDep(name='buf82', index=c0, size=(512,))]
buf82.unmet_dependencies = [MemoryDep(name='buf80', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16))]
buf82.met_dependencies = []
buf82.group.device = cpu
buf82.group.iteration = ((512,), (16, 16))
buf82.sizes = ([512], [16, 16])
class buf82_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf82', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf83_buf399_buf400: FusedSchedulerNode(NoneType)
buf83_buf399_buf400.writes = 
    [   MemoryDep(name='buf399', index=c0, size=(512,)),
        MemoryDep(name='buf400', index=c0, size=(512,)),
        MemoryDep(name='buf83', index=c0, size=(512,))]
buf83_buf399_buf400.unmet_dependencies = [MemoryDep(name='buf82', index=c0, size=(512,))]
buf83_buf399_buf400.met_dependencies = [MemoryDep(name='arg200_1', index=c0, size=(512,)), StarDep(name='arg200_1')]
buf83_buf399_buf400.snodes = ['buf83', 'buf399', 'buf400']


buf84: SchedulerNode(ComputedBuffer)
buf84.writes = 
    [   MemoryDep(name='buf84', index=c0, size=(512, 256)),
        MemoryDep(name='buf84', index=c0, size=(512,))]
buf84.unmet_dependencies = 
    [   MemoryDep(name='buf80', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16)),
        MemoryDep(name='buf83', index=c0, size=(512, 256))]
buf84.met_dependencies = []
buf84.group.device = cpu
buf84.group.iteration = ((512,), (16, 16))
buf84.sizes = ([512], [16, 16])
class buf84_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf83', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf84', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf85: ExternKernelSchedulerNode(Convolution)
buf85.writes = [StarDep(name='buf85')]
buf85.unmet_dependencies = [StarDep(name='buf67')]
buf85.met_dependencies = [StarDep(name='arg42_1')]
buf85.node.kernel = aten.convolution


buf87: SchedulerNode(ComputedBuffer)
buf87.writes = 
    [   MemoryDep(name='buf87', index=c0, size=(512, 256)),
        MemoryDep(name='buf87', index=c0, size=(512,))]
buf87.unmet_dependencies = [MemoryDep(name='buf85', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16))]
buf87.met_dependencies = []
buf87.group.device = cpu
buf87.group.iteration = ((512,), (16, 16))
buf87.sizes = ([512], [16, 16])
class buf87_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf87', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf88_buf405_buf406: FusedSchedulerNode(NoneType)
buf88_buf405_buf406.writes = 
    [   MemoryDep(name='buf405', index=c0, size=(512,)),
        MemoryDep(name='buf406', index=c0, size=(512,)),
        MemoryDep(name='buf88', index=c0, size=(512,))]
buf88_buf405_buf406.unmet_dependencies = [MemoryDep(name='buf87', index=c0, size=(512,))]
buf88_buf405_buf406.met_dependencies = [MemoryDep(name='arg203_1', index=c0, size=(512,)), StarDep(name='arg203_1')]
buf88_buf405_buf406.snodes = ['buf88', 'buf405', 'buf406']


buf89: SchedulerNode(ComputedBuffer)
buf89.writes = 
    [   MemoryDep(name='buf89', index=c0, size=(512, 256)),
        MemoryDep(name='buf89', index=c0, size=(512,))]
buf89.unmet_dependencies = 
    [   MemoryDep(name='buf85', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16)),
        MemoryDep(name='buf88', index=c0, size=(512, 256))]
buf89.met_dependencies = []
buf89.group.device = cpu
buf89.group.iteration = ((512,), (16, 16))
buf89.sizes = ([512], [16, 16])
class buf89_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf88', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf89', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf90: SchedulerNode(ComputedBuffer)
buf90.writes = [MemoryDep(name='buf90', index=c0, size=(131072,))]
buf90.unmet_dependencies = 
    [   MemoryDep(name='buf80', index=c0, size=(131072,)),
        MemoryDep(name='buf83', index=c1, size=(16, 512, 16)),
        MemoryDep(name='buf84', index=c1, size=(16, 512, 16)),
        MemoryDep(name='buf85', index=c0, size=(131072,)),
        MemoryDep(name='buf88', index=c1, size=(16, 512, 16)),
        MemoryDep(name='buf89', index=c1, size=(16, 512, 16))]
buf90.met_dependencies = 
    [   MemoryDep(name='arg40_1', index=c1, size=(16, 512, 16)),
        MemoryDep(name='arg41_1', index=c1, size=(16, 512, 16)),
        MemoryDep(name='arg43_1', index=c1, size=(16, 512, 16)),
        MemoryDep(name='arg44_1', index=c1, size=(16, 512, 16))]
buf90.group.device = cpu
buf90.group.iteration = ((16, 512, 16), ())
buf90.sizes = ([16, 512, 16], [])
class buf90_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 16}
    index0 = 8192*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf83', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf84', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg40_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg41_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf85', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf88', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf89', get_index_7)
        constant_2 = ops.constant(256, torch.float32)
        div_1 = ops.div(load_7, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg43_1', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg44_1', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf90', get_index_10, add_4, None)
        return store


buf91: SchedulerNode(ComputedBuffer)
buf91.writes = [MemoryDep(name='buf91', index=c0, size=(131072,))]
buf91.unmet_dependencies = [MemoryDep(name='buf90', index=c0, size=(131072,))]
buf91.met_dependencies = []
buf91.group.device = cpu
buf91.group.iteration = ((131072,), ())
buf91.sizes = ([131072], [])
class buf91_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf91', get_index_1, relu, None)
        return store


buf92: ExternKernelSchedulerNode(Convolution)
buf92.writes = [StarDep(name='buf92')]
buf92.unmet_dependencies = [StarDep(name='buf91')]
buf92.met_dependencies = [StarDep(name='arg45_1')]
buf92.node.kernel = aten.convolution


buf94: SchedulerNode(ComputedBuffer)
buf94.writes = 
    [   MemoryDep(name='buf94', index=c0, size=(128, 256)),
        MemoryDep(name='buf94', index=c0, size=(128,))]
buf94.unmet_dependencies = [MemoryDep(name='buf92', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16))]
buf94.met_dependencies = []
buf94.group.device = cpu
buf94.group.iteration = ((128,), (16, 16))
buf94.sizes = ([128], [16, 16])
class buf94_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf94', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf95_buf411_buf412: FusedSchedulerNode(NoneType)
buf95_buf411_buf412.writes = 
    [   MemoryDep(name='buf411', index=c0, size=(128,)),
        MemoryDep(name='buf412', index=c0, size=(128,)),
        MemoryDep(name='buf95', index=c0, size=(128,))]
buf95_buf411_buf412.unmet_dependencies = [MemoryDep(name='buf94', index=c0, size=(128,))]
buf95_buf411_buf412.met_dependencies = [MemoryDep(name='arg206_1', index=c0, size=(128,)), StarDep(name='arg206_1')]
buf95_buf411_buf412.snodes = ['buf95', 'buf411', 'buf412']


buf96: SchedulerNode(ComputedBuffer)
buf96.writes = 
    [   MemoryDep(name='buf96', index=c0, size=(128, 256)),
        MemoryDep(name='buf96', index=c0, size=(128,))]
buf96.unmet_dependencies = 
    [   MemoryDep(name='buf92', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16)),
        MemoryDep(name='buf95', index=c0, size=(128, 256))]
buf96.met_dependencies = []
buf96.group.device = cpu
buf96.group.iteration = ((128,), (16, 16))
buf96.sizes = ([128], [16, 16])
class buf96_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf95', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf96', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf97: SchedulerNode(ComputedBuffer)
buf97.writes = [MemoryDep(name='buf97', index=c0, size=(32768,))]
buf97.unmet_dependencies = 
    [   MemoryDep(name='buf92', index=c0, size=(32768,)),
        MemoryDep(name='buf95', index=c1, size=(16, 128, 16)),
        MemoryDep(name='buf96', index=c1, size=(16, 128, 16))]
buf97.met_dependencies = 
    [   MemoryDep(name='arg46_1', index=c1, size=(16, 128, 16)),
        MemoryDep(name='arg47_1', index=c1, size=(16, 128, 16))]
buf97.group.device = cpu
buf97.group.iteration = ((16, 128, 16), ())
buf97.sizes = ([16, 128, 16], [])
class buf97_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf95', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf96', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg46_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg47_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf97', get_index_5, relu, None)
        return store


buf98: ExternKernelSchedulerNode(Convolution)
buf98.writes = [StarDep(name='buf98')]
buf98.unmet_dependencies = [StarDep(name='buf97')]
buf98.met_dependencies = [StarDep(name='arg48_1')]
buf98.node.kernel = aten.convolution


buf100: SchedulerNode(ComputedBuffer)
buf100.writes = 
    [   MemoryDep(name='buf100', index=c0, size=(128, 256)),
        MemoryDep(name='buf100', index=c0, size=(128,))]
buf100.unmet_dependencies = [MemoryDep(name='buf98', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16))]
buf100.met_dependencies = []
buf100.group.device = cpu
buf100.group.iteration = ((128,), (16, 16))
buf100.sizes = ([128], [16, 16])
class buf100_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf100', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf101_buf417_buf418: FusedSchedulerNode(NoneType)
buf101_buf417_buf418.writes = 
    [   MemoryDep(name='buf101', index=c0, size=(128,)),
        MemoryDep(name='buf417', index=c0, size=(128,)),
        MemoryDep(name='buf418', index=c0, size=(128,))]
buf101_buf417_buf418.unmet_dependencies = [MemoryDep(name='buf100', index=c0, size=(128,))]
buf101_buf417_buf418.met_dependencies = [MemoryDep(name='arg209_1', index=c0, size=(128,)), StarDep(name='arg209_1')]
buf101_buf417_buf418.snodes = ['buf101', 'buf417', 'buf418']


buf102: SchedulerNode(ComputedBuffer)
buf102.writes = 
    [   MemoryDep(name='buf102', index=c0, size=(128, 256)),
        MemoryDep(name='buf102', index=c0, size=(128,))]
buf102.unmet_dependencies = 
    [   MemoryDep(name='buf101', index=c0, size=(128, 256)),
        MemoryDep(name='buf98', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16))]
buf102.met_dependencies = []
buf102.group.device = cpu
buf102.group.iteration = ((128,), (16, 16))
buf102.sizes = ([128], [16, 16])
class buf102_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf101', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf102', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf103: SchedulerNode(ComputedBuffer)
buf103.writes = [MemoryDep(name='buf103', index=c0, size=(32768,))]
buf103.unmet_dependencies = 
    [   MemoryDep(name='buf101', index=c1, size=(16, 128, 16)),
        MemoryDep(name='buf102', index=c1, size=(16, 128, 16)),
        MemoryDep(name='buf98', index=c0, size=(32768,))]
buf103.met_dependencies = 
    [   MemoryDep(name='arg49_1', index=c1, size=(16, 128, 16)),
        MemoryDep(name='arg50_1', index=c1, size=(16, 128, 16))]
buf103.group.device = cpu
buf103.group.iteration = ((16, 128, 16), ())
buf103.sizes = ([16, 128, 16], [])
class buf103_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf101', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf102', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg49_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg50_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf103', get_index_5, relu, None)
        return store


buf104: ExternKernelSchedulerNode(Convolution)
buf104.writes = [StarDep(name='buf104')]
buf104.unmet_dependencies = [StarDep(name='buf103')]
buf104.met_dependencies = [StarDep(name='arg51_1')]
buf104.node.kernel = aten.convolution


buf106: SchedulerNode(ComputedBuffer)
buf106.writes = 
    [   MemoryDep(name='buf106', index=c0, size=(512, 256)),
        MemoryDep(name='buf106', index=c0, size=(512,))]
buf106.unmet_dependencies = [MemoryDep(name='buf104', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16))]
buf106.met_dependencies = []
buf106.group.device = cpu
buf106.group.iteration = ((512,), (16, 16))
buf106.sizes = ([512], [16, 16])
class buf106_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf106', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf107_buf423_buf424: FusedSchedulerNode(NoneType)
buf107_buf423_buf424.writes = 
    [   MemoryDep(name='buf107', index=c0, size=(512,)),
        MemoryDep(name='buf423', index=c0, size=(512,)),
        MemoryDep(name='buf424', index=c0, size=(512,))]
buf107_buf423_buf424.unmet_dependencies = [MemoryDep(name='buf106', index=c0, size=(512,))]
buf107_buf423_buf424.met_dependencies = [MemoryDep(name='arg212_1', index=c0, size=(512,)), StarDep(name='arg212_1')]
buf107_buf423_buf424.snodes = ['buf107', 'buf423', 'buf424']


buf108: SchedulerNode(ComputedBuffer)
buf108.writes = 
    [   MemoryDep(name='buf108', index=c0, size=(512, 256)),
        MemoryDep(name='buf108', index=c0, size=(512,))]
buf108.unmet_dependencies = 
    [   MemoryDep(name='buf104', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16)),
        MemoryDep(name='buf107', index=c0, size=(512, 256))]
buf108.met_dependencies = []
buf108.group.device = cpu
buf108.group.iteration = ((512,), (16, 16))
buf108.sizes = ([512], [16, 16])
class buf108_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf107', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf108', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf109: SchedulerNode(ComputedBuffer)
buf109.writes = [MemoryDep(name='buf109', index=c0, size=(131072,))]
buf109.unmet_dependencies = 
    [   MemoryDep(name='buf104', index=c0, size=(131072,)),
        MemoryDep(name='buf107', index=c1, size=(16, 512, 16)),
        MemoryDep(name='buf108', index=c1, size=(16, 512, 16)),
        MemoryDep(name='buf91', index=c0, size=(131072,))]
buf109.met_dependencies = 
    [   MemoryDep(name='arg52_1', index=c1, size=(16, 512, 16)),
        MemoryDep(name='arg53_1', index=c1, size=(16, 512, 16))]
buf109.group.device = cpu
buf109.group.iteration = ((16, 512, 16), ())
buf109.sizes = ([16, 512, 16], [])
class buf109_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 16}
    index0 = 8192*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf107', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf108', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg52_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg53_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf91', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf109', get_index_6, relu, None)
        return store


buf110: ExternKernelSchedulerNode(Convolution)
buf110.writes = [StarDep(name='buf110')]
buf110.unmet_dependencies = [StarDep(name='buf109')]
buf110.met_dependencies = [StarDep(name='arg54_1')]
buf110.node.kernel = aten.convolution


buf112: SchedulerNode(ComputedBuffer)
buf112.writes = 
    [   MemoryDep(name='buf112', index=c0, size=(128, 256)),
        MemoryDep(name='buf112', index=c0, size=(128,))]
buf112.unmet_dependencies = [MemoryDep(name='buf110', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16))]
buf112.met_dependencies = []
buf112.group.device = cpu
buf112.group.iteration = ((128,), (16, 16))
buf112.sizes = ([128], [16, 16])
class buf112_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf112', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf113_buf429_buf430: FusedSchedulerNode(NoneType)
buf113_buf429_buf430.writes = 
    [   MemoryDep(name='buf113', index=c0, size=(128,)),
        MemoryDep(name='buf429', index=c0, size=(128,)),
        MemoryDep(name='buf430', index=c0, size=(128,))]
buf113_buf429_buf430.unmet_dependencies = [MemoryDep(name='buf112', index=c0, size=(128,))]
buf113_buf429_buf430.met_dependencies = [MemoryDep(name='arg215_1', index=c0, size=(128,)), StarDep(name='arg215_1')]
buf113_buf429_buf430.snodes = ['buf113', 'buf429', 'buf430']


buf114: SchedulerNode(ComputedBuffer)
buf114.writes = 
    [   MemoryDep(name='buf114', index=c0, size=(128, 256)),
        MemoryDep(name='buf114', index=c0, size=(128,))]
buf114.unmet_dependencies = 
    [   MemoryDep(name='buf110', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16)),
        MemoryDep(name='buf113', index=c0, size=(128, 256))]
buf114.met_dependencies = []
buf114.group.device = cpu
buf114.group.iteration = ((128,), (16, 16))
buf114.sizes = ([128], [16, 16])
class buf114_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf113', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf114', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf115: SchedulerNode(ComputedBuffer)
buf115.writes = [MemoryDep(name='buf115', index=c0, size=(32768,))]
buf115.unmet_dependencies = 
    [   MemoryDep(name='buf110', index=c0, size=(32768,)),
        MemoryDep(name='buf113', index=c1, size=(16, 128, 16)),
        MemoryDep(name='buf114', index=c1, size=(16, 128, 16))]
buf115.met_dependencies = 
    [   MemoryDep(name='arg55_1', index=c1, size=(16, 128, 16)),
        MemoryDep(name='arg56_1', index=c1, size=(16, 128, 16))]
buf115.group.device = cpu
buf115.group.iteration = ((16, 128, 16), ())
buf115.sizes = ([16, 128, 16], [])
class buf115_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf113', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf114', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg55_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg56_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf115', get_index_5, relu, None)
        return store


buf116: ExternKernelSchedulerNode(Convolution)
buf116.writes = [StarDep(name='buf116')]
buf116.unmet_dependencies = [StarDep(name='buf115')]
buf116.met_dependencies = [StarDep(name='arg57_1')]
buf116.node.kernel = aten.convolution


buf118: SchedulerNode(ComputedBuffer)
buf118.writes = 
    [   MemoryDep(name='buf118', index=c0, size=(128, 256)),
        MemoryDep(name='buf118', index=c0, size=(128,))]
buf118.unmet_dependencies = [MemoryDep(name='buf116', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16))]
buf118.met_dependencies = []
buf118.group.device = cpu
buf118.group.iteration = ((128,), (16, 16))
buf118.sizes = ([128], [16, 16])
class buf118_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf118', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf119_buf435_buf436: FusedSchedulerNode(NoneType)
buf119_buf435_buf436.writes = 
    [   MemoryDep(name='buf119', index=c0, size=(128,)),
        MemoryDep(name='buf435', index=c0, size=(128,)),
        MemoryDep(name='buf436', index=c0, size=(128,))]
buf119_buf435_buf436.unmet_dependencies = [MemoryDep(name='buf118', index=c0, size=(128,))]
buf119_buf435_buf436.met_dependencies = [MemoryDep(name='arg218_1', index=c0, size=(128,)), StarDep(name='arg218_1')]
buf119_buf435_buf436.snodes = ['buf119', 'buf435', 'buf436']


buf120: SchedulerNode(ComputedBuffer)
buf120.writes = 
    [   MemoryDep(name='buf120', index=c0, size=(128, 256)),
        MemoryDep(name='buf120', index=c0, size=(128,))]
buf120.unmet_dependencies = 
    [   MemoryDep(name='buf116', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16)),
        MemoryDep(name='buf119', index=c0, size=(128, 256))]
buf120.met_dependencies = []
buf120.group.device = cpu
buf120.group.iteration = ((128,), (16, 16))
buf120.sizes = ([128], [16, 16])
class buf120_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf119', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf120', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf121: SchedulerNode(ComputedBuffer)
buf121.writes = [MemoryDep(name='buf121', index=c0, size=(32768,))]
buf121.unmet_dependencies = 
    [   MemoryDep(name='buf116', index=c0, size=(32768,)),
        MemoryDep(name='buf119', index=c1, size=(16, 128, 16)),
        MemoryDep(name='buf120', index=c1, size=(16, 128, 16))]
buf121.met_dependencies = 
    [   MemoryDep(name='arg58_1', index=c1, size=(16, 128, 16)),
        MemoryDep(name='arg59_1', index=c1, size=(16, 128, 16))]
buf121.group.device = cpu
buf121.group.iteration = ((16, 128, 16), ())
buf121.sizes = ([16, 128, 16], [])
class buf121_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf119', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf120', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg58_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg59_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf121', get_index_5, relu, None)
        return store


buf122: ExternKernelSchedulerNode(Convolution)
buf122.writes = [StarDep(name='buf122')]
buf122.unmet_dependencies = [StarDep(name='buf121')]
buf122.met_dependencies = [StarDep(name='arg60_1')]
buf122.node.kernel = aten.convolution


buf124: SchedulerNode(ComputedBuffer)
buf124.writes = 
    [   MemoryDep(name='buf124', index=c0, size=(512, 256)),
        MemoryDep(name='buf124', index=c0, size=(512,))]
buf124.unmet_dependencies = [MemoryDep(name='buf122', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16))]
buf124.met_dependencies = []
buf124.group.device = cpu
buf124.group.iteration = ((512,), (16, 16))
buf124.sizes = ([512], [16, 16])
class buf124_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf124', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf125_buf441_buf442: FusedSchedulerNode(NoneType)
buf125_buf441_buf442.writes = 
    [   MemoryDep(name='buf125', index=c0, size=(512,)),
        MemoryDep(name='buf441', index=c0, size=(512,)),
        MemoryDep(name='buf442', index=c0, size=(512,))]
buf125_buf441_buf442.unmet_dependencies = [MemoryDep(name='buf124', index=c0, size=(512,))]
buf125_buf441_buf442.met_dependencies = [MemoryDep(name='arg221_1', index=c0, size=(512,)), StarDep(name='arg221_1')]
buf125_buf441_buf442.snodes = ['buf125', 'buf441', 'buf442']


buf126: SchedulerNode(ComputedBuffer)
buf126.writes = 
    [   MemoryDep(name='buf126', index=c0, size=(512, 256)),
        MemoryDep(name='buf126', index=c0, size=(512,))]
buf126.unmet_dependencies = 
    [   MemoryDep(name='buf122', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16)),
        MemoryDep(name='buf125', index=c0, size=(512, 256))]
buf126.met_dependencies = []
buf126.group.device = cpu
buf126.group.iteration = ((512,), (16, 16))
buf126.sizes = ([512], [16, 16])
class buf126_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf125', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf126', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf127: SchedulerNode(ComputedBuffer)
buf127.writes = [MemoryDep(name='buf127', index=c0, size=(131072,))]
buf127.unmet_dependencies = 
    [   MemoryDep(name='buf109', index=c0, size=(131072,)),
        MemoryDep(name='buf122', index=c0, size=(131072,)),
        MemoryDep(name='buf125', index=c1, size=(16, 512, 16)),
        MemoryDep(name='buf126', index=c1, size=(16, 512, 16))]
buf127.met_dependencies = 
    [   MemoryDep(name='arg61_1', index=c1, size=(16, 512, 16)),
        MemoryDep(name='arg62_1', index=c1, size=(16, 512, 16))]
buf127.group.device = cpu
buf127.group.iteration = ((16, 512, 16), ())
buf127.sizes = ([16, 512, 16], [])
class buf127_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 16}
    index0 = 8192*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf125', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf126', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg61_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg62_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf109', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf127', get_index_6, relu, None)
        return store


buf128: ExternKernelSchedulerNode(Convolution)
buf128.writes = [StarDep(name='buf128')]
buf128.unmet_dependencies = [StarDep(name='buf127')]
buf128.met_dependencies = [StarDep(name='arg63_1')]
buf128.node.kernel = aten.convolution


buf130: SchedulerNode(ComputedBuffer)
buf130.writes = 
    [   MemoryDep(name='buf130', index=c0, size=(128, 256)),
        MemoryDep(name='buf130', index=c0, size=(128,))]
buf130.unmet_dependencies = [MemoryDep(name='buf128', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16))]
buf130.met_dependencies = []
buf130.group.device = cpu
buf130.group.iteration = ((128,), (16, 16))
buf130.sizes = ([128], [16, 16])
class buf130_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf130', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf131_buf447_buf448: FusedSchedulerNode(NoneType)
buf131_buf447_buf448.writes = 
    [   MemoryDep(name='buf131', index=c0, size=(128,)),
        MemoryDep(name='buf447', index=c0, size=(128,)),
        MemoryDep(name='buf448', index=c0, size=(128,))]
buf131_buf447_buf448.unmet_dependencies = [MemoryDep(name='buf130', index=c0, size=(128,))]
buf131_buf447_buf448.met_dependencies = [MemoryDep(name='arg224_1', index=c0, size=(128,)), StarDep(name='arg224_1')]
buf131_buf447_buf448.snodes = ['buf131', 'buf447', 'buf448']


buf132: SchedulerNode(ComputedBuffer)
buf132.writes = 
    [   MemoryDep(name='buf132', index=c0, size=(128, 256)),
        MemoryDep(name='buf132', index=c0, size=(128,))]
buf132.unmet_dependencies = 
    [   MemoryDep(name='buf128', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16)),
        MemoryDep(name='buf131', index=c0, size=(128, 256))]
buf132.met_dependencies = []
buf132.group.device = cpu
buf132.group.iteration = ((128,), (16, 16))
buf132.sizes = ([128], [16, 16])
class buf132_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf131', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf132', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf133: SchedulerNode(ComputedBuffer)
buf133.writes = [MemoryDep(name='buf133', index=c0, size=(32768,))]
buf133.unmet_dependencies = 
    [   MemoryDep(name='buf128', index=c0, size=(32768,)),
        MemoryDep(name='buf131', index=c1, size=(16, 128, 16)),
        MemoryDep(name='buf132', index=c1, size=(16, 128, 16))]
buf133.met_dependencies = 
    [   MemoryDep(name='arg64_1', index=c1, size=(16, 128, 16)),
        MemoryDep(name='arg65_1', index=c1, size=(16, 128, 16))]
buf133.group.device = cpu
buf133.group.iteration = ((16, 128, 16), ())
buf133.sizes = ([16, 128, 16], [])
class buf133_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf131', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf132', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg64_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg65_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf133', get_index_5, relu, None)
        return store


buf134: ExternKernelSchedulerNode(Convolution)
buf134.writes = [StarDep(name='buf134')]
buf134.unmet_dependencies = [StarDep(name='buf133')]
buf134.met_dependencies = [StarDep(name='arg66_1')]
buf134.node.kernel = aten.convolution


buf136: SchedulerNode(ComputedBuffer)
buf136.writes = 
    [   MemoryDep(name='buf136', index=c0, size=(128, 256)),
        MemoryDep(name='buf136', index=c0, size=(128,))]
buf136.unmet_dependencies = [MemoryDep(name='buf134', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16))]
buf136.met_dependencies = []
buf136.group.device = cpu
buf136.group.iteration = ((128,), (16, 16))
buf136.sizes = ([128], [16, 16])
class buf136_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf136', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf137_buf453_buf454: FusedSchedulerNode(NoneType)
buf137_buf453_buf454.writes = 
    [   MemoryDep(name='buf137', index=c0, size=(128,)),
        MemoryDep(name='buf453', index=c0, size=(128,)),
        MemoryDep(name='buf454', index=c0, size=(128,))]
buf137_buf453_buf454.unmet_dependencies = [MemoryDep(name='buf136', index=c0, size=(128,))]
buf137_buf453_buf454.met_dependencies = [MemoryDep(name='arg227_1', index=c0, size=(128,)), StarDep(name='arg227_1')]
buf137_buf453_buf454.snodes = ['buf137', 'buf453', 'buf454']


buf138: SchedulerNode(ComputedBuffer)
buf138.writes = 
    [   MemoryDep(name='buf138', index=c0, size=(128, 256)),
        MemoryDep(name='buf138', index=c0, size=(128,))]
buf138.unmet_dependencies = 
    [   MemoryDep(name='buf134', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16)),
        MemoryDep(name='buf137', index=c0, size=(128, 256))]
buf138.met_dependencies = []
buf138.group.device = cpu
buf138.group.iteration = ((128,), (16, 16))
buf138.sizes = ([128], [16, 16])
class buf138_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf137', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf138', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf139: SchedulerNode(ComputedBuffer)
buf139.writes = [MemoryDep(name='buf139', index=c0, size=(32768,))]
buf139.unmet_dependencies = 
    [   MemoryDep(name='buf134', index=c0, size=(32768,)),
        MemoryDep(name='buf137', index=c1, size=(16, 128, 16)),
        MemoryDep(name='buf138', index=c1, size=(16, 128, 16))]
buf139.met_dependencies = 
    [   MemoryDep(name='arg67_1', index=c1, size=(16, 128, 16)),
        MemoryDep(name='arg68_1', index=c1, size=(16, 128, 16))]
buf139.group.device = cpu
buf139.group.iteration = ((16, 128, 16), ())
buf139.sizes = ([16, 128, 16], [])
class buf139_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf137', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf138', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg67_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg68_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf139', get_index_5, relu, None)
        return store


buf140: ExternKernelSchedulerNode(Convolution)
buf140.writes = [StarDep(name='buf140')]
buf140.unmet_dependencies = [StarDep(name='buf139')]
buf140.met_dependencies = [StarDep(name='arg69_1')]
buf140.node.kernel = aten.convolution


buf142: SchedulerNode(ComputedBuffer)
buf142.writes = 
    [   MemoryDep(name='buf142', index=c0, size=(512, 256)),
        MemoryDep(name='buf142', index=c0, size=(512,))]
buf142.unmet_dependencies = [MemoryDep(name='buf140', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16))]
buf142.met_dependencies = []
buf142.group.device = cpu
buf142.group.iteration = ((512,), (16, 16))
buf142.sizes = ([512], [16, 16])
class buf142_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf142', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf143_buf459_buf460: FusedSchedulerNode(NoneType)
buf143_buf459_buf460.writes = 
    [   MemoryDep(name='buf143', index=c0, size=(512,)),
        MemoryDep(name='buf459', index=c0, size=(512,)),
        MemoryDep(name='buf460', index=c0, size=(512,))]
buf143_buf459_buf460.unmet_dependencies = [MemoryDep(name='buf142', index=c0, size=(512,))]
buf143_buf459_buf460.met_dependencies = [MemoryDep(name='arg230_1', index=c0, size=(512,)), StarDep(name='arg230_1')]
buf143_buf459_buf460.snodes = ['buf143', 'buf459', 'buf460']


buf144: SchedulerNode(ComputedBuffer)
buf144.writes = 
    [   MemoryDep(name='buf144', index=c0, size=(512, 256)),
        MemoryDep(name='buf144', index=c0, size=(512,))]
buf144.unmet_dependencies = 
    [   MemoryDep(name='buf140', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16)),
        MemoryDep(name='buf143', index=c0, size=(512, 256))]
buf144.met_dependencies = []
buf144.group.device = cpu
buf144.group.iteration = ((512,), (16, 16))
buf144.sizes = ([512], [16, 16])
class buf144_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf143', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf144', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf145: SchedulerNode(ComputedBuffer)
buf145.writes = [MemoryDep(name='buf145', index=c0, size=(131072,))]
buf145.unmet_dependencies = 
    [   MemoryDep(name='buf127', index=c0, size=(131072,)),
        MemoryDep(name='buf140', index=c0, size=(131072,)),
        MemoryDep(name='buf143', index=c1, size=(16, 512, 16)),
        MemoryDep(name='buf144', index=c1, size=(16, 512, 16))]
buf145.met_dependencies = 
    [   MemoryDep(name='arg70_1', index=c1, size=(16, 512, 16)),
        MemoryDep(name='arg71_1', index=c1, size=(16, 512, 16))]
buf145.group.device = cpu
buf145.group.iteration = ((16, 512, 16), ())
buf145.sizes = ([16, 512, 16], [])
class buf145_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 16}
    index0 = 8192*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf143', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf144', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg70_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg71_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf127', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf145', get_index_6, relu, None)
        return store


buf146: ExternKernelSchedulerNode(Convolution)
buf146.writes = [StarDep(name='buf146')]
buf146.unmet_dependencies = [StarDep(name='buf145')]
buf146.met_dependencies = [StarDep(name='arg72_1')]
buf146.node.kernel = aten.convolution


buf148: SchedulerNode(ComputedBuffer)
buf148.writes = 
    [   MemoryDep(name='buf148', index=c0, size=(256, 256)),
        MemoryDep(name='buf148', index=c0, size=(256,))]
buf148.unmet_dependencies = [MemoryDep(name='buf146', index=16*c0 + 4096*c1 + c2, size=(256, 16, 16))]
buf148.met_dependencies = []
buf148.group.device = cpu
buf148.group.iteration = ((256,), (16, 16))
buf148.sizes = ([256], [16, 16])
class buf148_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 16}
    index0 = 16*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf148', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf149_buf465_buf466: FusedSchedulerNode(NoneType)
buf149_buf465_buf466.writes = 
    [   MemoryDep(name='buf149', index=c0, size=(256,)),
        MemoryDep(name='buf465', index=c0, size=(256,)),
        MemoryDep(name='buf466', index=c0, size=(256,))]
buf149_buf465_buf466.unmet_dependencies = [MemoryDep(name='buf148', index=c0, size=(256,))]
buf149_buf465_buf466.met_dependencies = [MemoryDep(name='arg233_1', index=c0, size=(256,)), StarDep(name='arg233_1')]
buf149_buf465_buf466.snodes = ['buf149', 'buf465', 'buf466']


buf150: SchedulerNode(ComputedBuffer)
buf150.writes = 
    [   MemoryDep(name='buf150', index=c0, size=(256, 256)),
        MemoryDep(name='buf150', index=c0, size=(256,))]
buf150.unmet_dependencies = 
    [   MemoryDep(name='buf146', index=16*c0 + 4096*c1 + c2, size=(256, 16, 16)),
        MemoryDep(name='buf149', index=c0, size=(256, 256))]
buf150.met_dependencies = []
buf150.group.device = cpu
buf150.group.iteration = ((256,), (16, 16))
buf150.sizes = ([256], [16, 16])
class buf150_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 16}
    index0 = 16*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf149', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf150', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf151: SchedulerNode(ComputedBuffer)
buf151.writes = [MemoryDep(name='buf151', index=c0, size=(65536,))]
buf151.unmet_dependencies = 
    [   MemoryDep(name='buf146', index=c0, size=(65536,)),
        MemoryDep(name='buf149', index=c1, size=(16, 256, 16)),
        MemoryDep(name='buf150', index=c1, size=(16, 256, 16))]
buf151.met_dependencies = 
    [   MemoryDep(name='arg73_1', index=c1, size=(16, 256, 16)),
        MemoryDep(name='arg74_1', index=c1, size=(16, 256, 16))]
buf151.group.device = cpu
buf151.group.iteration = ((16, 256, 16), ())
buf151.sizes = ([16, 256, 16], [])
class buf151_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 16}
    index0 = 4096*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf149', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf150', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg73_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg74_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf151', get_index_5, relu, None)
        return store


buf152: ExternKernelSchedulerNode(Convolution)
buf152.writes = [StarDep(name='buf152')]
buf152.unmet_dependencies = [StarDep(name='buf151')]
buf152.met_dependencies = [StarDep(name='arg75_1')]
buf152.node.kernel = aten.convolution


buf154: SchedulerNode(ComputedBuffer)
buf154.writes = 
    [   MemoryDep(name='buf154', index=c0, size=(256, 64)),
        MemoryDep(name='buf154', index=c0, size=(256,))]
buf154.unmet_dependencies = [MemoryDep(name='buf152', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf154.met_dependencies = []
buf154.group.device = cpu
buf154.group.iteration = ((256,), (16, 4))
buf154.sizes = ([256], [16, 4])
class buf154_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf154', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf155_buf471_buf472: FusedSchedulerNode(NoneType)
buf155_buf471_buf472.writes = 
    [   MemoryDep(name='buf155', index=c0, size=(256,)),
        MemoryDep(name='buf471', index=c0, size=(256,)),
        MemoryDep(name='buf472', index=c0, size=(256,))]
buf155_buf471_buf472.unmet_dependencies = [MemoryDep(name='buf154', index=c0, size=(256,))]
buf155_buf471_buf472.met_dependencies = [MemoryDep(name='arg236_1', index=c0, size=(256,)), StarDep(name='arg236_1')]
buf155_buf471_buf472.snodes = ['buf155', 'buf471', 'buf472']


buf156: SchedulerNode(ComputedBuffer)
buf156.writes = 
    [   MemoryDep(name='buf156', index=c0, size=(256, 64)),
        MemoryDep(name='buf156', index=c0, size=(256,))]
buf156.unmet_dependencies = 
    [   MemoryDep(name='buf152', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf155', index=c0, size=(256, 64))]
buf156.met_dependencies = []
buf156.group.device = cpu
buf156.group.iteration = ((256,), (16, 4))
buf156.sizes = ([256], [16, 4])
class buf156_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf155', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf156', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf157: SchedulerNode(ComputedBuffer)
buf157.writes = [MemoryDep(name='buf157', index=c0, size=(16384,))]
buf157.unmet_dependencies = 
    [   MemoryDep(name='buf152', index=c0, size=(16384,)),
        MemoryDep(name='buf155', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf156', index=c1, size=(16, 256, 4))]
buf157.met_dependencies = 
    [   MemoryDep(name='arg76_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg77_1', index=c1, size=(16, 256, 4))]
buf157.group.device = cpu
buf157.group.iteration = ((16, 256, 4), ())
buf157.sizes = ([16, 256, 4], [])
class buf157_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf155', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf156', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg76_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg77_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf157', get_index_5, relu, None)
        return store


buf158: ExternKernelSchedulerNode(Convolution)
buf158.writes = [StarDep(name='buf158')]
buf158.unmet_dependencies = [StarDep(name='buf157')]
buf158.met_dependencies = [StarDep(name='arg78_1')]
buf158.node.kernel = aten.convolution


buf160: SchedulerNode(ComputedBuffer)
buf160.writes = 
    [   MemoryDep(name='buf160', index=c0, size=(1024, 64)),
        MemoryDep(name='buf160', index=c0, size=(1024,))]
buf160.unmet_dependencies = [MemoryDep(name='buf158', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4))]
buf160.met_dependencies = []
buf160.group.device = cpu
buf160.group.iteration = ((1024,), (16, 4))
buf160.sizes = ([1024], [16, 4])
class buf160_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf160', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf161_buf477_buf478: FusedSchedulerNode(NoneType)
buf161_buf477_buf478.writes = 
    [   MemoryDep(name='buf161', index=c0, size=(1024,)),
        MemoryDep(name='buf477', index=c0, size=(1024,)),
        MemoryDep(name='buf478', index=c0, size=(1024,))]
buf161_buf477_buf478.unmet_dependencies = [MemoryDep(name='buf160', index=c0, size=(1024,))]
buf161_buf477_buf478.met_dependencies = [MemoryDep(name='arg239_1', index=c0, size=(1024,)), StarDep(name='arg239_1')]
buf161_buf477_buf478.snodes = ['buf161', 'buf477', 'buf478']


buf162: SchedulerNode(ComputedBuffer)
buf162.writes = 
    [   MemoryDep(name='buf162', index=c0, size=(1024, 64)),
        MemoryDep(name='buf162', index=c0, size=(1024,))]
buf162.unmet_dependencies = 
    [   MemoryDep(name='buf158', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4)),
        MemoryDep(name='buf161', index=c0, size=(1024, 64))]
buf162.met_dependencies = []
buf162.group.device = cpu
buf162.group.iteration = ((1024,), (16, 4))
buf162.sizes = ([1024], [16, 4])
class buf162_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf161', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf162', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf163: ExternKernelSchedulerNode(Convolution)
buf163.writes = [StarDep(name='buf163')]
buf163.unmet_dependencies = [StarDep(name='buf145')]
buf163.met_dependencies = [StarDep(name='arg81_1')]
buf163.node.kernel = aten.convolution


buf165: SchedulerNode(ComputedBuffer)
buf165.writes = 
    [   MemoryDep(name='buf165', index=c0, size=(1024, 64)),
        MemoryDep(name='buf165', index=c0, size=(1024,))]
buf165.unmet_dependencies = [MemoryDep(name='buf163', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4))]
buf165.met_dependencies = []
buf165.group.device = cpu
buf165.group.iteration = ((1024,), (16, 4))
buf165.sizes = ([1024], [16, 4])
class buf165_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf165', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf166_buf483_buf484: FusedSchedulerNode(NoneType)
buf166_buf483_buf484.writes = 
    [   MemoryDep(name='buf166', index=c0, size=(1024,)),
        MemoryDep(name='buf483', index=c0, size=(1024,)),
        MemoryDep(name='buf484', index=c0, size=(1024,))]
buf166_buf483_buf484.unmet_dependencies = [MemoryDep(name='buf165', index=c0, size=(1024,))]
buf166_buf483_buf484.met_dependencies = [MemoryDep(name='arg242_1', index=c0, size=(1024,)), StarDep(name='arg242_1')]
buf166_buf483_buf484.snodes = ['buf166', 'buf483', 'buf484']


buf167: SchedulerNode(ComputedBuffer)
buf167.writes = 
    [   MemoryDep(name='buf167', index=c0, size=(1024, 64)),
        MemoryDep(name='buf167', index=c0, size=(1024,))]
buf167.unmet_dependencies = 
    [   MemoryDep(name='buf163', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4)),
        MemoryDep(name='buf166', index=c0, size=(1024, 64))]
buf167.met_dependencies = []
buf167.group.device = cpu
buf167.group.iteration = ((1024,), (16, 4))
buf167.sizes = ([1024], [16, 4])
class buf167_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf166', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf167', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf168: SchedulerNode(ComputedBuffer)
buf168.writes = [MemoryDep(name='buf168', index=c0, size=(65536,))]
buf168.unmet_dependencies = 
    [   MemoryDep(name='buf158', index=c0, size=(65536,)),
        MemoryDep(name='buf161', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='buf162', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='buf163', index=c0, size=(65536,)),
        MemoryDep(name='buf166', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='buf167', index=c1, size=(16, 1024, 4))]
buf168.met_dependencies = 
    [   MemoryDep(name='arg79_1', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='arg80_1', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='arg82_1', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='arg83_1', index=c1, size=(16, 1024, 4))]
buf168.group.device = cpu
buf168.group.iteration = ((16, 1024, 4), ())
buf168.sizes = ([16, 1024, 4], [])
class buf168_loop_body:
    var_ranges = {z0: 16, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf161', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf162', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg79_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg80_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf163', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf166', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf167', get_index_7)
        constant_2 = ops.constant(64, torch.float32)
        div_1 = ops.div(load_7, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg82_1', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg83_1', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf168', get_index_10, add_4, None)
        return store


buf169: SchedulerNode(ComputedBuffer)
buf169.writes = [MemoryDep(name='buf169', index=c0, size=(65536,))]
buf169.unmet_dependencies = [MemoryDep(name='buf168', index=c0, size=(65536,))]
buf169.met_dependencies = []
buf169.group.device = cpu
buf169.group.iteration = ((65536,), ())
buf169.sizes = ([65536], [])
class buf169_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf169', get_index_1, relu, None)
        return store


buf170: ExternKernelSchedulerNode(Convolution)
buf170.writes = [StarDep(name='buf170')]
buf170.unmet_dependencies = [StarDep(name='buf169')]
buf170.met_dependencies = [StarDep(name='arg84_1')]
buf170.node.kernel = aten.convolution


buf172: SchedulerNode(ComputedBuffer)
buf172.writes = 
    [   MemoryDep(name='buf172', index=c0, size=(256, 64)),
        MemoryDep(name='buf172', index=c0, size=(256,))]
buf172.unmet_dependencies = [MemoryDep(name='buf170', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf172.met_dependencies = []
buf172.group.device = cpu
buf172.group.iteration = ((256,), (16, 4))
buf172.sizes = ([256], [16, 4])
class buf172_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf172', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf173_buf489_buf490: FusedSchedulerNode(NoneType)
buf173_buf489_buf490.writes = 
    [   MemoryDep(name='buf173', index=c0, size=(256,)),
        MemoryDep(name='buf489', index=c0, size=(256,)),
        MemoryDep(name='buf490', index=c0, size=(256,))]
buf173_buf489_buf490.unmet_dependencies = [MemoryDep(name='buf172', index=c0, size=(256,))]
buf173_buf489_buf490.met_dependencies = [MemoryDep(name='arg245_1', index=c0, size=(256,)), StarDep(name='arg245_1')]
buf173_buf489_buf490.snodes = ['buf173', 'buf489', 'buf490']


buf174: SchedulerNode(ComputedBuffer)
buf174.writes = 
    [   MemoryDep(name='buf174', index=c0, size=(256, 64)),
        MemoryDep(name='buf174', index=c0, size=(256,))]
buf174.unmet_dependencies = 
    [   MemoryDep(name='buf170', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf173', index=c0, size=(256, 64))]
buf174.met_dependencies = []
buf174.group.device = cpu
buf174.group.iteration = ((256,), (16, 4))
buf174.sizes = ([256], [16, 4])
class buf174_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf173', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf174', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf175: SchedulerNode(ComputedBuffer)
buf175.writes = [MemoryDep(name='buf175', index=c0, size=(16384,))]
buf175.unmet_dependencies = 
    [   MemoryDep(name='buf170', index=c0, size=(16384,)),
        MemoryDep(name='buf173', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf174', index=c1, size=(16, 256, 4))]
buf175.met_dependencies = 
    [   MemoryDep(name='arg85_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg86_1', index=c1, size=(16, 256, 4))]
buf175.group.device = cpu
buf175.group.iteration = ((16, 256, 4), ())
buf175.sizes = ([16, 256, 4], [])
class buf175_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf173', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf174', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg85_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg86_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf175', get_index_5, relu, None)
        return store


buf176: ExternKernelSchedulerNode(Convolution)
buf176.writes = [StarDep(name='buf176')]
buf176.unmet_dependencies = [StarDep(name='buf175')]
buf176.met_dependencies = [StarDep(name='arg87_1')]
buf176.node.kernel = aten.convolution


buf178: SchedulerNode(ComputedBuffer)
buf178.writes = 
    [   MemoryDep(name='buf178', index=c0, size=(256, 64)),
        MemoryDep(name='buf178', index=c0, size=(256,))]
buf178.unmet_dependencies = [MemoryDep(name='buf176', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf178.met_dependencies = []
buf178.group.device = cpu
buf178.group.iteration = ((256,), (16, 4))
buf178.sizes = ([256], [16, 4])
class buf178_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf178', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf179_buf495_buf496: FusedSchedulerNode(NoneType)
buf179_buf495_buf496.writes = 
    [   MemoryDep(name='buf179', index=c0, size=(256,)),
        MemoryDep(name='buf495', index=c0, size=(256,)),
        MemoryDep(name='buf496', index=c0, size=(256,))]
buf179_buf495_buf496.unmet_dependencies = [MemoryDep(name='buf178', index=c0, size=(256,))]
buf179_buf495_buf496.met_dependencies = [MemoryDep(name='arg248_1', index=c0, size=(256,)), StarDep(name='arg248_1')]
buf179_buf495_buf496.snodes = ['buf179', 'buf495', 'buf496']


buf180: SchedulerNode(ComputedBuffer)
buf180.writes = 
    [   MemoryDep(name='buf180', index=c0, size=(256, 64)),
        MemoryDep(name='buf180', index=c0, size=(256,))]
buf180.unmet_dependencies = 
    [   MemoryDep(name='buf176', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf179', index=c0, size=(256, 64))]
buf180.met_dependencies = []
buf180.group.device = cpu
buf180.group.iteration = ((256,), (16, 4))
buf180.sizes = ([256], [16, 4])
class buf180_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf179', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf180', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf181: SchedulerNode(ComputedBuffer)
buf181.writes = [MemoryDep(name='buf181', index=c0, size=(16384,))]
buf181.unmet_dependencies = 
    [   MemoryDep(name='buf176', index=c0, size=(16384,)),
        MemoryDep(name='buf179', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf180', index=c1, size=(16, 256, 4))]
buf181.met_dependencies = 
    [   MemoryDep(name='arg88_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg89_1', index=c1, size=(16, 256, 4))]
buf181.group.device = cpu
buf181.group.iteration = ((16, 256, 4), ())
buf181.sizes = ([16, 256, 4], [])
class buf181_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf179', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf180', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg88_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg89_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf181', get_index_5, relu, None)
        return store


buf182: ExternKernelSchedulerNode(Convolution)
buf182.writes = [StarDep(name='buf182')]
buf182.unmet_dependencies = [StarDep(name='buf181')]
buf182.met_dependencies = [StarDep(name='arg90_1')]
buf182.node.kernel = aten.convolution


buf184: SchedulerNode(ComputedBuffer)
buf184.writes = 
    [   MemoryDep(name='buf184', index=c0, size=(1024, 64)),
        MemoryDep(name='buf184', index=c0, size=(1024,))]
buf184.unmet_dependencies = [MemoryDep(name='buf182', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4))]
buf184.met_dependencies = []
buf184.group.device = cpu
buf184.group.iteration = ((1024,), (16, 4))
buf184.sizes = ([1024], [16, 4])
class buf184_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf184', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf185_buf501_buf502: FusedSchedulerNode(NoneType)
buf185_buf501_buf502.writes = 
    [   MemoryDep(name='buf185', index=c0, size=(1024,)),
        MemoryDep(name='buf501', index=c0, size=(1024,)),
        MemoryDep(name='buf502', index=c0, size=(1024,))]
buf185_buf501_buf502.unmet_dependencies = [MemoryDep(name='buf184', index=c0, size=(1024,))]
buf185_buf501_buf502.met_dependencies = [MemoryDep(name='arg251_1', index=c0, size=(1024,)), StarDep(name='arg251_1')]
buf185_buf501_buf502.snodes = ['buf185', 'buf501', 'buf502']


buf186: SchedulerNode(ComputedBuffer)
buf186.writes = 
    [   MemoryDep(name='buf186', index=c0, size=(1024, 64)),
        MemoryDep(name='buf186', index=c0, size=(1024,))]
buf186.unmet_dependencies = 
    [   MemoryDep(name='buf182', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4)),
        MemoryDep(name='buf185', index=c0, size=(1024, 64))]
buf186.met_dependencies = []
buf186.group.device = cpu
buf186.group.iteration = ((1024,), (16, 4))
buf186.sizes = ([1024], [16, 4])
class buf186_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf185', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf186', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf187: SchedulerNode(ComputedBuffer)
buf187.writes = [MemoryDep(name='buf187', index=c0, size=(65536,))]
buf187.unmet_dependencies = 
    [   MemoryDep(name='buf169', index=c0, size=(65536,)),
        MemoryDep(name='buf182', index=c0, size=(65536,)),
        MemoryDep(name='buf185', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='buf186', index=c1, size=(16, 1024, 4))]
buf187.met_dependencies = 
    [   MemoryDep(name='arg91_1', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='arg92_1', index=c1, size=(16, 1024, 4))]
buf187.group.device = cpu
buf187.group.iteration = ((16, 1024, 4), ())
buf187.sizes = ([16, 1024, 4], [])
class buf187_loop_body:
    var_ranges = {z0: 16, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf185', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf186', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg91_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg92_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf169', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf187', get_index_6, relu, None)
        return store


buf188: ExternKernelSchedulerNode(Convolution)
buf188.writes = [StarDep(name='buf188')]
buf188.unmet_dependencies = [StarDep(name='buf187')]
buf188.met_dependencies = [StarDep(name='arg93_1')]
buf188.node.kernel = aten.convolution


buf190: SchedulerNode(ComputedBuffer)
buf190.writes = 
    [   MemoryDep(name='buf190', index=c0, size=(256, 64)),
        MemoryDep(name='buf190', index=c0, size=(256,))]
buf190.unmet_dependencies = [MemoryDep(name='buf188', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf190.met_dependencies = []
buf190.group.device = cpu
buf190.group.iteration = ((256,), (16, 4))
buf190.sizes = ([256], [16, 4])
class buf190_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf190', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf191_buf507_buf508: FusedSchedulerNode(NoneType)
buf191_buf507_buf508.writes = 
    [   MemoryDep(name='buf191', index=c0, size=(256,)),
        MemoryDep(name='buf507', index=c0, size=(256,)),
        MemoryDep(name='buf508', index=c0, size=(256,))]
buf191_buf507_buf508.unmet_dependencies = [MemoryDep(name='buf190', index=c0, size=(256,))]
buf191_buf507_buf508.met_dependencies = [MemoryDep(name='arg254_1', index=c0, size=(256,)), StarDep(name='arg254_1')]
buf191_buf507_buf508.snodes = ['buf191', 'buf507', 'buf508']


buf192: SchedulerNode(ComputedBuffer)
buf192.writes = 
    [   MemoryDep(name='buf192', index=c0, size=(256, 64)),
        MemoryDep(name='buf192', index=c0, size=(256,))]
buf192.unmet_dependencies = 
    [   MemoryDep(name='buf188', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf191', index=c0, size=(256, 64))]
buf192.met_dependencies = []
buf192.group.device = cpu
buf192.group.iteration = ((256,), (16, 4))
buf192.sizes = ([256], [16, 4])
class buf192_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf191', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf192', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf193: SchedulerNode(ComputedBuffer)
buf193.writes = [MemoryDep(name='buf193', index=c0, size=(16384,))]
buf193.unmet_dependencies = 
    [   MemoryDep(name='buf188', index=c0, size=(16384,)),
        MemoryDep(name='buf191', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf192', index=c1, size=(16, 256, 4))]
buf193.met_dependencies = 
    [   MemoryDep(name='arg94_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg95_1', index=c1, size=(16, 256, 4))]
buf193.group.device = cpu
buf193.group.iteration = ((16, 256, 4), ())
buf193.sizes = ([16, 256, 4], [])
class buf193_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf191', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf192', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg94_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg95_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf193', get_index_5, relu, None)
        return store


buf194: ExternKernelSchedulerNode(Convolution)
buf194.writes = [StarDep(name='buf194')]
buf194.unmet_dependencies = [StarDep(name='buf193')]
buf194.met_dependencies = [StarDep(name='arg96_1')]
buf194.node.kernel = aten.convolution


buf196: SchedulerNode(ComputedBuffer)
buf196.writes = 
    [   MemoryDep(name='buf196', index=c0, size=(256, 64)),
        MemoryDep(name='buf196', index=c0, size=(256,))]
buf196.unmet_dependencies = [MemoryDep(name='buf194', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf196.met_dependencies = []
buf196.group.device = cpu
buf196.group.iteration = ((256,), (16, 4))
buf196.sizes = ([256], [16, 4])
class buf196_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf196', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf197_buf513_buf514: FusedSchedulerNode(NoneType)
buf197_buf513_buf514.writes = 
    [   MemoryDep(name='buf197', index=c0, size=(256,)),
        MemoryDep(name='buf513', index=c0, size=(256,)),
        MemoryDep(name='buf514', index=c0, size=(256,))]
buf197_buf513_buf514.unmet_dependencies = [MemoryDep(name='buf196', index=c0, size=(256,))]
buf197_buf513_buf514.met_dependencies = [MemoryDep(name='arg257_1', index=c0, size=(256,)), StarDep(name='arg257_1')]
buf197_buf513_buf514.snodes = ['buf197', 'buf513', 'buf514']


buf198: SchedulerNode(ComputedBuffer)
buf198.writes = 
    [   MemoryDep(name='buf198', index=c0, size=(256, 64)),
        MemoryDep(name='buf198', index=c0, size=(256,))]
buf198.unmet_dependencies = 
    [   MemoryDep(name='buf194', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf197', index=c0, size=(256, 64))]
buf198.met_dependencies = []
buf198.group.device = cpu
buf198.group.iteration = ((256,), (16, 4))
buf198.sizes = ([256], [16, 4])
class buf198_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf197', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf198', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf199: SchedulerNode(ComputedBuffer)
buf199.writes = [MemoryDep(name='buf199', index=c0, size=(16384,))]
buf199.unmet_dependencies = 
    [   MemoryDep(name='buf194', index=c0, size=(16384,)),
        MemoryDep(name='buf197', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf198', index=c1, size=(16, 256, 4))]
buf199.met_dependencies = 
    [   MemoryDep(name='arg97_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg98_1', index=c1, size=(16, 256, 4))]
buf199.group.device = cpu
buf199.group.iteration = ((16, 256, 4), ())
buf199.sizes = ([16, 256, 4], [])
class buf199_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf197', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf198', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg97_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg98_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf199', get_index_5, relu, None)
        return store


buf200: ExternKernelSchedulerNode(Convolution)
buf200.writes = [StarDep(name='buf200')]
buf200.unmet_dependencies = [StarDep(name='buf199')]
buf200.met_dependencies = [StarDep(name='arg99_1')]
buf200.node.kernel = aten.convolution


buf202: SchedulerNode(ComputedBuffer)
buf202.writes = 
    [   MemoryDep(name='buf202', index=c0, size=(1024, 64)),
        MemoryDep(name='buf202', index=c0, size=(1024,))]
buf202.unmet_dependencies = [MemoryDep(name='buf200', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4))]
buf202.met_dependencies = []
buf202.group.device = cpu
buf202.group.iteration = ((1024,), (16, 4))
buf202.sizes = ([1024], [16, 4])
class buf202_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf202', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf203_buf519_buf520: FusedSchedulerNode(NoneType)
buf203_buf519_buf520.writes = 
    [   MemoryDep(name='buf203', index=c0, size=(1024,)),
        MemoryDep(name='buf519', index=c0, size=(1024,)),
        MemoryDep(name='buf520', index=c0, size=(1024,))]
buf203_buf519_buf520.unmet_dependencies = [MemoryDep(name='buf202', index=c0, size=(1024,))]
buf203_buf519_buf520.met_dependencies = [MemoryDep(name='arg260_1', index=c0, size=(1024,)), StarDep(name='arg260_1')]
buf203_buf519_buf520.snodes = ['buf203', 'buf519', 'buf520']


buf204: SchedulerNode(ComputedBuffer)
buf204.writes = 
    [   MemoryDep(name='buf204', index=c0, size=(1024, 64)),
        MemoryDep(name='buf204', index=c0, size=(1024,))]
buf204.unmet_dependencies = 
    [   MemoryDep(name='buf200', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4)),
        MemoryDep(name='buf203', index=c0, size=(1024, 64))]
buf204.met_dependencies = []
buf204.group.device = cpu
buf204.group.iteration = ((1024,), (16, 4))
buf204.sizes = ([1024], [16, 4])
class buf204_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf203', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf204', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf205: SchedulerNode(ComputedBuffer)
buf205.writes = [MemoryDep(name='buf205', index=c0, size=(65536,))]
buf205.unmet_dependencies = 
    [   MemoryDep(name='buf187', index=c0, size=(65536,)),
        MemoryDep(name='buf200', index=c0, size=(65536,)),
        MemoryDep(name='buf203', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='buf204', index=c1, size=(16, 1024, 4))]
buf205.met_dependencies = 
    [   MemoryDep(name='arg100_1', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='arg101_1', index=c1, size=(16, 1024, 4))]
buf205.group.device = cpu
buf205.group.iteration = ((16, 1024, 4), ())
buf205.sizes = ([16, 1024, 4], [])
class buf205_loop_body:
    var_ranges = {z0: 16, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf203', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf204', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg100_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg101_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf187', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf205', get_index_6, relu, None)
        return store


buf206: ExternKernelSchedulerNode(Convolution)
buf206.writes = [StarDep(name='buf206')]
buf206.unmet_dependencies = [StarDep(name='buf205')]
buf206.met_dependencies = [StarDep(name='arg102_1')]
buf206.node.kernel = aten.convolution


buf208: SchedulerNode(ComputedBuffer)
buf208.writes = 
    [   MemoryDep(name='buf208', index=c0, size=(256, 64)),
        MemoryDep(name='buf208', index=c0, size=(256,))]
buf208.unmet_dependencies = [MemoryDep(name='buf206', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf208.met_dependencies = []
buf208.group.device = cpu
buf208.group.iteration = ((256,), (16, 4))
buf208.sizes = ([256], [16, 4])
class buf208_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf208', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf209_buf525_buf526: FusedSchedulerNode(NoneType)
buf209_buf525_buf526.writes = 
    [   MemoryDep(name='buf209', index=c0, size=(256,)),
        MemoryDep(name='buf525', index=c0, size=(256,)),
        MemoryDep(name='buf526', index=c0, size=(256,))]
buf209_buf525_buf526.unmet_dependencies = [MemoryDep(name='buf208', index=c0, size=(256,))]
buf209_buf525_buf526.met_dependencies = [MemoryDep(name='arg263_1', index=c0, size=(256,)), StarDep(name='arg263_1')]
buf209_buf525_buf526.snodes = ['buf209', 'buf525', 'buf526']


buf210: SchedulerNode(ComputedBuffer)
buf210.writes = 
    [   MemoryDep(name='buf210', index=c0, size=(256, 64)),
        MemoryDep(name='buf210', index=c0, size=(256,))]
buf210.unmet_dependencies = 
    [   MemoryDep(name='buf206', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf209', index=c0, size=(256, 64))]
buf210.met_dependencies = []
buf210.group.device = cpu
buf210.group.iteration = ((256,), (16, 4))
buf210.sizes = ([256], [16, 4])
class buf210_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf209', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf210', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf211: SchedulerNode(ComputedBuffer)
buf211.writes = [MemoryDep(name='buf211', index=c0, size=(16384,))]
buf211.unmet_dependencies = 
    [   MemoryDep(name='buf206', index=c0, size=(16384,)),
        MemoryDep(name='buf209', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf210', index=c1, size=(16, 256, 4))]
buf211.met_dependencies = 
    [   MemoryDep(name='arg103_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg104_1', index=c1, size=(16, 256, 4))]
buf211.group.device = cpu
buf211.group.iteration = ((16, 256, 4), ())
buf211.sizes = ([16, 256, 4], [])
class buf211_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf209', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf210', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg103_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg104_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf211', get_index_5, relu, None)
        return store


buf212: ExternKernelSchedulerNode(Convolution)
buf212.writes = [StarDep(name='buf212')]
buf212.unmet_dependencies = [StarDep(name='buf211')]
buf212.met_dependencies = [StarDep(name='arg105_1')]
buf212.node.kernel = aten.convolution


buf214: SchedulerNode(ComputedBuffer)
buf214.writes = 
    [   MemoryDep(name='buf214', index=c0, size=(256, 64)),
        MemoryDep(name='buf214', index=c0, size=(256,))]
buf214.unmet_dependencies = [MemoryDep(name='buf212', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf214.met_dependencies = []
buf214.group.device = cpu
buf214.group.iteration = ((256,), (16, 4))
buf214.sizes = ([256], [16, 4])
class buf214_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf214', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf215_buf531_buf532: FusedSchedulerNode(NoneType)
buf215_buf531_buf532.writes = 
    [   MemoryDep(name='buf215', index=c0, size=(256,)),
        MemoryDep(name='buf531', index=c0, size=(256,)),
        MemoryDep(name='buf532', index=c0, size=(256,))]
buf215_buf531_buf532.unmet_dependencies = [MemoryDep(name='buf214', index=c0, size=(256,))]
buf215_buf531_buf532.met_dependencies = [MemoryDep(name='arg266_1', index=c0, size=(256,)), StarDep(name='arg266_1')]
buf215_buf531_buf532.snodes = ['buf215', 'buf531', 'buf532']


buf216: SchedulerNode(ComputedBuffer)
buf216.writes = 
    [   MemoryDep(name='buf216', index=c0, size=(256, 64)),
        MemoryDep(name='buf216', index=c0, size=(256,))]
buf216.unmet_dependencies = 
    [   MemoryDep(name='buf212', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf215', index=c0, size=(256, 64))]
buf216.met_dependencies = []
buf216.group.device = cpu
buf216.group.iteration = ((256,), (16, 4))
buf216.sizes = ([256], [16, 4])
class buf216_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf215', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf216', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf217: SchedulerNode(ComputedBuffer)
buf217.writes = [MemoryDep(name='buf217', index=c0, size=(16384,))]
buf217.unmet_dependencies = 
    [   MemoryDep(name='buf212', index=c0, size=(16384,)),
        MemoryDep(name='buf215', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf216', index=c1, size=(16, 256, 4))]
buf217.met_dependencies = 
    [   MemoryDep(name='arg106_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg107_1', index=c1, size=(16, 256, 4))]
buf217.group.device = cpu
buf217.group.iteration = ((16, 256, 4), ())
buf217.sizes = ([16, 256, 4], [])
class buf217_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf215', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf216', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg106_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg107_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf217', get_index_5, relu, None)
        return store


buf218: ExternKernelSchedulerNode(Convolution)
buf218.writes = [StarDep(name='buf218')]
buf218.unmet_dependencies = [StarDep(name='buf217')]
buf218.met_dependencies = [StarDep(name='arg108_1')]
buf218.node.kernel = aten.convolution


buf220: SchedulerNode(ComputedBuffer)
buf220.writes = 
    [   MemoryDep(name='buf220', index=c0, size=(1024, 64)),
        MemoryDep(name='buf220', index=c0, size=(1024,))]
buf220.unmet_dependencies = [MemoryDep(name='buf218', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4))]
buf220.met_dependencies = []
buf220.group.device = cpu
buf220.group.iteration = ((1024,), (16, 4))
buf220.sizes = ([1024], [16, 4])
class buf220_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf220', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf221_buf537_buf538: FusedSchedulerNode(NoneType)
buf221_buf537_buf538.writes = 
    [   MemoryDep(name='buf221', index=c0, size=(1024,)),
        MemoryDep(name='buf537', index=c0, size=(1024,)),
        MemoryDep(name='buf538', index=c0, size=(1024,))]
buf221_buf537_buf538.unmet_dependencies = [MemoryDep(name='buf220', index=c0, size=(1024,))]
buf221_buf537_buf538.met_dependencies = [MemoryDep(name='arg269_1', index=c0, size=(1024,)), StarDep(name='arg269_1')]
buf221_buf537_buf538.snodes = ['buf221', 'buf537', 'buf538']


buf222: SchedulerNode(ComputedBuffer)
buf222.writes = 
    [   MemoryDep(name='buf222', index=c0, size=(1024, 64)),
        MemoryDep(name='buf222', index=c0, size=(1024,))]
buf222.unmet_dependencies = 
    [   MemoryDep(name='buf218', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4)),
        MemoryDep(name='buf221', index=c0, size=(1024, 64))]
buf222.met_dependencies = []
buf222.group.device = cpu
buf222.group.iteration = ((1024,), (16, 4))
buf222.sizes = ([1024], [16, 4])
class buf222_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf221', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf222', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf223: SchedulerNode(ComputedBuffer)
buf223.writes = [MemoryDep(name='buf223', index=c0, size=(65536,))]
buf223.unmet_dependencies = 
    [   MemoryDep(name='buf205', index=c0, size=(65536,)),
        MemoryDep(name='buf218', index=c0, size=(65536,)),
        MemoryDep(name='buf221', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='buf222', index=c1, size=(16, 1024, 4))]
buf223.met_dependencies = 
    [   MemoryDep(name='arg109_1', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='arg110_1', index=c1, size=(16, 1024, 4))]
buf223.group.device = cpu
buf223.group.iteration = ((16, 1024, 4), ())
buf223.sizes = ([16, 1024, 4], [])
class buf223_loop_body:
    var_ranges = {z0: 16, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf221', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf222', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg109_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg110_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf205', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf223', get_index_6, relu, None)
        return store


buf224: ExternKernelSchedulerNode(Convolution)
buf224.writes = [StarDep(name='buf224')]
buf224.unmet_dependencies = [StarDep(name='buf223')]
buf224.met_dependencies = [StarDep(name='arg111_1')]
buf224.node.kernel = aten.convolution


buf226: SchedulerNode(ComputedBuffer)
buf226.writes = 
    [   MemoryDep(name='buf226', index=c0, size=(256, 64)),
        MemoryDep(name='buf226', index=c0, size=(256,))]
buf226.unmet_dependencies = [MemoryDep(name='buf224', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf226.met_dependencies = []
buf226.group.device = cpu
buf226.group.iteration = ((256,), (16, 4))
buf226.sizes = ([256], [16, 4])
class buf226_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf226', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf227_buf543_buf544: FusedSchedulerNode(NoneType)
buf227_buf543_buf544.writes = 
    [   MemoryDep(name='buf227', index=c0, size=(256,)),
        MemoryDep(name='buf543', index=c0, size=(256,)),
        MemoryDep(name='buf544', index=c0, size=(256,))]
buf227_buf543_buf544.unmet_dependencies = [MemoryDep(name='buf226', index=c0, size=(256,))]
buf227_buf543_buf544.met_dependencies = [MemoryDep(name='arg272_1', index=c0, size=(256,)), StarDep(name='arg272_1')]
buf227_buf543_buf544.snodes = ['buf227', 'buf543', 'buf544']


buf228: SchedulerNode(ComputedBuffer)
buf228.writes = 
    [   MemoryDep(name='buf228', index=c0, size=(256, 64)),
        MemoryDep(name='buf228', index=c0, size=(256,))]
buf228.unmet_dependencies = 
    [   MemoryDep(name='buf224', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf227', index=c0, size=(256, 64))]
buf228.met_dependencies = []
buf228.group.device = cpu
buf228.group.iteration = ((256,), (16, 4))
buf228.sizes = ([256], [16, 4])
class buf228_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf227', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf228', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf229: SchedulerNode(ComputedBuffer)
buf229.writes = [MemoryDep(name='buf229', index=c0, size=(16384,))]
buf229.unmet_dependencies = 
    [   MemoryDep(name='buf224', index=c0, size=(16384,)),
        MemoryDep(name='buf227', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf228', index=c1, size=(16, 256, 4))]
buf229.met_dependencies = 
    [   MemoryDep(name='arg112_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg113_1', index=c1, size=(16, 256, 4))]
buf229.group.device = cpu
buf229.group.iteration = ((16, 256, 4), ())
buf229.sizes = ([16, 256, 4], [])
class buf229_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf227', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf228', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg112_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg113_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf229', get_index_5, relu, None)
        return store


buf230: ExternKernelSchedulerNode(Convolution)
buf230.writes = [StarDep(name='buf230')]
buf230.unmet_dependencies = [StarDep(name='buf229')]
buf230.met_dependencies = [StarDep(name='arg114_1')]
buf230.node.kernel = aten.convolution


buf232: SchedulerNode(ComputedBuffer)
buf232.writes = 
    [   MemoryDep(name='buf232', index=c0, size=(256, 64)),
        MemoryDep(name='buf232', index=c0, size=(256,))]
buf232.unmet_dependencies = [MemoryDep(name='buf230', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf232.met_dependencies = []
buf232.group.device = cpu
buf232.group.iteration = ((256,), (16, 4))
buf232.sizes = ([256], [16, 4])
class buf232_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf232', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf233_buf549_buf550: FusedSchedulerNode(NoneType)
buf233_buf549_buf550.writes = 
    [   MemoryDep(name='buf233', index=c0, size=(256,)),
        MemoryDep(name='buf549', index=c0, size=(256,)),
        MemoryDep(name='buf550', index=c0, size=(256,))]
buf233_buf549_buf550.unmet_dependencies = [MemoryDep(name='buf232', index=c0, size=(256,))]
buf233_buf549_buf550.met_dependencies = [MemoryDep(name='arg275_1', index=c0, size=(256,)), StarDep(name='arg275_1')]
buf233_buf549_buf550.snodes = ['buf233', 'buf549', 'buf550']


buf234: SchedulerNode(ComputedBuffer)
buf234.writes = 
    [   MemoryDep(name='buf234', index=c0, size=(256, 64)),
        MemoryDep(name='buf234', index=c0, size=(256,))]
buf234.unmet_dependencies = 
    [   MemoryDep(name='buf230', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf233', index=c0, size=(256, 64))]
buf234.met_dependencies = []
buf234.group.device = cpu
buf234.group.iteration = ((256,), (16, 4))
buf234.sizes = ([256], [16, 4])
class buf234_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf233', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf234', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf235: SchedulerNode(ComputedBuffer)
buf235.writes = [MemoryDep(name='buf235', index=c0, size=(16384,))]
buf235.unmet_dependencies = 
    [   MemoryDep(name='buf230', index=c0, size=(16384,)),
        MemoryDep(name='buf233', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf234', index=c1, size=(16, 256, 4))]
buf235.met_dependencies = 
    [   MemoryDep(name='arg115_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg116_1', index=c1, size=(16, 256, 4))]
buf235.group.device = cpu
buf235.group.iteration = ((16, 256, 4), ())
buf235.sizes = ([16, 256, 4], [])
class buf235_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf233', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf234', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg115_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg116_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf235', get_index_5, relu, None)
        return store


buf236: ExternKernelSchedulerNode(Convolution)
buf236.writes = [StarDep(name='buf236')]
buf236.unmet_dependencies = [StarDep(name='buf235')]
buf236.met_dependencies = [StarDep(name='arg117_1')]
buf236.node.kernel = aten.convolution


buf238: SchedulerNode(ComputedBuffer)
buf238.writes = 
    [   MemoryDep(name='buf238', index=c0, size=(1024, 64)),
        MemoryDep(name='buf238', index=c0, size=(1024,))]
buf238.unmet_dependencies = [MemoryDep(name='buf236', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4))]
buf238.met_dependencies = []
buf238.group.device = cpu
buf238.group.iteration = ((1024,), (16, 4))
buf238.sizes = ([1024], [16, 4])
class buf238_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf238', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf239_buf555_buf556: FusedSchedulerNode(NoneType)
buf239_buf555_buf556.writes = 
    [   MemoryDep(name='buf239', index=c0, size=(1024,)),
        MemoryDep(name='buf555', index=c0, size=(1024,)),
        MemoryDep(name='buf556', index=c0, size=(1024,))]
buf239_buf555_buf556.unmet_dependencies = [MemoryDep(name='buf238', index=c0, size=(1024,))]
buf239_buf555_buf556.met_dependencies = [MemoryDep(name='arg278_1', index=c0, size=(1024,)), StarDep(name='arg278_1')]
buf239_buf555_buf556.snodes = ['buf239', 'buf555', 'buf556']


buf240: SchedulerNode(ComputedBuffer)
buf240.writes = 
    [   MemoryDep(name='buf240', index=c0, size=(1024, 64)),
        MemoryDep(name='buf240', index=c0, size=(1024,))]
buf240.unmet_dependencies = 
    [   MemoryDep(name='buf236', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4)),
        MemoryDep(name='buf239', index=c0, size=(1024, 64))]
buf240.met_dependencies = []
buf240.group.device = cpu
buf240.group.iteration = ((1024,), (16, 4))
buf240.sizes = ([1024], [16, 4])
class buf240_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf239', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf240', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf241: SchedulerNode(ComputedBuffer)
buf241.writes = [MemoryDep(name='buf241', index=c0, size=(65536,))]
buf241.unmet_dependencies = 
    [   MemoryDep(name='buf223', index=c0, size=(65536,)),
        MemoryDep(name='buf236', index=c0, size=(65536,)),
        MemoryDep(name='buf239', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='buf240', index=c1, size=(16, 1024, 4))]
buf241.met_dependencies = 
    [   MemoryDep(name='arg118_1', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='arg119_1', index=c1, size=(16, 1024, 4))]
buf241.group.device = cpu
buf241.group.iteration = ((16, 1024, 4), ())
buf241.sizes = ([16, 1024, 4], [])
class buf241_loop_body:
    var_ranges = {z0: 16, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf239', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf240', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg118_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg119_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf223', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf241', get_index_6, relu, None)
        return store


buf242: ExternKernelSchedulerNode(Convolution)
buf242.writes = [StarDep(name='buf242')]
buf242.unmet_dependencies = [StarDep(name='buf241')]
buf242.met_dependencies = [StarDep(name='arg120_1')]
buf242.node.kernel = aten.convolution


buf244: SchedulerNode(ComputedBuffer)
buf244.writes = 
    [   MemoryDep(name='buf244', index=c0, size=(256, 64)),
        MemoryDep(name='buf244', index=c0, size=(256,))]
buf244.unmet_dependencies = [MemoryDep(name='buf242', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf244.met_dependencies = []
buf244.group.device = cpu
buf244.group.iteration = ((256,), (16, 4))
buf244.sizes = ([256], [16, 4])
class buf244_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf244', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf245_buf561_buf562: FusedSchedulerNode(NoneType)
buf245_buf561_buf562.writes = 
    [   MemoryDep(name='buf245', index=c0, size=(256,)),
        MemoryDep(name='buf561', index=c0, size=(256,)),
        MemoryDep(name='buf562', index=c0, size=(256,))]
buf245_buf561_buf562.unmet_dependencies = [MemoryDep(name='buf244', index=c0, size=(256,))]
buf245_buf561_buf562.met_dependencies = [MemoryDep(name='arg281_1', index=c0, size=(256,)), StarDep(name='arg281_1')]
buf245_buf561_buf562.snodes = ['buf245', 'buf561', 'buf562']


buf246: SchedulerNode(ComputedBuffer)
buf246.writes = 
    [   MemoryDep(name='buf246', index=c0, size=(256, 64)),
        MemoryDep(name='buf246', index=c0, size=(256,))]
buf246.unmet_dependencies = 
    [   MemoryDep(name='buf242', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf245', index=c0, size=(256, 64))]
buf246.met_dependencies = []
buf246.group.device = cpu
buf246.group.iteration = ((256,), (16, 4))
buf246.sizes = ([256], [16, 4])
class buf246_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf245', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf246', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf247: SchedulerNode(ComputedBuffer)
buf247.writes = [MemoryDep(name='buf247', index=c0, size=(16384,))]
buf247.unmet_dependencies = 
    [   MemoryDep(name='buf242', index=c0, size=(16384,)),
        MemoryDep(name='buf245', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf246', index=c1, size=(16, 256, 4))]
buf247.met_dependencies = 
    [   MemoryDep(name='arg121_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg122_1', index=c1, size=(16, 256, 4))]
buf247.group.device = cpu
buf247.group.iteration = ((16, 256, 4), ())
buf247.sizes = ([16, 256, 4], [])
class buf247_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf245', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf246', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg121_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg122_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf247', get_index_5, relu, None)
        return store


buf248: ExternKernelSchedulerNode(Convolution)
buf248.writes = [StarDep(name='buf248')]
buf248.unmet_dependencies = [StarDep(name='buf247')]
buf248.met_dependencies = [StarDep(name='arg123_1')]
buf248.node.kernel = aten.convolution


buf250: SchedulerNode(ComputedBuffer)
buf250.writes = 
    [   MemoryDep(name='buf250', index=c0, size=(256, 64)),
        MemoryDep(name='buf250', index=c0, size=(256,))]
buf250.unmet_dependencies = [MemoryDep(name='buf248', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf250.met_dependencies = []
buf250.group.device = cpu
buf250.group.iteration = ((256,), (16, 4))
buf250.sizes = ([256], [16, 4])
class buf250_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf250', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf251_buf567_buf568: FusedSchedulerNode(NoneType)
buf251_buf567_buf568.writes = 
    [   MemoryDep(name='buf251', index=c0, size=(256,)),
        MemoryDep(name='buf567', index=c0, size=(256,)),
        MemoryDep(name='buf568', index=c0, size=(256,))]
buf251_buf567_buf568.unmet_dependencies = [MemoryDep(name='buf250', index=c0, size=(256,))]
buf251_buf567_buf568.met_dependencies = [MemoryDep(name='arg284_1', index=c0, size=(256,)), StarDep(name='arg284_1')]
buf251_buf567_buf568.snodes = ['buf251', 'buf567', 'buf568']


buf252: SchedulerNode(ComputedBuffer)
buf252.writes = 
    [   MemoryDep(name='buf252', index=c0, size=(256, 64)),
        MemoryDep(name='buf252', index=c0, size=(256,))]
buf252.unmet_dependencies = 
    [   MemoryDep(name='buf248', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf251', index=c0, size=(256, 64))]
buf252.met_dependencies = []
buf252.group.device = cpu
buf252.group.iteration = ((256,), (16, 4))
buf252.sizes = ([256], [16, 4])
class buf252_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf251', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf252', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf253: SchedulerNode(ComputedBuffer)
buf253.writes = [MemoryDep(name='buf253', index=c0, size=(16384,))]
buf253.unmet_dependencies = 
    [   MemoryDep(name='buf248', index=c0, size=(16384,)),
        MemoryDep(name='buf251', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf252', index=c1, size=(16, 256, 4))]
buf253.met_dependencies = 
    [   MemoryDep(name='arg124_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg125_1', index=c1, size=(16, 256, 4))]
buf253.group.device = cpu
buf253.group.iteration = ((16, 256, 4), ())
buf253.sizes = ([16, 256, 4], [])
class buf253_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf251', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf252', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg124_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg125_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf253', get_index_5, relu, None)
        return store


buf254: ExternKernelSchedulerNode(Convolution)
buf254.writes = [StarDep(name='buf254')]
buf254.unmet_dependencies = [StarDep(name='buf253')]
buf254.met_dependencies = [StarDep(name='arg126_1')]
buf254.node.kernel = aten.convolution


buf256: SchedulerNode(ComputedBuffer)
buf256.writes = 
    [   MemoryDep(name='buf256', index=c0, size=(1024, 64)),
        MemoryDep(name='buf256', index=c0, size=(1024,))]
buf256.unmet_dependencies = [MemoryDep(name='buf254', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4))]
buf256.met_dependencies = []
buf256.group.device = cpu
buf256.group.iteration = ((1024,), (16, 4))
buf256.sizes = ([1024], [16, 4])
class buf256_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf256', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf257_buf573_buf574: FusedSchedulerNode(NoneType)
buf257_buf573_buf574.writes = 
    [   MemoryDep(name='buf257', index=c0, size=(1024,)),
        MemoryDep(name='buf573', index=c0, size=(1024,)),
        MemoryDep(name='buf574', index=c0, size=(1024,))]
buf257_buf573_buf574.unmet_dependencies = [MemoryDep(name='buf256', index=c0, size=(1024,))]
buf257_buf573_buf574.met_dependencies = [MemoryDep(name='arg287_1', index=c0, size=(1024,)), StarDep(name='arg287_1')]
buf257_buf573_buf574.snodes = ['buf257', 'buf573', 'buf574']


buf258: SchedulerNode(ComputedBuffer)
buf258.writes = 
    [   MemoryDep(name='buf258', index=c0, size=(1024, 64)),
        MemoryDep(name='buf258', index=c0, size=(1024,))]
buf258.unmet_dependencies = 
    [   MemoryDep(name='buf254', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4)),
        MemoryDep(name='buf257', index=c0, size=(1024, 64))]
buf258.met_dependencies = []
buf258.group.device = cpu
buf258.group.iteration = ((1024,), (16, 4))
buf258.sizes = ([1024], [16, 4])
class buf258_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf257', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf258', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf259: SchedulerNode(ComputedBuffer)
buf259.writes = [MemoryDep(name='buf259', index=c0, size=(65536,))]
buf259.unmet_dependencies = 
    [   MemoryDep(name='buf241', index=c0, size=(65536,)),
        MemoryDep(name='buf254', index=c0, size=(65536,)),
        MemoryDep(name='buf257', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='buf258', index=c1, size=(16, 1024, 4))]
buf259.met_dependencies = 
    [   MemoryDep(name='arg127_1', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='arg128_1', index=c1, size=(16, 1024, 4))]
buf259.group.device = cpu
buf259.group.iteration = ((16, 1024, 4), ())
buf259.sizes = ([16, 1024, 4], [])
class buf259_loop_body:
    var_ranges = {z0: 16, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf257', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf258', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg127_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg128_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf241', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf259', get_index_6, relu, None)
        return store


buf260: ExternKernelSchedulerNode(Convolution)
buf260.writes = [StarDep(name='buf260')]
buf260.unmet_dependencies = [StarDep(name='buf259')]
buf260.met_dependencies = [StarDep(name='arg129_1')]
buf260.node.kernel = aten.convolution


buf262: SchedulerNode(ComputedBuffer)
buf262.writes = 
    [   MemoryDep(name='buf262', index=c0, size=(512, 64)),
        MemoryDep(name='buf262', index=c0, size=(512,))]
buf262.unmet_dependencies = [MemoryDep(name='buf260', index=4*c0 + 2048*c1 + c2, size=(512, 16, 4))]
buf262.met_dependencies = []
buf262.group.device = cpu
buf262.group.iteration = ((512,), (16, 4))
buf262.sizes = ([512], [16, 4])
class buf262_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 4}
    index0 = 4*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf262', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf263_buf579_buf580: FusedSchedulerNode(NoneType)
buf263_buf579_buf580.writes = 
    [   MemoryDep(name='buf263', index=c0, size=(512,)),
        MemoryDep(name='buf579', index=c0, size=(512,)),
        MemoryDep(name='buf580', index=c0, size=(512,))]
buf263_buf579_buf580.unmet_dependencies = [MemoryDep(name='buf262', index=c0, size=(512,))]
buf263_buf579_buf580.met_dependencies = [MemoryDep(name='arg290_1', index=c0, size=(512,)), StarDep(name='arg290_1')]
buf263_buf579_buf580.snodes = ['buf263', 'buf579', 'buf580']


buf264: SchedulerNode(ComputedBuffer)
buf264.writes = 
    [   MemoryDep(name='buf264', index=c0, size=(512, 64)),
        MemoryDep(name='buf264', index=c0, size=(512,))]
buf264.unmet_dependencies = 
    [   MemoryDep(name='buf260', index=4*c0 + 2048*c1 + c2, size=(512, 16, 4)),
        MemoryDep(name='buf263', index=c0, size=(512, 64))]
buf264.met_dependencies = []
buf264.group.device = cpu
buf264.group.iteration = ((512,), (16, 4))
buf264.sizes = ([512], [16, 4])
class buf264_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 4}
    index0 = 4*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf263', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf264', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf265: SchedulerNode(ComputedBuffer)
buf265.writes = [MemoryDep(name='buf265', index=c0, size=(32768,))]
buf265.unmet_dependencies = 
    [   MemoryDep(name='buf260', index=c0, size=(32768,)),
        MemoryDep(name='buf263', index=c1, size=(16, 512, 4)),
        MemoryDep(name='buf264', index=c1, size=(16, 512, 4))]
buf265.met_dependencies = 
    [   MemoryDep(name='arg130_1', index=c1, size=(16, 512, 4)),
        MemoryDep(name='arg131_1', index=c1, size=(16, 512, 4))]
buf265.group.device = cpu
buf265.group.iteration = ((16, 512, 4), ())
buf265.sizes = ([16, 512, 4], [])
class buf265_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 4}
    index0 = 2048*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf263', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf264', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg130_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg131_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf265', get_index_5, relu, None)
        return store


buf266: ExternKernelSchedulerNode(Convolution)
buf266.writes = [StarDep(name='buf266')]
buf266.unmet_dependencies = [StarDep(name='buf265')]
buf266.met_dependencies = [StarDep(name='arg132_1')]
buf266.node.kernel = aten.convolution


buf268: SchedulerNode(ComputedBuffer)
buf268.writes = 
    [   MemoryDep(name='buf268', index=c0, size=(512, 16)),
        MemoryDep(name='buf268', index=c0, size=(512,))]
buf268.unmet_dependencies = [MemoryDep(name='buf266', index=c0 + 512*c1, size=(512, 16))]
buf268.met_dependencies = []
buf268.group.device = cpu
buf268.group.iteration = ((512,), (16,))
buf268.sizes = ([512], [16])
class buf268_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf268', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf269_buf585_buf586: FusedSchedulerNode(NoneType)
buf269_buf585_buf586.writes = 
    [   MemoryDep(name='buf269', index=c0, size=(512,)),
        MemoryDep(name='buf585', index=c0, size=(512,)),
        MemoryDep(name='buf586', index=c0, size=(512,))]
buf269_buf585_buf586.unmet_dependencies = [MemoryDep(name='buf268', index=c0, size=(512,))]
buf269_buf585_buf586.met_dependencies = [MemoryDep(name='arg293_1', index=c0, size=(512,)), StarDep(name='arg293_1')]
buf269_buf585_buf586.snodes = ['buf269', 'buf585', 'buf586']


buf270: SchedulerNode(ComputedBuffer)
buf270.writes = 
    [   MemoryDep(name='buf270', index=c0, size=(512, 16)),
        MemoryDep(name='buf270', index=c0, size=(512,))]
buf270.unmet_dependencies = 
    [   MemoryDep(name='buf266', index=c0 + 512*c1, size=(512, 16)),
        MemoryDep(name='buf269', index=c0, size=(512, 16))]
buf270.met_dependencies = []
buf270.group.device = cpu
buf270.group.iteration = ((512,), (16,))
buf270.sizes = ([512], [16])
class buf270_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf269', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf270', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf271: SchedulerNode(ComputedBuffer)
buf271.writes = [MemoryDep(name='buf271', index=c0, size=(8192,))]
buf271.unmet_dependencies = 
    [   MemoryDep(name='buf266', index=c0, size=(8192,)),
        MemoryDep(name='buf269', index=c1, size=(16, 512)),
        MemoryDep(name='buf270', index=c1, size=(16, 512))]
buf271.met_dependencies = 
    [   MemoryDep(name='arg133_1', index=c1, size=(16, 512)),
        MemoryDep(name='arg134_1', index=c1, size=(16, 512))]
buf271.group.device = cpu
buf271.group.iteration = ((16, 512), ())
buf271.sizes = ([16, 512], [])
class buf271_loop_body:
    var_ranges = {z0: 16, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf269', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf270', get_index_2)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg133_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg134_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf271', get_index_5, relu, None)
        return store


buf272: ExternKernelSchedulerNode(Convolution)
buf272.writes = [StarDep(name='buf272')]
buf272.unmet_dependencies = [StarDep(name='buf271')]
buf272.met_dependencies = [StarDep(name='arg135_1')]
buf272.node.kernel = aten.convolution


buf274: SchedulerNode(ComputedBuffer)
buf274.writes = 
    [   MemoryDep(name='buf274', index=c0, size=(2048, 16)),
        MemoryDep(name='buf274', index=c0, size=(2048,))]
buf274.unmet_dependencies = [MemoryDep(name='buf272', index=c0 + 2048*c1, size=(2048, 16))]
buf274.met_dependencies = []
buf274.group.device = cpu
buf274.group.iteration = ((2048,), (16,))
buf274.sizes = ([2048], [16])
class buf274_loop_body:
    var_ranges = {z0: 2048, z1: 16}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf274', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf275_buf591_buf592: FusedSchedulerNode(NoneType)
buf275_buf591_buf592.writes = 
    [   MemoryDep(name='buf275', index=c0, size=(2048,)),
        MemoryDep(name='buf591', index=c0, size=(2048,)),
        MemoryDep(name='buf592', index=c0, size=(2048,))]
buf275_buf591_buf592.unmet_dependencies = [MemoryDep(name='buf274', index=c0, size=(2048,))]
buf275_buf591_buf592.met_dependencies = [MemoryDep(name='arg296_1', index=c0, size=(2048,)), StarDep(name='arg296_1')]
buf275_buf591_buf592.snodes = ['buf275', 'buf591', 'buf592']


buf276: SchedulerNode(ComputedBuffer)
buf276.writes = 
    [   MemoryDep(name='buf276', index=c0, size=(2048, 16)),
        MemoryDep(name='buf276', index=c0, size=(2048,))]
buf276.unmet_dependencies = 
    [   MemoryDep(name='buf272', index=c0 + 2048*c1, size=(2048, 16)),
        MemoryDep(name='buf275', index=c0, size=(2048, 16))]
buf276.met_dependencies = []
buf276.group.device = cpu
buf276.group.iteration = ((2048,), (16,))
buf276.sizes = ([2048], [16])
class buf276_loop_body:
    var_ranges = {z0: 2048, z1: 16}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf275', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf276', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf277: ExternKernelSchedulerNode(Convolution)
buf277.writes = [StarDep(name='buf277')]
buf277.unmet_dependencies = [StarDep(name='buf259')]
buf277.met_dependencies = [StarDep(name='arg138_1')]
buf277.node.kernel = aten.convolution


buf279: SchedulerNode(ComputedBuffer)
buf279.writes = 
    [   MemoryDep(name='buf279', index=c0, size=(2048, 16)),
        MemoryDep(name='buf279', index=c0, size=(2048,))]
buf279.unmet_dependencies = [MemoryDep(name='buf277', index=c0 + 2048*c1, size=(2048, 16))]
buf279.met_dependencies = []
buf279.group.device = cpu
buf279.group.iteration = ((2048,), (16,))
buf279.sizes = ([2048], [16])
class buf279_loop_body:
    var_ranges = {z0: 2048, z1: 16}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf279', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf280_buf597_buf598: FusedSchedulerNode(NoneType)
buf280_buf597_buf598.writes = 
    [   MemoryDep(name='buf280', index=c0, size=(2048,)),
        MemoryDep(name='buf597', index=c0, size=(2048,)),
        MemoryDep(name='buf598', index=c0, size=(2048,))]
buf280_buf597_buf598.unmet_dependencies = [MemoryDep(name='buf279', index=c0, size=(2048,))]
buf280_buf597_buf598.met_dependencies = [MemoryDep(name='arg299_1', index=c0, size=(2048,)), StarDep(name='arg299_1')]
buf280_buf597_buf598.snodes = ['buf280', 'buf597', 'buf598']


buf281: SchedulerNode(ComputedBuffer)
buf281.writes = 
    [   MemoryDep(name='buf281', index=c0, size=(2048, 16)),
        MemoryDep(name='buf281', index=c0, size=(2048,))]
buf281.unmet_dependencies = 
    [   MemoryDep(name='buf277', index=c0 + 2048*c1, size=(2048, 16)),
        MemoryDep(name='buf280', index=c0, size=(2048, 16))]
buf281.met_dependencies = []
buf281.group.device = cpu
buf281.group.iteration = ((2048,), (16,))
buf281.sizes = ([2048], [16])
class buf281_loop_body:
    var_ranges = {z0: 2048, z1: 16}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf280', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf281', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf282: SchedulerNode(ComputedBuffer)
buf282.writes = [MemoryDep(name='buf282', index=c0, size=(32768,))]
buf282.unmet_dependencies = 
    [   MemoryDep(name='buf272', index=c0, size=(32768,)),
        MemoryDep(name='buf275', index=c1, size=(16, 2048)),
        MemoryDep(name='buf276', index=c1, size=(16, 2048)),
        MemoryDep(name='buf277', index=c0, size=(32768,)),
        MemoryDep(name='buf280', index=c1, size=(16, 2048)),
        MemoryDep(name='buf281', index=c1, size=(16, 2048))]
buf282.met_dependencies = 
    [   MemoryDep(name='arg136_1', index=c1, size=(16, 2048)),
        MemoryDep(name='arg137_1', index=c1, size=(16, 2048)),
        MemoryDep(name='arg139_1', index=c1, size=(16, 2048)),
        MemoryDep(name='arg140_1', index=c1, size=(16, 2048))]
buf282.group.device = cpu
buf282.group.iteration = ((16, 2048), ())
buf282.sizes = ([16, 2048], [])
class buf282_loop_body:
    var_ranges = {z0: 16, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf275', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf276', get_index_2)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg136_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg137_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf277', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf280', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf281', get_index_7)
        constant_2 = ops.constant(16, torch.float32)
        div_1 = ops.div(load_7, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg139_1', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg140_1', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf282', get_index_10, add_4, None)
        return store


buf283: SchedulerNode(ComputedBuffer)
buf283.writes = [MemoryDep(name='buf283', index=c0, size=(32768,))]
buf283.unmet_dependencies = [MemoryDep(name='buf282', index=c0, size=(32768,))]
buf283.met_dependencies = []
buf283.group.device = cpu
buf283.group.iteration = ((32768,), ())
buf283.sizes = ([32768], [])
class buf283_loop_body:
    var_ranges = {z0: 32768}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf282', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf283', get_index_1, relu, None)
        return store


buf284: ExternKernelSchedulerNode(Convolution)
buf284.writes = [StarDep(name='buf284')]
buf284.unmet_dependencies = [StarDep(name='buf283')]
buf284.met_dependencies = [StarDep(name='arg141_1')]
buf284.node.kernel = aten.convolution


buf286: SchedulerNode(ComputedBuffer)
buf286.writes = 
    [   MemoryDep(name='buf286', index=c0, size=(512, 16)),
        MemoryDep(name='buf286', index=c0, size=(512,))]
buf286.unmet_dependencies = [MemoryDep(name='buf284', index=c0 + 512*c1, size=(512, 16))]
buf286.met_dependencies = []
buf286.group.device = cpu
buf286.group.iteration = ((512,), (16,))
buf286.sizes = ([512], [16])
class buf286_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf286', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf287_buf603_buf604: FusedSchedulerNode(NoneType)
buf287_buf603_buf604.writes = 
    [   MemoryDep(name='buf287', index=c0, size=(512,)),
        MemoryDep(name='buf603', index=c0, size=(512,)),
        MemoryDep(name='buf604', index=c0, size=(512,))]
buf287_buf603_buf604.unmet_dependencies = [MemoryDep(name='buf286', index=c0, size=(512,))]
buf287_buf603_buf604.met_dependencies = [MemoryDep(name='arg302_1', index=c0, size=(512,)), StarDep(name='arg302_1')]
buf287_buf603_buf604.snodes = ['buf287', 'buf603', 'buf604']


buf288: SchedulerNode(ComputedBuffer)
buf288.writes = 
    [   MemoryDep(name='buf288', index=c0, size=(512, 16)),
        MemoryDep(name='buf288', index=c0, size=(512,))]
buf288.unmet_dependencies = 
    [   MemoryDep(name='buf284', index=c0 + 512*c1, size=(512, 16)),
        MemoryDep(name='buf287', index=c0, size=(512, 16))]
buf288.met_dependencies = []
buf288.group.device = cpu
buf288.group.iteration = ((512,), (16,))
buf288.sizes = ([512], [16])
class buf288_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf287', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf288', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf289: SchedulerNode(ComputedBuffer)
buf289.writes = [MemoryDep(name='buf289', index=c0, size=(8192,))]
buf289.unmet_dependencies = 
    [   MemoryDep(name='buf284', index=c0, size=(8192,)),
        MemoryDep(name='buf287', index=c1, size=(16, 512)),
        MemoryDep(name='buf288', index=c1, size=(16, 512))]
buf289.met_dependencies = 
    [   MemoryDep(name='arg142_1', index=c1, size=(16, 512)),
        MemoryDep(name='arg143_1', index=c1, size=(16, 512))]
buf289.group.device = cpu
buf289.group.iteration = ((16, 512), ())
buf289.sizes = ([16, 512], [])
class buf289_loop_body:
    var_ranges = {z0: 16, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf287', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf288', get_index_2)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg142_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg143_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf289', get_index_5, relu, None)
        return store


buf290: ExternKernelSchedulerNode(Convolution)
buf290.writes = [StarDep(name='buf290')]
buf290.unmet_dependencies = [StarDep(name='buf289')]
buf290.met_dependencies = [StarDep(name='arg144_1')]
buf290.node.kernel = aten.convolution


buf292: SchedulerNode(ComputedBuffer)
buf292.writes = 
    [   MemoryDep(name='buf292', index=c0, size=(512, 16)),
        MemoryDep(name='buf292', index=c0, size=(512,))]
buf292.unmet_dependencies = [MemoryDep(name='buf290', index=c0 + 512*c1, size=(512, 16))]
buf292.met_dependencies = []
buf292.group.device = cpu
buf292.group.iteration = ((512,), (16,))
buf292.sizes = ([512], [16])
class buf292_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf292', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf293_buf609_buf610: FusedSchedulerNode(NoneType)
buf293_buf609_buf610.writes = 
    [   MemoryDep(name='buf293', index=c0, size=(512,)),
        MemoryDep(name='buf609', index=c0, size=(512,)),
        MemoryDep(name='buf610', index=c0, size=(512,))]
buf293_buf609_buf610.unmet_dependencies = [MemoryDep(name='buf292', index=c0, size=(512,))]
buf293_buf609_buf610.met_dependencies = [MemoryDep(name='arg305_1', index=c0, size=(512,)), StarDep(name='arg305_1')]
buf293_buf609_buf610.snodes = ['buf293', 'buf609', 'buf610']


buf294: SchedulerNode(ComputedBuffer)
buf294.writes = 
    [   MemoryDep(name='buf294', index=c0, size=(512, 16)),
        MemoryDep(name='buf294', index=c0, size=(512,))]
buf294.unmet_dependencies = 
    [   MemoryDep(name='buf290', index=c0 + 512*c1, size=(512, 16)),
        MemoryDep(name='buf293', index=c0, size=(512, 16))]
buf294.met_dependencies = []
buf294.group.device = cpu
buf294.group.iteration = ((512,), (16,))
buf294.sizes = ([512], [16])
class buf294_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf293', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf294', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf295: SchedulerNode(ComputedBuffer)
buf295.writes = [MemoryDep(name='buf295', index=c0, size=(8192,))]
buf295.unmet_dependencies = 
    [   MemoryDep(name='buf290', index=c0, size=(8192,)),
        MemoryDep(name='buf293', index=c1, size=(16, 512)),
        MemoryDep(name='buf294', index=c1, size=(16, 512))]
buf295.met_dependencies = 
    [   MemoryDep(name='arg145_1', index=c1, size=(16, 512)),
        MemoryDep(name='arg146_1', index=c1, size=(16, 512))]
buf295.group.device = cpu
buf295.group.iteration = ((16, 512), ())
buf295.sizes = ([16, 512], [])
class buf295_loop_body:
    var_ranges = {z0: 16, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf293', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf294', get_index_2)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg145_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg146_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf295', get_index_5, relu, None)
        return store


buf296: ExternKernelSchedulerNode(Convolution)
buf296.writes = [StarDep(name='buf296')]
buf296.unmet_dependencies = [StarDep(name='buf295')]
buf296.met_dependencies = [StarDep(name='arg147_1')]
buf296.node.kernel = aten.convolution


buf298: SchedulerNode(ComputedBuffer)
buf298.writes = 
    [   MemoryDep(name='buf298', index=c0, size=(2048, 16)),
        MemoryDep(name='buf298', index=c0, size=(2048,))]
buf298.unmet_dependencies = [MemoryDep(name='buf296', index=c0 + 2048*c1, size=(2048, 16))]
buf298.met_dependencies = []
buf298.group.device = cpu
buf298.group.iteration = ((2048,), (16,))
buf298.sizes = ([2048], [16])
class buf298_loop_body:
    var_ranges = {z0: 2048, z1: 16}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf298', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf299_buf615_buf616: FusedSchedulerNode(NoneType)
buf299_buf615_buf616.writes = 
    [   MemoryDep(name='buf299', index=c0, size=(2048,)),
        MemoryDep(name='buf615', index=c0, size=(2048,)),
        MemoryDep(name='buf616', index=c0, size=(2048,))]
buf299_buf615_buf616.unmet_dependencies = [MemoryDep(name='buf298', index=c0, size=(2048,))]
buf299_buf615_buf616.met_dependencies = [MemoryDep(name='arg308_1', index=c0, size=(2048,)), StarDep(name='arg308_1')]
buf299_buf615_buf616.snodes = ['buf299', 'buf615', 'buf616']


buf300: SchedulerNode(ComputedBuffer)
buf300.writes = 
    [   MemoryDep(name='buf300', index=c0, size=(2048, 16)),
        MemoryDep(name='buf300', index=c0, size=(2048,))]
buf300.unmet_dependencies = 
    [   MemoryDep(name='buf296', index=c0 + 2048*c1, size=(2048, 16)),
        MemoryDep(name='buf299', index=c0, size=(2048, 16))]
buf300.met_dependencies = []
buf300.group.device = cpu
buf300.group.iteration = ((2048,), (16,))
buf300.sizes = ([2048], [16])
class buf300_loop_body:
    var_ranges = {z0: 2048, z1: 16}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf299', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf300', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf301: SchedulerNode(ComputedBuffer)
buf301.writes = [MemoryDep(name='buf301', index=c0, size=(32768,))]
buf301.unmet_dependencies = 
    [   MemoryDep(name='buf283', index=c0, size=(32768,)),
        MemoryDep(name='buf296', index=c0, size=(32768,)),
        MemoryDep(name='buf299', index=c1, size=(16, 2048)),
        MemoryDep(name='buf300', index=c1, size=(16, 2048))]
buf301.met_dependencies = 
    [   MemoryDep(name='arg148_1', index=c1, size=(16, 2048)),
        MemoryDep(name='arg149_1', index=c1, size=(16, 2048))]
buf301.group.device = cpu
buf301.group.iteration = ((16, 2048), ())
buf301.sizes = ([16, 2048], [])
class buf301_loop_body:
    var_ranges = {z0: 16, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf299', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf300', get_index_2)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg148_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg149_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf283', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf301', get_index_6, relu, None)
        return store


buf302: ExternKernelSchedulerNode(Convolution)
buf302.writes = [StarDep(name='buf302')]
buf302.unmet_dependencies = [StarDep(name='buf301')]
buf302.met_dependencies = [StarDep(name='arg150_1')]
buf302.node.kernel = aten.convolution


buf304: SchedulerNode(ComputedBuffer)
buf304.writes = 
    [   MemoryDep(name='buf304', index=c0, size=(512, 16)),
        MemoryDep(name='buf304', index=c0, size=(512,))]
buf304.unmet_dependencies = [MemoryDep(name='buf302', index=c0 + 512*c1, size=(512, 16))]
buf304.met_dependencies = []
buf304.group.device = cpu
buf304.group.iteration = ((512,), (16,))
buf304.sizes = ([512], [16])
class buf304_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf304', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf305_buf621_buf622: FusedSchedulerNode(NoneType)
buf305_buf621_buf622.writes = 
    [   MemoryDep(name='buf305', index=c0, size=(512,)),
        MemoryDep(name='buf621', index=c0, size=(512,)),
        MemoryDep(name='buf622', index=c0, size=(512,))]
buf305_buf621_buf622.unmet_dependencies = [MemoryDep(name='buf304', index=c0, size=(512,))]
buf305_buf621_buf622.met_dependencies = [MemoryDep(name='arg311_1', index=c0, size=(512,)), StarDep(name='arg311_1')]
buf305_buf621_buf622.snodes = ['buf305', 'buf621', 'buf622']


buf306: SchedulerNode(ComputedBuffer)
buf306.writes = 
    [   MemoryDep(name='buf306', index=c0, size=(512, 16)),
        MemoryDep(name='buf306', index=c0, size=(512,))]
buf306.unmet_dependencies = 
    [   MemoryDep(name='buf302', index=c0 + 512*c1, size=(512, 16)),
        MemoryDep(name='buf305', index=c0, size=(512, 16))]
buf306.met_dependencies = []
buf306.group.device = cpu
buf306.group.iteration = ((512,), (16,))
buf306.sizes = ([512], [16])
class buf306_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf305', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf306', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf307: SchedulerNode(ComputedBuffer)
buf307.writes = [MemoryDep(name='buf307', index=c0, size=(8192,))]
buf307.unmet_dependencies = 
    [   MemoryDep(name='buf302', index=c0, size=(8192,)),
        MemoryDep(name='buf305', index=c1, size=(16, 512)),
        MemoryDep(name='buf306', index=c1, size=(16, 512))]
buf307.met_dependencies = 
    [   MemoryDep(name='arg151_1', index=c1, size=(16, 512)),
        MemoryDep(name='arg152_1', index=c1, size=(16, 512))]
buf307.group.device = cpu
buf307.group.iteration = ((16, 512), ())
buf307.sizes = ([16, 512], [])
class buf307_loop_body:
    var_ranges = {z0: 16, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf305', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf306', get_index_2)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg151_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg152_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf307', get_index_5, relu, None)
        return store


buf308: ExternKernelSchedulerNode(Convolution)
buf308.writes = [StarDep(name='buf308')]
buf308.unmet_dependencies = [StarDep(name='buf307')]
buf308.met_dependencies = [StarDep(name='arg153_1')]
buf308.node.kernel = aten.convolution


buf310: SchedulerNode(ComputedBuffer)
buf310.writes = 
    [   MemoryDep(name='buf310', index=c0, size=(512, 16)),
        MemoryDep(name='buf310', index=c0, size=(512,))]
buf310.unmet_dependencies = [MemoryDep(name='buf308', index=c0 + 512*c1, size=(512, 16))]
buf310.met_dependencies = []
buf310.group.device = cpu
buf310.group.iteration = ((512,), (16,))
buf310.sizes = ([512], [16])
class buf310_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf310', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf311_buf627_buf628: FusedSchedulerNode(NoneType)
buf311_buf627_buf628.writes = 
    [   MemoryDep(name='buf311', index=c0, size=(512,)),
        MemoryDep(name='buf627', index=c0, size=(512,)),
        MemoryDep(name='buf628', index=c0, size=(512,))]
buf311_buf627_buf628.unmet_dependencies = [MemoryDep(name='buf310', index=c0, size=(512,))]
buf311_buf627_buf628.met_dependencies = [MemoryDep(name='arg314_1', index=c0, size=(512,)), StarDep(name='arg314_1')]
buf311_buf627_buf628.snodes = ['buf311', 'buf627', 'buf628']


buf312: SchedulerNode(ComputedBuffer)
buf312.writes = 
    [   MemoryDep(name='buf312', index=c0, size=(512, 16)),
        MemoryDep(name='buf312', index=c0, size=(512,))]
buf312.unmet_dependencies = 
    [   MemoryDep(name='buf308', index=c0 + 512*c1, size=(512, 16)),
        MemoryDep(name='buf311', index=c0, size=(512, 16))]
buf312.met_dependencies = []
buf312.group.device = cpu
buf312.group.iteration = ((512,), (16,))
buf312.sizes = ([512], [16])
class buf312_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf311', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf312', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf313: SchedulerNode(ComputedBuffer)
buf313.writes = [MemoryDep(name='buf313', index=c0, size=(8192,))]
buf313.unmet_dependencies = 
    [   MemoryDep(name='buf308', index=c0, size=(8192,)),
        MemoryDep(name='buf311', index=c1, size=(16, 512)),
        MemoryDep(name='buf312', index=c1, size=(16, 512))]
buf313.met_dependencies = 
    [   MemoryDep(name='arg154_1', index=c1, size=(16, 512)),
        MemoryDep(name='arg155_1', index=c1, size=(16, 512))]
buf313.group.device = cpu
buf313.group.iteration = ((16, 512), ())
buf313.sizes = ([16, 512], [])
class buf313_loop_body:
    var_ranges = {z0: 16, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf311', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf312', get_index_2)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg154_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg155_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf313', get_index_5, relu, None)
        return store


buf314: ExternKernelSchedulerNode(Convolution)
buf314.writes = [StarDep(name='buf314')]
buf314.unmet_dependencies = [StarDep(name='buf313')]
buf314.met_dependencies = [StarDep(name='arg156_1')]
buf314.node.kernel = aten.convolution


buf316: SchedulerNode(ComputedBuffer)
buf316.writes = 
    [   MemoryDep(name='buf316', index=c0, size=(2048, 16)),
        MemoryDep(name='buf316', index=c0, size=(2048,))]
buf316.unmet_dependencies = [MemoryDep(name='buf314', index=c0 + 2048*c1, size=(2048, 16))]
buf316.met_dependencies = []
buf316.group.device = cpu
buf316.group.iteration = ((2048,), (16,))
buf316.sizes = ([2048], [16])
class buf316_loop_body:
    var_ranges = {z0: 2048, z1: 16}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf316', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf317_buf633_buf634: FusedSchedulerNode(NoneType)
buf317_buf633_buf634.writes = 
    [   MemoryDep(name='buf317', index=c0, size=(2048,)),
        MemoryDep(name='buf633', index=c0, size=(2048,)),
        MemoryDep(name='buf634', index=c0, size=(2048,))]
buf317_buf633_buf634.unmet_dependencies = [MemoryDep(name='buf316', index=c0, size=(2048,))]
buf317_buf633_buf634.met_dependencies = [MemoryDep(name='arg317_1', index=c0, size=(2048,)), StarDep(name='arg317_1')]
buf317_buf633_buf634.snodes = ['buf317', 'buf633', 'buf634']


buf318: SchedulerNode(ComputedBuffer)
buf318.writes = 
    [   MemoryDep(name='buf318', index=c0, size=(2048, 16)),
        MemoryDep(name='buf318', index=c0, size=(2048,))]
buf318.unmet_dependencies = 
    [   MemoryDep(name='buf314', index=c0 + 2048*c1, size=(2048, 16)),
        MemoryDep(name='buf317', index=c0, size=(2048, 16))]
buf318.met_dependencies = []
buf318.group.device = cpu
buf318.group.iteration = ((2048,), (16,))
buf318.sizes = ([2048], [16])
class buf318_loop_body:
    var_ranges = {z0: 2048, z1: 16}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf317', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf318', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf319: SchedulerNode(ComputedBuffer)
buf319.writes = [MemoryDep(name='buf319', index=c0, size=(32768,))]
buf319.unmet_dependencies = 
    [   MemoryDep(name='buf301', index=c0, size=(32768,)),
        MemoryDep(name='buf314', index=c0, size=(32768,)),
        MemoryDep(name='buf317', index=c1, size=(16, 2048)),
        MemoryDep(name='buf318', index=c1, size=(16, 2048))]
buf319.met_dependencies = 
    [   MemoryDep(name='arg157_1', index=c1, size=(16, 2048)),
        MemoryDep(name='arg158_1', index=c1, size=(16, 2048))]
buf319.group.device = cpu
buf319.group.iteration = ((16, 2048), ())
buf319.sizes = ([16, 2048], [])
class buf319_loop_body:
    var_ranges = {z0: 16, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf317', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf318', get_index_2)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg157_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg158_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf301', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        constant_2 = ops.constant(1, torch.float32)
        div_1 = ops.div(relu, constant_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf319', get_index_6, div_1, None)
        return store


buf320: ExternKernelSchedulerNode(ExternKernelOut)
buf320.writes = [StarDep(name='buf320')]
buf320.unmet_dependencies = [StarDep(name='buf319')]
buf320.met_dependencies = [StarDep(name='arg159_1'), StarDep(name='arg160_1')]
buf320.node.kernel = extern_kernels.addmm


buf323_buf324: FusedSchedulerNode(NoneType)
buf323_buf324.writes = 
    [   MemoryDep(name='buf323', index=c0, size=(64,)),
        MemoryDep(name='buf324', index=c0, size=(64,))]
buf323_buf324.unmet_dependencies = [MemoryDep(name='buf4', index=c0, size=(64,))]
buf323_buf324.met_dependencies = [MemoryDep(name='arg162_1', index=c0, size=(64,)), StarDep(name='arg162_1')]
buf323_buf324.snodes = ['buf323', 'buf324']


buf325_buf326: FusedSchedulerNode(NoneType)
buf325_buf326.writes = 
    [   MemoryDep(name='buf325', index=0, size=()),
        MemoryDep(name='buf326', index=0, size=())]
buf325_buf326.unmet_dependencies = []
buf325_buf326.met_dependencies = [MemoryDep(name='arg163_1', index=0, size=()), StarDep(name='arg163_1')]
buf325_buf326.snodes = ['buf325', 'buf326']


buf329_buf330: FusedSchedulerNode(NoneType)
buf329_buf330.writes = 
    [   MemoryDep(name='buf329', index=c0, size=(64,)),
        MemoryDep(name='buf330', index=c0, size=(64,))]
buf329_buf330.unmet_dependencies = [MemoryDep(name='buf12', index=c0, size=(64,))]
buf329_buf330.met_dependencies = [MemoryDep(name='arg165_1', index=c0, size=(64,)), StarDep(name='arg165_1')]
buf329_buf330.snodes = ['buf329', 'buf330']


buf331_buf332: FusedSchedulerNode(NoneType)
buf331_buf332.writes = 
    [   MemoryDep(name='buf331', index=0, size=()),
        MemoryDep(name='buf332', index=0, size=())]
buf331_buf332.unmet_dependencies = []
buf331_buf332.met_dependencies = [MemoryDep(name='arg166_1', index=0, size=()), StarDep(name='arg166_1')]
buf331_buf332.snodes = ['buf331', 'buf332']


buf335_buf336: FusedSchedulerNode(NoneType)
buf335_buf336.writes = 
    [   MemoryDep(name='buf335', index=c0, size=(64,)),
        MemoryDep(name='buf336', index=c0, size=(64,))]
buf335_buf336.unmet_dependencies = [MemoryDep(name='buf18', index=c0, size=(64,))]
buf335_buf336.met_dependencies = [MemoryDep(name='arg168_1', index=c0, size=(64,)), StarDep(name='arg168_1')]
buf335_buf336.snodes = ['buf335', 'buf336']


buf337_buf338: FusedSchedulerNode(NoneType)
buf337_buf338.writes = 
    [   MemoryDep(name='buf337', index=0, size=()),
        MemoryDep(name='buf338', index=0, size=())]
buf337_buf338.unmet_dependencies = []
buf337_buf338.met_dependencies = [MemoryDep(name='arg169_1', index=0, size=()), StarDep(name='arg169_1')]
buf337_buf338.snodes = ['buf337', 'buf338']


buf341_buf342: FusedSchedulerNode(NoneType)
buf341_buf342.writes = 
    [   MemoryDep(name='buf341', index=c0, size=(256,)),
        MemoryDep(name='buf342', index=c0, size=(256,))]
buf341_buf342.unmet_dependencies = [MemoryDep(name='buf24', index=c0, size=(256,))]
buf341_buf342.met_dependencies = [MemoryDep(name='arg171_1', index=c0, size=(256,)), StarDep(name='arg171_1')]
buf341_buf342.snodes = ['buf341', 'buf342']


buf343_buf344: FusedSchedulerNode(NoneType)
buf343_buf344.writes = 
    [   MemoryDep(name='buf343', index=0, size=()),
        MemoryDep(name='buf344', index=0, size=())]
buf343_buf344.unmet_dependencies = []
buf343_buf344.met_dependencies = [MemoryDep(name='arg172_1', index=0, size=()), StarDep(name='arg172_1')]
buf343_buf344.snodes = ['buf343', 'buf344']


buf347_buf348: FusedSchedulerNode(NoneType)
buf347_buf348.writes = 
    [   MemoryDep(name='buf347', index=c0, size=(256,)),
        MemoryDep(name='buf348', index=c0, size=(256,))]
buf347_buf348.unmet_dependencies = [MemoryDep(name='buf29', index=c0, size=(256,))]
buf347_buf348.met_dependencies = [MemoryDep(name='arg174_1', index=c0, size=(256,)), StarDep(name='arg174_1')]
buf347_buf348.snodes = ['buf347', 'buf348']


buf349_buf350: FusedSchedulerNode(NoneType)
buf349_buf350.writes = 
    [   MemoryDep(name='buf349', index=0, size=()),
        MemoryDep(name='buf350', index=0, size=())]
buf349_buf350.unmet_dependencies = []
buf349_buf350.met_dependencies = [MemoryDep(name='arg175_1', index=0, size=()), StarDep(name='arg175_1')]
buf349_buf350.snodes = ['buf349', 'buf350']


buf353_buf354: FusedSchedulerNode(NoneType)
buf353_buf354.writes = 
    [   MemoryDep(name='buf353', index=c0, size=(64,)),
        MemoryDep(name='buf354', index=c0, size=(64,))]
buf353_buf354.unmet_dependencies = [MemoryDep(name='buf36', index=c0, size=(64,))]
buf353_buf354.met_dependencies = [MemoryDep(name='arg177_1', index=c0, size=(64,)), StarDep(name='arg177_1')]
buf353_buf354.snodes = ['buf353', 'buf354']


buf355_buf356: FusedSchedulerNode(NoneType)
buf355_buf356.writes = 
    [   MemoryDep(name='buf355', index=0, size=()),
        MemoryDep(name='buf356', index=0, size=())]
buf355_buf356.unmet_dependencies = []
buf355_buf356.met_dependencies = [MemoryDep(name='arg178_1', index=0, size=()), StarDep(name='arg178_1')]
buf355_buf356.snodes = ['buf355', 'buf356']


buf359_buf360: FusedSchedulerNode(NoneType)
buf359_buf360.writes = 
    [   MemoryDep(name='buf359', index=c0, size=(64,)),
        MemoryDep(name='buf360', index=c0, size=(64,))]
buf359_buf360.unmet_dependencies = [MemoryDep(name='buf42', index=c0, size=(64,))]
buf359_buf360.met_dependencies = [MemoryDep(name='arg180_1', index=c0, size=(64,)), StarDep(name='arg180_1')]
buf359_buf360.snodes = ['buf359', 'buf360']


buf361_buf362: FusedSchedulerNode(NoneType)
buf361_buf362.writes = 
    [   MemoryDep(name='buf361', index=0, size=()),
        MemoryDep(name='buf362', index=0, size=())]
buf361_buf362.unmet_dependencies = []
buf361_buf362.met_dependencies = [MemoryDep(name='arg181_1', index=0, size=()), StarDep(name='arg181_1')]
buf361_buf362.snodes = ['buf361', 'buf362']


buf365_buf366: FusedSchedulerNode(NoneType)
buf365_buf366.writes = 
    [   MemoryDep(name='buf365', index=c0, size=(256,)),
        MemoryDep(name='buf366', index=c0, size=(256,))]
buf365_buf366.unmet_dependencies = [MemoryDep(name='buf48', index=c0, size=(256,))]
buf365_buf366.met_dependencies = [MemoryDep(name='arg183_1', index=c0, size=(256,)), StarDep(name='arg183_1')]
buf365_buf366.snodes = ['buf365', 'buf366']


buf367_buf368: FusedSchedulerNode(NoneType)
buf367_buf368.writes = 
    [   MemoryDep(name='buf367', index=0, size=()),
        MemoryDep(name='buf368', index=0, size=())]
buf367_buf368.unmet_dependencies = []
buf367_buf368.met_dependencies = [MemoryDep(name='arg184_1', index=0, size=()), StarDep(name='arg184_1')]
buf367_buf368.snodes = ['buf367', 'buf368']


buf371_buf372: FusedSchedulerNode(NoneType)
buf371_buf372.writes = 
    [   MemoryDep(name='buf371', index=c0, size=(64,)),
        MemoryDep(name='buf372', index=c0, size=(64,))]
buf371_buf372.unmet_dependencies = [MemoryDep(name='buf54', index=c0, size=(64,))]
buf371_buf372.met_dependencies = [MemoryDep(name='arg186_1', index=c0, size=(64,)), StarDep(name='arg186_1')]
buf371_buf372.snodes = ['buf371', 'buf372']


buf373_buf374: FusedSchedulerNode(NoneType)
buf373_buf374.writes = 
    [   MemoryDep(name='buf373', index=0, size=()),
        MemoryDep(name='buf374', index=0, size=())]
buf373_buf374.unmet_dependencies = []
buf373_buf374.met_dependencies = [MemoryDep(name='arg187_1', index=0, size=()), StarDep(name='arg187_1')]
buf373_buf374.snodes = ['buf373', 'buf374']


buf377_buf378: FusedSchedulerNode(NoneType)
buf377_buf378.writes = 
    [   MemoryDep(name='buf377', index=c0, size=(64,)),
        MemoryDep(name='buf378', index=c0, size=(64,))]
buf377_buf378.unmet_dependencies = [MemoryDep(name='buf60', index=c0, size=(64,))]
buf377_buf378.met_dependencies = [MemoryDep(name='arg189_1', index=c0, size=(64,)), StarDep(name='arg189_1')]
buf377_buf378.snodes = ['buf377', 'buf378']


buf379_buf380: FusedSchedulerNode(NoneType)
buf379_buf380.writes = 
    [   MemoryDep(name='buf379', index=0, size=()),
        MemoryDep(name='buf380', index=0, size=())]
buf379_buf380.unmet_dependencies = []
buf379_buf380.met_dependencies = [MemoryDep(name='arg190_1', index=0, size=()), StarDep(name='arg190_1')]
buf379_buf380.snodes = ['buf379', 'buf380']


buf383_buf384: FusedSchedulerNode(NoneType)
buf383_buf384.writes = 
    [   MemoryDep(name='buf383', index=c0, size=(256,)),
        MemoryDep(name='buf384', index=c0, size=(256,))]
buf383_buf384.unmet_dependencies = [MemoryDep(name='buf66', index=c0, size=(256,))]
buf383_buf384.met_dependencies = [MemoryDep(name='arg192_1', index=c0, size=(256,)), StarDep(name='arg192_1')]
buf383_buf384.snodes = ['buf383', 'buf384']


buf385_buf386: FusedSchedulerNode(NoneType)
buf385_buf386.writes = 
    [   MemoryDep(name='buf385', index=0, size=()),
        MemoryDep(name='buf386', index=0, size=())]
buf385_buf386.unmet_dependencies = []
buf385_buf386.met_dependencies = [MemoryDep(name='arg193_1', index=0, size=()), StarDep(name='arg193_1')]
buf385_buf386.snodes = ['buf385', 'buf386']


buf389_buf390: FusedSchedulerNode(NoneType)
buf389_buf390.writes = 
    [   MemoryDep(name='buf389', index=c0, size=(128,)),
        MemoryDep(name='buf390', index=c0, size=(128,))]
buf389_buf390.unmet_dependencies = [MemoryDep(name='buf72', index=c0, size=(128,))]
buf389_buf390.met_dependencies = [MemoryDep(name='arg195_1', index=c0, size=(128,)), StarDep(name='arg195_1')]
buf389_buf390.snodes = ['buf389', 'buf390']


buf391_buf392: FusedSchedulerNode(NoneType)
buf391_buf392.writes = 
    [   MemoryDep(name='buf391', index=0, size=()),
        MemoryDep(name='buf392', index=0, size=())]
buf391_buf392.unmet_dependencies = []
buf391_buf392.met_dependencies = [MemoryDep(name='arg196_1', index=0, size=()), StarDep(name='arg196_1')]
buf391_buf392.snodes = ['buf391', 'buf392']


buf395_buf396: FusedSchedulerNode(NoneType)
buf395_buf396.writes = 
    [   MemoryDep(name='buf395', index=c0, size=(128,)),
        MemoryDep(name='buf396', index=c0, size=(128,))]
buf395_buf396.unmet_dependencies = [MemoryDep(name='buf78', index=c0, size=(128,))]
buf395_buf396.met_dependencies = [MemoryDep(name='arg198_1', index=c0, size=(128,)), StarDep(name='arg198_1')]
buf395_buf396.snodes = ['buf395', 'buf396']


buf397_buf398: FusedSchedulerNode(NoneType)
buf397_buf398.writes = 
    [   MemoryDep(name='buf397', index=0, size=()),
        MemoryDep(name='buf398', index=0, size=())]
buf397_buf398.unmet_dependencies = []
buf397_buf398.met_dependencies = [MemoryDep(name='arg199_1', index=0, size=()), StarDep(name='arg199_1')]
buf397_buf398.snodes = ['buf397', 'buf398']


buf401_buf402: FusedSchedulerNode(NoneType)
buf401_buf402.writes = 
    [   MemoryDep(name='buf401', index=c0, size=(512,)),
        MemoryDep(name='buf402', index=c0, size=(512,))]
buf401_buf402.unmet_dependencies = [MemoryDep(name='buf84', index=c0, size=(512,))]
buf401_buf402.met_dependencies = [MemoryDep(name='arg201_1', index=c0, size=(512,)), StarDep(name='arg201_1')]
buf401_buf402.snodes = ['buf401', 'buf402']


buf403_buf404: FusedSchedulerNode(NoneType)
buf403_buf404.writes = 
    [   MemoryDep(name='buf403', index=0, size=()),
        MemoryDep(name='buf404', index=0, size=())]
buf403_buf404.unmet_dependencies = []
buf403_buf404.met_dependencies = [MemoryDep(name='arg202_1', index=0, size=()), StarDep(name='arg202_1')]
buf403_buf404.snodes = ['buf403', 'buf404']


buf407_buf408: FusedSchedulerNode(NoneType)
buf407_buf408.writes = 
    [   MemoryDep(name='buf407', index=c0, size=(512,)),
        MemoryDep(name='buf408', index=c0, size=(512,))]
buf407_buf408.unmet_dependencies = [MemoryDep(name='buf89', index=c0, size=(512,))]
buf407_buf408.met_dependencies = [MemoryDep(name='arg204_1', index=c0, size=(512,)), StarDep(name='arg204_1')]
buf407_buf408.snodes = ['buf407', 'buf408']


buf409_buf410: FusedSchedulerNode(NoneType)
buf409_buf410.writes = 
    [   MemoryDep(name='buf409', index=0, size=()),
        MemoryDep(name='buf410', index=0, size=())]
buf409_buf410.unmet_dependencies = []
buf409_buf410.met_dependencies = [MemoryDep(name='arg205_1', index=0, size=()), StarDep(name='arg205_1')]
buf409_buf410.snodes = ['buf409', 'buf410']


buf413_buf414: FusedSchedulerNode(NoneType)
buf413_buf414.writes = 
    [   MemoryDep(name='buf413', index=c0, size=(128,)),
        MemoryDep(name='buf414', index=c0, size=(128,))]
buf413_buf414.unmet_dependencies = [MemoryDep(name='buf96', index=c0, size=(128,))]
buf413_buf414.met_dependencies = [MemoryDep(name='arg207_1', index=c0, size=(128,)), StarDep(name='arg207_1')]
buf413_buf414.snodes = ['buf413', 'buf414']


buf415_buf416: FusedSchedulerNode(NoneType)
buf415_buf416.writes = 
    [   MemoryDep(name='buf415', index=0, size=()),
        MemoryDep(name='buf416', index=0, size=())]
buf415_buf416.unmet_dependencies = []
buf415_buf416.met_dependencies = [MemoryDep(name='arg208_1', index=0, size=()), StarDep(name='arg208_1')]
buf415_buf416.snodes = ['buf415', 'buf416']


buf419_buf420: FusedSchedulerNode(NoneType)
buf419_buf420.writes = 
    [   MemoryDep(name='buf419', index=c0, size=(128,)),
        MemoryDep(name='buf420', index=c0, size=(128,))]
buf419_buf420.unmet_dependencies = [MemoryDep(name='buf102', index=c0, size=(128,))]
buf419_buf420.met_dependencies = [MemoryDep(name='arg210_1', index=c0, size=(128,)), StarDep(name='arg210_1')]
buf419_buf420.snodes = ['buf419', 'buf420']


buf421_buf422: FusedSchedulerNode(NoneType)
buf421_buf422.writes = 
    [   MemoryDep(name='buf421', index=0, size=()),
        MemoryDep(name='buf422', index=0, size=())]
buf421_buf422.unmet_dependencies = []
buf421_buf422.met_dependencies = [MemoryDep(name='arg211_1', index=0, size=()), StarDep(name='arg211_1')]
buf421_buf422.snodes = ['buf421', 'buf422']


buf425_buf426: FusedSchedulerNode(NoneType)
buf425_buf426.writes = 
    [   MemoryDep(name='buf425', index=c0, size=(512,)),
        MemoryDep(name='buf426', index=c0, size=(512,))]
buf425_buf426.unmet_dependencies = [MemoryDep(name='buf108', index=c0, size=(512,))]
buf425_buf426.met_dependencies = [MemoryDep(name='arg213_1', index=c0, size=(512,)), StarDep(name='arg213_1')]
buf425_buf426.snodes = ['buf425', 'buf426']


buf427_buf428: FusedSchedulerNode(NoneType)
buf427_buf428.writes = 
    [   MemoryDep(name='buf427', index=0, size=()),
        MemoryDep(name='buf428', index=0, size=())]
buf427_buf428.unmet_dependencies = []
buf427_buf428.met_dependencies = [MemoryDep(name='arg214_1', index=0, size=()), StarDep(name='arg214_1')]
buf427_buf428.snodes = ['buf427', 'buf428']


buf431_buf432: FusedSchedulerNode(NoneType)
buf431_buf432.writes = 
    [   MemoryDep(name='buf431', index=c0, size=(128,)),
        MemoryDep(name='buf432', index=c0, size=(128,))]
buf431_buf432.unmet_dependencies = [MemoryDep(name='buf114', index=c0, size=(128,))]
buf431_buf432.met_dependencies = [MemoryDep(name='arg216_1', index=c0, size=(128,)), StarDep(name='arg216_1')]
buf431_buf432.snodes = ['buf431', 'buf432']


buf433_buf434: FusedSchedulerNode(NoneType)
buf433_buf434.writes = 
    [   MemoryDep(name='buf433', index=0, size=()),
        MemoryDep(name='buf434', index=0, size=())]
buf433_buf434.unmet_dependencies = []
buf433_buf434.met_dependencies = [MemoryDep(name='arg217_1', index=0, size=()), StarDep(name='arg217_1')]
buf433_buf434.snodes = ['buf433', 'buf434']


buf437_buf438: FusedSchedulerNode(NoneType)
buf437_buf438.writes = 
    [   MemoryDep(name='buf437', index=c0, size=(128,)),
        MemoryDep(name='buf438', index=c0, size=(128,))]
buf437_buf438.unmet_dependencies = [MemoryDep(name='buf120', index=c0, size=(128,))]
buf437_buf438.met_dependencies = [MemoryDep(name='arg219_1', index=c0, size=(128,)), StarDep(name='arg219_1')]
buf437_buf438.snodes = ['buf437', 'buf438']


buf439_buf440: FusedSchedulerNode(NoneType)
buf439_buf440.writes = 
    [   MemoryDep(name='buf439', index=0, size=()),
        MemoryDep(name='buf440', index=0, size=())]
buf439_buf440.unmet_dependencies = []
buf439_buf440.met_dependencies = [MemoryDep(name='arg220_1', index=0, size=()), StarDep(name='arg220_1')]
buf439_buf440.snodes = ['buf439', 'buf440']


buf443_buf444: FusedSchedulerNode(NoneType)
buf443_buf444.writes = 
    [   MemoryDep(name='buf443', index=c0, size=(512,)),
        MemoryDep(name='buf444', index=c0, size=(512,))]
buf443_buf444.unmet_dependencies = [MemoryDep(name='buf126', index=c0, size=(512,))]
buf443_buf444.met_dependencies = [MemoryDep(name='arg222_1', index=c0, size=(512,)), StarDep(name='arg222_1')]
buf443_buf444.snodes = ['buf443', 'buf444']


buf445_buf446: FusedSchedulerNode(NoneType)
buf445_buf446.writes = 
    [   MemoryDep(name='buf445', index=0, size=()),
        MemoryDep(name='buf446', index=0, size=())]
buf445_buf446.unmet_dependencies = []
buf445_buf446.met_dependencies = [MemoryDep(name='arg223_1', index=0, size=()), StarDep(name='arg223_1')]
buf445_buf446.snodes = ['buf445', 'buf446']


buf449_buf450: FusedSchedulerNode(NoneType)
buf449_buf450.writes = 
    [   MemoryDep(name='buf449', index=c0, size=(128,)),
        MemoryDep(name='buf450', index=c0, size=(128,))]
buf449_buf450.unmet_dependencies = [MemoryDep(name='buf132', index=c0, size=(128,))]
buf449_buf450.met_dependencies = [MemoryDep(name='arg225_1', index=c0, size=(128,)), StarDep(name='arg225_1')]
buf449_buf450.snodes = ['buf449', 'buf450']


buf451_buf452: FusedSchedulerNode(NoneType)
buf451_buf452.writes = 
    [   MemoryDep(name='buf451', index=0, size=()),
        MemoryDep(name='buf452', index=0, size=())]
buf451_buf452.unmet_dependencies = []
buf451_buf452.met_dependencies = [MemoryDep(name='arg226_1', index=0, size=()), StarDep(name='arg226_1')]
buf451_buf452.snodes = ['buf451', 'buf452']


buf455_buf456: FusedSchedulerNode(NoneType)
buf455_buf456.writes = 
    [   MemoryDep(name='buf455', index=c0, size=(128,)),
        MemoryDep(name='buf456', index=c0, size=(128,))]
buf455_buf456.unmet_dependencies = [MemoryDep(name='buf138', index=c0, size=(128,))]
buf455_buf456.met_dependencies = [MemoryDep(name='arg228_1', index=c0, size=(128,)), StarDep(name='arg228_1')]
buf455_buf456.snodes = ['buf455', 'buf456']


buf457_buf458: FusedSchedulerNode(NoneType)
buf457_buf458.writes = 
    [   MemoryDep(name='buf457', index=0, size=()),
        MemoryDep(name='buf458', index=0, size=())]
buf457_buf458.unmet_dependencies = []
buf457_buf458.met_dependencies = [MemoryDep(name='arg229_1', index=0, size=()), StarDep(name='arg229_1')]
buf457_buf458.snodes = ['buf457', 'buf458']


buf461_buf462: FusedSchedulerNode(NoneType)
buf461_buf462.writes = 
    [   MemoryDep(name='buf461', index=c0, size=(512,)),
        MemoryDep(name='buf462', index=c0, size=(512,))]
buf461_buf462.unmet_dependencies = [MemoryDep(name='buf144', index=c0, size=(512,))]
buf461_buf462.met_dependencies = [MemoryDep(name='arg231_1', index=c0, size=(512,)), StarDep(name='arg231_1')]
buf461_buf462.snodes = ['buf461', 'buf462']


buf463_buf464: FusedSchedulerNode(NoneType)
buf463_buf464.writes = 
    [   MemoryDep(name='buf463', index=0, size=()),
        MemoryDep(name='buf464', index=0, size=())]
buf463_buf464.unmet_dependencies = []
buf463_buf464.met_dependencies = [MemoryDep(name='arg232_1', index=0, size=()), StarDep(name='arg232_1')]
buf463_buf464.snodes = ['buf463', 'buf464']


buf467_buf468: FusedSchedulerNode(NoneType)
buf467_buf468.writes = 
    [   MemoryDep(name='buf467', index=c0, size=(256,)),
        MemoryDep(name='buf468', index=c0, size=(256,))]
buf467_buf468.unmet_dependencies = [MemoryDep(name='buf150', index=c0, size=(256,))]
buf467_buf468.met_dependencies = [MemoryDep(name='arg234_1', index=c0, size=(256,)), StarDep(name='arg234_1')]
buf467_buf468.snodes = ['buf467', 'buf468']


buf469_buf470: FusedSchedulerNode(NoneType)
buf469_buf470.writes = 
    [   MemoryDep(name='buf469', index=0, size=()),
        MemoryDep(name='buf470', index=0, size=())]
buf469_buf470.unmet_dependencies = []
buf469_buf470.met_dependencies = [MemoryDep(name='arg235_1', index=0, size=()), StarDep(name='arg235_1')]
buf469_buf470.snodes = ['buf469', 'buf470']


buf473_buf474: FusedSchedulerNode(NoneType)
buf473_buf474.writes = 
    [   MemoryDep(name='buf473', index=c0, size=(256,)),
        MemoryDep(name='buf474', index=c0, size=(256,))]
buf473_buf474.unmet_dependencies = [MemoryDep(name='buf156', index=c0, size=(256,))]
buf473_buf474.met_dependencies = [MemoryDep(name='arg237_1', index=c0, size=(256,)), StarDep(name='arg237_1')]
buf473_buf474.snodes = ['buf473', 'buf474']


buf475_buf476: FusedSchedulerNode(NoneType)
buf475_buf476.writes = 
    [   MemoryDep(name='buf475', index=0, size=()),
        MemoryDep(name='buf476', index=0, size=())]
buf475_buf476.unmet_dependencies = []
buf475_buf476.met_dependencies = [MemoryDep(name='arg238_1', index=0, size=()), StarDep(name='arg238_1')]
buf475_buf476.snodes = ['buf475', 'buf476']


buf479_buf480: FusedSchedulerNode(NoneType)
buf479_buf480.writes = 
    [   MemoryDep(name='buf479', index=c0, size=(1024,)),
        MemoryDep(name='buf480', index=c0, size=(1024,))]
buf479_buf480.unmet_dependencies = [MemoryDep(name='buf162', index=c0, size=(1024,))]
buf479_buf480.met_dependencies = [MemoryDep(name='arg240_1', index=c0, size=(1024,)), StarDep(name='arg240_1')]
buf479_buf480.snodes = ['buf479', 'buf480']


buf481_buf482: FusedSchedulerNode(NoneType)
buf481_buf482.writes = 
    [   MemoryDep(name='buf481', index=0, size=()),
        MemoryDep(name='buf482', index=0, size=())]
buf481_buf482.unmet_dependencies = []
buf481_buf482.met_dependencies = [MemoryDep(name='arg241_1', index=0, size=()), StarDep(name='arg241_1')]
buf481_buf482.snodes = ['buf481', 'buf482']


buf485_buf486: FusedSchedulerNode(NoneType)
buf485_buf486.writes = 
    [   MemoryDep(name='buf485', index=c0, size=(1024,)),
        MemoryDep(name='buf486', index=c0, size=(1024,))]
buf485_buf486.unmet_dependencies = [MemoryDep(name='buf167', index=c0, size=(1024,))]
buf485_buf486.met_dependencies = [MemoryDep(name='arg243_1', index=c0, size=(1024,)), StarDep(name='arg243_1')]
buf485_buf486.snodes = ['buf485', 'buf486']


buf487_buf488: FusedSchedulerNode(NoneType)
buf487_buf488.writes = 
    [   MemoryDep(name='buf487', index=0, size=()),
        MemoryDep(name='buf488', index=0, size=())]
buf487_buf488.unmet_dependencies = []
buf487_buf488.met_dependencies = [MemoryDep(name='arg244_1', index=0, size=()), StarDep(name='arg244_1')]
buf487_buf488.snodes = ['buf487', 'buf488']


buf491_buf492: FusedSchedulerNode(NoneType)
buf491_buf492.writes = 
    [   MemoryDep(name='buf491', index=c0, size=(256,)),
        MemoryDep(name='buf492', index=c0, size=(256,))]
buf491_buf492.unmet_dependencies = [MemoryDep(name='buf174', index=c0, size=(256,))]
buf491_buf492.met_dependencies = [MemoryDep(name='arg246_1', index=c0, size=(256,)), StarDep(name='arg246_1')]
buf491_buf492.snodes = ['buf491', 'buf492']


buf493_buf494: FusedSchedulerNode(NoneType)
buf493_buf494.writes = 
    [   MemoryDep(name='buf493', index=0, size=()),
        MemoryDep(name='buf494', index=0, size=())]
buf493_buf494.unmet_dependencies = []
buf493_buf494.met_dependencies = [MemoryDep(name='arg247_1', index=0, size=()), StarDep(name='arg247_1')]
buf493_buf494.snodes = ['buf493', 'buf494']


buf497_buf498: FusedSchedulerNode(NoneType)
buf497_buf498.writes = 
    [   MemoryDep(name='buf497', index=c0, size=(256,)),
        MemoryDep(name='buf498', index=c0, size=(256,))]
buf497_buf498.unmet_dependencies = [MemoryDep(name='buf180', index=c0, size=(256,))]
buf497_buf498.met_dependencies = [MemoryDep(name='arg249_1', index=c0, size=(256,)), StarDep(name='arg249_1')]
buf497_buf498.snodes = ['buf497', 'buf498']


buf499_buf500: FusedSchedulerNode(NoneType)
buf499_buf500.writes = 
    [   MemoryDep(name='buf499', index=0, size=()),
        MemoryDep(name='buf500', index=0, size=())]
buf499_buf500.unmet_dependencies = []
buf499_buf500.met_dependencies = [MemoryDep(name='arg250_1', index=0, size=()), StarDep(name='arg250_1')]
buf499_buf500.snodes = ['buf499', 'buf500']


buf503_buf504: FusedSchedulerNode(NoneType)
buf503_buf504.writes = 
    [   MemoryDep(name='buf503', index=c0, size=(1024,)),
        MemoryDep(name='buf504', index=c0, size=(1024,))]
buf503_buf504.unmet_dependencies = [MemoryDep(name='buf186', index=c0, size=(1024,))]
buf503_buf504.met_dependencies = [MemoryDep(name='arg252_1', index=c0, size=(1024,)), StarDep(name='arg252_1')]
buf503_buf504.snodes = ['buf503', 'buf504']


buf505_buf506: FusedSchedulerNode(NoneType)
buf505_buf506.writes = 
    [   MemoryDep(name='buf505', index=0, size=()),
        MemoryDep(name='buf506', index=0, size=())]
buf505_buf506.unmet_dependencies = []
buf505_buf506.met_dependencies = [MemoryDep(name='arg253_1', index=0, size=()), StarDep(name='arg253_1')]
buf505_buf506.snodes = ['buf505', 'buf506']


buf509_buf510: FusedSchedulerNode(NoneType)
buf509_buf510.writes = 
    [   MemoryDep(name='buf509', index=c0, size=(256,)),
        MemoryDep(name='buf510', index=c0, size=(256,))]
buf509_buf510.unmet_dependencies = [MemoryDep(name='buf192', index=c0, size=(256,))]
buf509_buf510.met_dependencies = [MemoryDep(name='arg255_1', index=c0, size=(256,)), StarDep(name='arg255_1')]
buf509_buf510.snodes = ['buf509', 'buf510']


buf511_buf512: FusedSchedulerNode(NoneType)
buf511_buf512.writes = 
    [   MemoryDep(name='buf511', index=0, size=()),
        MemoryDep(name='buf512', index=0, size=())]
buf511_buf512.unmet_dependencies = []
buf511_buf512.met_dependencies = [MemoryDep(name='arg256_1', index=0, size=()), StarDep(name='arg256_1')]
buf511_buf512.snodes = ['buf511', 'buf512']


buf515_buf516: FusedSchedulerNode(NoneType)
buf515_buf516.writes = 
    [   MemoryDep(name='buf515', index=c0, size=(256,)),
        MemoryDep(name='buf516', index=c0, size=(256,))]
buf515_buf516.unmet_dependencies = [MemoryDep(name='buf198', index=c0, size=(256,))]
buf515_buf516.met_dependencies = [MemoryDep(name='arg258_1', index=c0, size=(256,)), StarDep(name='arg258_1')]
buf515_buf516.snodes = ['buf515', 'buf516']


buf517_buf518: FusedSchedulerNode(NoneType)
buf517_buf518.writes = 
    [   MemoryDep(name='buf517', index=0, size=()),
        MemoryDep(name='buf518', index=0, size=())]
buf517_buf518.unmet_dependencies = []
buf517_buf518.met_dependencies = [MemoryDep(name='arg259_1', index=0, size=()), StarDep(name='arg259_1')]
buf517_buf518.snodes = ['buf517', 'buf518']


buf521_buf522: FusedSchedulerNode(NoneType)
buf521_buf522.writes = 
    [   MemoryDep(name='buf521', index=c0, size=(1024,)),
        MemoryDep(name='buf522', index=c0, size=(1024,))]
buf521_buf522.unmet_dependencies = [MemoryDep(name='buf204', index=c0, size=(1024,))]
buf521_buf522.met_dependencies = [MemoryDep(name='arg261_1', index=c0, size=(1024,)), StarDep(name='arg261_1')]
buf521_buf522.snodes = ['buf521', 'buf522']


buf523_buf524: FusedSchedulerNode(NoneType)
buf523_buf524.writes = 
    [   MemoryDep(name='buf523', index=0, size=()),
        MemoryDep(name='buf524', index=0, size=())]
buf523_buf524.unmet_dependencies = []
buf523_buf524.met_dependencies = [MemoryDep(name='arg262_1', index=0, size=()), StarDep(name='arg262_1')]
buf523_buf524.snodes = ['buf523', 'buf524']


buf527_buf528: FusedSchedulerNode(NoneType)
buf527_buf528.writes = 
    [   MemoryDep(name='buf527', index=c0, size=(256,)),
        MemoryDep(name='buf528', index=c0, size=(256,))]
buf527_buf528.unmet_dependencies = [MemoryDep(name='buf210', index=c0, size=(256,))]
buf527_buf528.met_dependencies = [MemoryDep(name='arg264_1', index=c0, size=(256,)), StarDep(name='arg264_1')]
buf527_buf528.snodes = ['buf527', 'buf528']


buf529_buf530: FusedSchedulerNode(NoneType)
buf529_buf530.writes = 
    [   MemoryDep(name='buf529', index=0, size=()),
        MemoryDep(name='buf530', index=0, size=())]
buf529_buf530.unmet_dependencies = []
buf529_buf530.met_dependencies = [MemoryDep(name='arg265_1', index=0, size=()), StarDep(name='arg265_1')]
buf529_buf530.snodes = ['buf529', 'buf530']


buf533_buf534: FusedSchedulerNode(NoneType)
buf533_buf534.writes = 
    [   MemoryDep(name='buf533', index=c0, size=(256,)),
        MemoryDep(name='buf534', index=c0, size=(256,))]
buf533_buf534.unmet_dependencies = [MemoryDep(name='buf216', index=c0, size=(256,))]
buf533_buf534.met_dependencies = [MemoryDep(name='arg267_1', index=c0, size=(256,)), StarDep(name='arg267_1')]
buf533_buf534.snodes = ['buf533', 'buf534']


buf535_buf536: FusedSchedulerNode(NoneType)
buf535_buf536.writes = 
    [   MemoryDep(name='buf535', index=0, size=()),
        MemoryDep(name='buf536', index=0, size=())]
buf535_buf536.unmet_dependencies = []
buf535_buf536.met_dependencies = [MemoryDep(name='arg268_1', index=0, size=()), StarDep(name='arg268_1')]
buf535_buf536.snodes = ['buf535', 'buf536']


buf539_buf540: FusedSchedulerNode(NoneType)
buf539_buf540.writes = 
    [   MemoryDep(name='buf539', index=c0, size=(1024,)),
        MemoryDep(name='buf540', index=c0, size=(1024,))]
buf539_buf540.unmet_dependencies = [MemoryDep(name='buf222', index=c0, size=(1024,))]
buf539_buf540.met_dependencies = [MemoryDep(name='arg270_1', index=c0, size=(1024,)), StarDep(name='arg270_1')]
buf539_buf540.snodes = ['buf539', 'buf540']


buf541_buf542: FusedSchedulerNode(NoneType)
buf541_buf542.writes = 
    [   MemoryDep(name='buf541', index=0, size=()),
        MemoryDep(name='buf542', index=0, size=())]
buf541_buf542.unmet_dependencies = []
buf541_buf542.met_dependencies = [MemoryDep(name='arg271_1', index=0, size=()), StarDep(name='arg271_1')]
buf541_buf542.snodes = ['buf541', 'buf542']


buf545_buf546: FusedSchedulerNode(NoneType)
buf545_buf546.writes = 
    [   MemoryDep(name='buf545', index=c0, size=(256,)),
        MemoryDep(name='buf546', index=c0, size=(256,))]
buf545_buf546.unmet_dependencies = [MemoryDep(name='buf228', index=c0, size=(256,))]
buf545_buf546.met_dependencies = [MemoryDep(name='arg273_1', index=c0, size=(256,)), StarDep(name='arg273_1')]
buf545_buf546.snodes = ['buf545', 'buf546']


buf547_buf548: FusedSchedulerNode(NoneType)
buf547_buf548.writes = 
    [   MemoryDep(name='buf547', index=0, size=()),
        MemoryDep(name='buf548', index=0, size=())]
buf547_buf548.unmet_dependencies = []
buf547_buf548.met_dependencies = [MemoryDep(name='arg274_1', index=0, size=()), StarDep(name='arg274_1')]
buf547_buf548.snodes = ['buf547', 'buf548']


buf551_buf552: FusedSchedulerNode(NoneType)
buf551_buf552.writes = 
    [   MemoryDep(name='buf551', index=c0, size=(256,)),
        MemoryDep(name='buf552', index=c0, size=(256,))]
buf551_buf552.unmet_dependencies = [MemoryDep(name='buf234', index=c0, size=(256,))]
buf551_buf552.met_dependencies = [MemoryDep(name='arg276_1', index=c0, size=(256,)), StarDep(name='arg276_1')]
buf551_buf552.snodes = ['buf551', 'buf552']


buf553_buf554: FusedSchedulerNode(NoneType)
buf553_buf554.writes = 
    [   MemoryDep(name='buf553', index=0, size=()),
        MemoryDep(name='buf554', index=0, size=())]
buf553_buf554.unmet_dependencies = []
buf553_buf554.met_dependencies = [MemoryDep(name='arg277_1', index=0, size=()), StarDep(name='arg277_1')]
buf553_buf554.snodes = ['buf553', 'buf554']


buf557_buf558: FusedSchedulerNode(NoneType)
buf557_buf558.writes = 
    [   MemoryDep(name='buf557', index=c0, size=(1024,)),
        MemoryDep(name='buf558', index=c0, size=(1024,))]
buf557_buf558.unmet_dependencies = [MemoryDep(name='buf240', index=c0, size=(1024,))]
buf557_buf558.met_dependencies = [MemoryDep(name='arg279_1', index=c0, size=(1024,)), StarDep(name='arg279_1')]
buf557_buf558.snodes = ['buf557', 'buf558']


buf559_buf560: FusedSchedulerNode(NoneType)
buf559_buf560.writes = 
    [   MemoryDep(name='buf559', index=0, size=()),
        MemoryDep(name='buf560', index=0, size=())]
buf559_buf560.unmet_dependencies = []
buf559_buf560.met_dependencies = [MemoryDep(name='arg280_1', index=0, size=()), StarDep(name='arg280_1')]
buf559_buf560.snodes = ['buf559', 'buf560']


buf563_buf564: FusedSchedulerNode(NoneType)
buf563_buf564.writes = 
    [   MemoryDep(name='buf563', index=c0, size=(256,)),
        MemoryDep(name='buf564', index=c0, size=(256,))]
buf563_buf564.unmet_dependencies = [MemoryDep(name='buf246', index=c0, size=(256,))]
buf563_buf564.met_dependencies = [MemoryDep(name='arg282_1', index=c0, size=(256,)), StarDep(name='arg282_1')]
buf563_buf564.snodes = ['buf563', 'buf564']


buf565_buf566: FusedSchedulerNode(NoneType)
buf565_buf566.writes = 
    [   MemoryDep(name='buf565', index=0, size=()),
        MemoryDep(name='buf566', index=0, size=())]
buf565_buf566.unmet_dependencies = []
buf565_buf566.met_dependencies = [MemoryDep(name='arg283_1', index=0, size=()), StarDep(name='arg283_1')]
buf565_buf566.snodes = ['buf565', 'buf566']


buf569_buf570: FusedSchedulerNode(NoneType)
buf569_buf570.writes = 
    [   MemoryDep(name='buf569', index=c0, size=(256,)),
        MemoryDep(name='buf570', index=c0, size=(256,))]
buf569_buf570.unmet_dependencies = [MemoryDep(name='buf252', index=c0, size=(256,))]
buf569_buf570.met_dependencies = [MemoryDep(name='arg285_1', index=c0, size=(256,)), StarDep(name='arg285_1')]
buf569_buf570.snodes = ['buf569', 'buf570']


buf571_buf572: FusedSchedulerNode(NoneType)
buf571_buf572.writes = 
    [   MemoryDep(name='buf571', index=0, size=()),
        MemoryDep(name='buf572', index=0, size=())]
buf571_buf572.unmet_dependencies = []
buf571_buf572.met_dependencies = [MemoryDep(name='arg286_1', index=0, size=()), StarDep(name='arg286_1')]
buf571_buf572.snodes = ['buf571', 'buf572']


buf575_buf576: FusedSchedulerNode(NoneType)
buf575_buf576.writes = 
    [   MemoryDep(name='buf575', index=c0, size=(1024,)),
        MemoryDep(name='buf576', index=c0, size=(1024,))]
buf575_buf576.unmet_dependencies = [MemoryDep(name='buf258', index=c0, size=(1024,))]
buf575_buf576.met_dependencies = [MemoryDep(name='arg288_1', index=c0, size=(1024,)), StarDep(name='arg288_1')]
buf575_buf576.snodes = ['buf575', 'buf576']


buf577_buf578: FusedSchedulerNode(NoneType)
buf577_buf578.writes = 
    [   MemoryDep(name='buf577', index=0, size=()),
        MemoryDep(name='buf578', index=0, size=())]
buf577_buf578.unmet_dependencies = []
buf577_buf578.met_dependencies = [MemoryDep(name='arg289_1', index=0, size=()), StarDep(name='arg289_1')]
buf577_buf578.snodes = ['buf577', 'buf578']


buf581_buf582: FusedSchedulerNode(NoneType)
buf581_buf582.writes = 
    [   MemoryDep(name='buf581', index=c0, size=(512,)),
        MemoryDep(name='buf582', index=c0, size=(512,))]
buf581_buf582.unmet_dependencies = [MemoryDep(name='buf264', index=c0, size=(512,))]
buf581_buf582.met_dependencies = [MemoryDep(name='arg291_1', index=c0, size=(512,)), StarDep(name='arg291_1')]
buf581_buf582.snodes = ['buf581', 'buf582']


buf583_buf584: FusedSchedulerNode(NoneType)
buf583_buf584.writes = 
    [   MemoryDep(name='buf583', index=0, size=()),
        MemoryDep(name='buf584', index=0, size=())]
buf583_buf584.unmet_dependencies = []
buf583_buf584.met_dependencies = [MemoryDep(name='arg292_1', index=0, size=()), StarDep(name='arg292_1')]
buf583_buf584.snodes = ['buf583', 'buf584']


buf587_buf588: FusedSchedulerNode(NoneType)
buf587_buf588.writes = 
    [   MemoryDep(name='buf587', index=c0, size=(512,)),
        MemoryDep(name='buf588', index=c0, size=(512,))]
buf587_buf588.unmet_dependencies = [MemoryDep(name='buf270', index=c0, size=(512,))]
buf587_buf588.met_dependencies = [MemoryDep(name='arg294_1', index=c0, size=(512,)), StarDep(name='arg294_1')]
buf587_buf588.snodes = ['buf587', 'buf588']


buf589_buf590: FusedSchedulerNode(NoneType)
buf589_buf590.writes = 
    [   MemoryDep(name='buf589', index=0, size=()),
        MemoryDep(name='buf590', index=0, size=())]
buf589_buf590.unmet_dependencies = []
buf589_buf590.met_dependencies = [MemoryDep(name='arg295_1', index=0, size=()), StarDep(name='arg295_1')]
buf589_buf590.snodes = ['buf589', 'buf590']


buf593_buf594: FusedSchedulerNode(NoneType)
buf593_buf594.writes = 
    [   MemoryDep(name='buf593', index=c0, size=(2048,)),
        MemoryDep(name='buf594', index=c0, size=(2048,))]
buf593_buf594.unmet_dependencies = [MemoryDep(name='buf276', index=c0, size=(2048,))]
buf593_buf594.met_dependencies = [MemoryDep(name='arg297_1', index=c0, size=(2048,)), StarDep(name='arg297_1')]
buf593_buf594.snodes = ['buf593', 'buf594']


buf595_buf596: FusedSchedulerNode(NoneType)
buf595_buf596.writes = 
    [   MemoryDep(name='buf595', index=0, size=()),
        MemoryDep(name='buf596', index=0, size=())]
buf595_buf596.unmet_dependencies = []
buf595_buf596.met_dependencies = [MemoryDep(name='arg298_1', index=0, size=()), StarDep(name='arg298_1')]
buf595_buf596.snodes = ['buf595', 'buf596']


buf599_buf600: FusedSchedulerNode(NoneType)
buf599_buf600.writes = 
    [   MemoryDep(name='buf599', index=c0, size=(2048,)),
        MemoryDep(name='buf600', index=c0, size=(2048,))]
buf599_buf600.unmet_dependencies = [MemoryDep(name='buf281', index=c0, size=(2048,))]
buf599_buf600.met_dependencies = [MemoryDep(name='arg300_1', index=c0, size=(2048,)), StarDep(name='arg300_1')]
buf599_buf600.snodes = ['buf599', 'buf600']


buf601_buf602: FusedSchedulerNode(NoneType)
buf601_buf602.writes = 
    [   MemoryDep(name='buf601', index=0, size=()),
        MemoryDep(name='buf602', index=0, size=())]
buf601_buf602.unmet_dependencies = []
buf601_buf602.met_dependencies = [MemoryDep(name='arg301_1', index=0, size=()), StarDep(name='arg301_1')]
buf601_buf602.snodes = ['buf601', 'buf602']


buf605_buf606: FusedSchedulerNode(NoneType)
buf605_buf606.writes = 
    [   MemoryDep(name='buf605', index=c0, size=(512,)),
        MemoryDep(name='buf606', index=c0, size=(512,))]
buf605_buf606.unmet_dependencies = [MemoryDep(name='buf288', index=c0, size=(512,))]
buf605_buf606.met_dependencies = [MemoryDep(name='arg303_1', index=c0, size=(512,)), StarDep(name='arg303_1')]
buf605_buf606.snodes = ['buf605', 'buf606']


buf607_buf608: FusedSchedulerNode(NoneType)
buf607_buf608.writes = 
    [   MemoryDep(name='buf607', index=0, size=()),
        MemoryDep(name='buf608', index=0, size=())]
buf607_buf608.unmet_dependencies = []
buf607_buf608.met_dependencies = [MemoryDep(name='arg304_1', index=0, size=()), StarDep(name='arg304_1')]
buf607_buf608.snodes = ['buf607', 'buf608']


buf611_buf612: FusedSchedulerNode(NoneType)
buf611_buf612.writes = 
    [   MemoryDep(name='buf611', index=c0, size=(512,)),
        MemoryDep(name='buf612', index=c0, size=(512,))]
buf611_buf612.unmet_dependencies = [MemoryDep(name='buf294', index=c0, size=(512,))]
buf611_buf612.met_dependencies = [MemoryDep(name='arg306_1', index=c0, size=(512,)), StarDep(name='arg306_1')]
buf611_buf612.snodes = ['buf611', 'buf612']


buf613_buf614: FusedSchedulerNode(NoneType)
buf613_buf614.writes = 
    [   MemoryDep(name='buf613', index=0, size=()),
        MemoryDep(name='buf614', index=0, size=())]
buf613_buf614.unmet_dependencies = []
buf613_buf614.met_dependencies = [MemoryDep(name='arg307_1', index=0, size=()), StarDep(name='arg307_1')]
buf613_buf614.snodes = ['buf613', 'buf614']


buf617_buf618: FusedSchedulerNode(NoneType)
buf617_buf618.writes = 
    [   MemoryDep(name='buf617', index=c0, size=(2048,)),
        MemoryDep(name='buf618', index=c0, size=(2048,))]
buf617_buf618.unmet_dependencies = [MemoryDep(name='buf300', index=c0, size=(2048,))]
buf617_buf618.met_dependencies = [MemoryDep(name='arg309_1', index=c0, size=(2048,)), StarDep(name='arg309_1')]
buf617_buf618.snodes = ['buf617', 'buf618']


buf619_buf620: FusedSchedulerNode(NoneType)
buf619_buf620.writes = 
    [   MemoryDep(name='buf619', index=0, size=()),
        MemoryDep(name='buf620', index=0, size=())]
buf619_buf620.unmet_dependencies = []
buf619_buf620.met_dependencies = [MemoryDep(name='arg310_1', index=0, size=()), StarDep(name='arg310_1')]
buf619_buf620.snodes = ['buf619', 'buf620']


buf623_buf624: FusedSchedulerNode(NoneType)
buf623_buf624.writes = 
    [   MemoryDep(name='buf623', index=c0, size=(512,)),
        MemoryDep(name='buf624', index=c0, size=(512,))]
buf623_buf624.unmet_dependencies = [MemoryDep(name='buf306', index=c0, size=(512,))]
buf623_buf624.met_dependencies = [MemoryDep(name='arg312_1', index=c0, size=(512,)), StarDep(name='arg312_1')]
buf623_buf624.snodes = ['buf623', 'buf624']


buf625_buf626: FusedSchedulerNode(NoneType)
buf625_buf626.writes = 
    [   MemoryDep(name='buf625', index=0, size=()),
        MemoryDep(name='buf626', index=0, size=())]
buf625_buf626.unmet_dependencies = []
buf625_buf626.met_dependencies = [MemoryDep(name='arg313_1', index=0, size=()), StarDep(name='arg313_1')]
buf625_buf626.snodes = ['buf625', 'buf626']


buf629_buf630: FusedSchedulerNode(NoneType)
buf629_buf630.writes = 
    [   MemoryDep(name='buf629', index=c0, size=(512,)),
        MemoryDep(name='buf630', index=c0, size=(512,))]
buf629_buf630.unmet_dependencies = [MemoryDep(name='buf312', index=c0, size=(512,))]
buf629_buf630.met_dependencies = [MemoryDep(name='arg315_1', index=c0, size=(512,)), StarDep(name='arg315_1')]
buf629_buf630.snodes = ['buf629', 'buf630']


buf631_buf632: FusedSchedulerNode(NoneType)
buf631_buf632.writes = 
    [   MemoryDep(name='buf631', index=0, size=()),
        MemoryDep(name='buf632', index=0, size=())]
buf631_buf632.unmet_dependencies = []
buf631_buf632.met_dependencies = [MemoryDep(name='arg316_1', index=0, size=()), StarDep(name='arg316_1')]
buf631_buf632.snodes = ['buf631', 'buf632']


buf635_buf636: FusedSchedulerNode(NoneType)
buf635_buf636.writes = 
    [   MemoryDep(name='buf635', index=c0, size=(2048,)),
        MemoryDep(name='buf636', index=c0, size=(2048,))]
buf635_buf636.unmet_dependencies = [MemoryDep(name='buf318', index=c0, size=(2048,))]
buf635_buf636.met_dependencies = [MemoryDep(name='arg318_1', index=c0, size=(2048,)), StarDep(name='arg318_1')]
buf635_buf636.snodes = ['buf635', 'buf636']


buf637_buf638: FusedSchedulerNode(NoneType)
buf637_buf638.writes = 
    [   MemoryDep(name='buf637', index=0, size=()),
        MemoryDep(name='buf638', index=0, size=())]
buf637_buf638.unmet_dependencies = []
buf637_buf638.met_dependencies = [MemoryDep(name='arg319_1', index=0, size=()), StarDep(name='arg319_1')]
buf637_buf638.snodes = ['buf637', 'buf638']


