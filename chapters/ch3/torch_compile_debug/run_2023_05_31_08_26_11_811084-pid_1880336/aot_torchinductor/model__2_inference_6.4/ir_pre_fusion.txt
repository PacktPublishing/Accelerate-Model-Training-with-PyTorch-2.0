buf0: ExternKernelSchedulerNode(Convolution)
buf0.writes = [StarDep(name='buf0')]
buf0.unmet_dependencies = []
buf0.met_dependencies = [StarDep(name='arg0_1'), StarDep(name='arg320_1')]
buf0.node.kernel = aten.convolution


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = 
    [   MemoryDep(name='buf2', index=c0, size=(64, 4096)),
        MemoryDep(name='buf2', index=c0, size=(64,))]
buf2.unmet_dependencies = [MemoryDep(name='buf0', index=256*c0 + 16384*c1 + c2, size=(64, 16, 256))]
buf2.met_dependencies = []
buf2.group.device = cpu
buf2.group.iteration = ((64,), (16, 256))
buf2.sizes = ([64], [16, 256])
class buf2_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 256}
    index0 = 256*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf2', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf3: SchedulerNode(ComputedBuffer)
buf3.writes = [MemoryDep(name='buf3', index=c0, size=(64,))]
buf3.unmet_dependencies = [MemoryDep(name='buf2', index=c0, size=(64,))]
buf3.met_dependencies = []
buf3.group.device = cpu
buf3.group.iteration = ((64,), ())
buf3.sizes = ([64], [])
class buf3_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf3', get_index_1, div, None)
        return store


buf4: SchedulerNode(ComputedBuffer)
buf4.writes = 
    [   MemoryDep(name='buf4', index=c0, size=(64, 4096)),
        MemoryDep(name='buf4', index=c0, size=(64,))]
buf4.unmet_dependencies = 
    [   MemoryDep(name='buf0', index=256*c0 + 16384*c1 + c2, size=(64, 16, 256)),
        MemoryDep(name='buf3', index=c0, size=(64, 4096))]
buf4.met_dependencies = []
buf4.group.device = cpu
buf4.group.iteration = ((64,), (16, 256))
buf4.sizes = ([64], [16, 256])
class buf4_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 256}
    index0 = 256*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf3', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf4', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf5: SchedulerNode(ComputedBuffer)
buf5.writes = [MemoryDep(name='buf5', index=c0, size=(262144,))]
buf5.unmet_dependencies = 
    [   MemoryDep(name='buf0', index=c0, size=(262144,)),
        MemoryDep(name='buf3', index=c1, size=(16, 64, 256)),
        MemoryDep(name='buf4', index=c1, size=(16, 64, 256))]
buf5.met_dependencies = 
    [   MemoryDep(name='arg1_1', index=c1, size=(16, 64, 256)),
        MemoryDep(name='arg2_1', index=c1, size=(16, 64, 256))]
buf5.group.device = cpu
buf5.group.iteration = ((16, 64, 256), ())
buf5.sizes = ([16, 64, 256], [])
class buf5_loop_body:
    var_ranges = {z0: 16, z1: 64, z2: 256}
    index0 = 16384*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf3', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf4', get_index_2)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg2_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf5', get_index_5, relu, None)
        return store


buf6: SchedulerNode(ComputedBuffer)
buf6.writes = [MemoryDep(name='buf6', index=c0, size=(65536,))]
buf6.unmet_dependencies = 
    [   MemoryDep(name='buf5', index=32*c0 + 2*c1 + 1, size=(8192, 8)),
        MemoryDep(name='buf5', index=32*c0 + 2*c1 + 15, size=(8192, 8)),
        MemoryDep(name='buf5', index=32*c0 + 2*c1 + 16, size=(8192, 8)),
        MemoryDep(name='buf5', index=32*c0 + 2*c1 + 17, size=(8192, 8)),
        MemoryDep(name='buf5', index=32*c0 + 2*c1 - 1, size=(8192, 8)),
        MemoryDep(name='buf5', index=32*c0 + 2*c1 - 15, size=(8192, 8)),
        MemoryDep(name='buf5', index=32*c0 + 2*c1 - 16, size=(8192, 8)),
        MemoryDep(name='buf5', index=32*c0 + 2*c1 - 17, size=(8192, 8)),
        MemoryDep(name='buf5', index=32*c0 + 2*c1, size=(8192, 8))]
buf6.met_dependencies = []
buf6.group.device = cpu
buf6.group.iteration = ((1024, 8, 8), ())
buf6.sizes = ([1024, 8, 8], [])
class buf6_loop_body:
    var_ranges = {z0: 1024, z1: 8, z2: 8}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 256*z0 + 32*z1 + 2*z2 - 17
    index3 = 2*z2
    index4 = 256*z0 + 32*z1 + 2*z2 - 16
    index5 = 2*z2 + 1
    index6 = 256*z0 + 32*z1 + 2*z2 - 15
    index7 = 2*z1
    index8 = 256*z0 + 32*z1 + 2*z2 - 1
    index9 = 256*z0 + 32*z1 + 2*z2
    index10 = 256*z0 + 32*z1 + 2*z2 + 1
    index11 = 2*z1 + 1
    index12 = 256*z0 + 32*z1 + 2*z2 + 15
    index13 = 256*z0 + 32*z1 + 2*z2 + 16
    index14 = 256*z0 + 32*z1 + 2*z2 + 17
    index15 = 64*z0 + 8*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(16, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(16, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(16, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(16, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(16, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(16, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(16, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(16, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(16, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(16, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(16, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(16, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(16, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(16, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(16, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(16, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(16, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index15')
        store = ops.store('buf6', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf5', get_index)
        return load


buf8: ExternKernelSchedulerNode(Convolution)
buf8.writes = [StarDep(name='buf8')]
buf8.unmet_dependencies = [StarDep(name='buf6')]
buf8.met_dependencies = [StarDep(name='arg3_1')]
buf8.node.kernel = aten.convolution


buf10: SchedulerNode(ComputedBuffer)
buf10.writes = 
    [   MemoryDep(name='buf10', index=c0, size=(64, 1024)),
        MemoryDep(name='buf10', index=c0, size=(64,))]
buf10.unmet_dependencies = [MemoryDep(name='buf8', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64))]
buf10.met_dependencies = []
buf10.group.device = cpu
buf10.group.iteration = ((64,), (16, 64))
buf10.sizes = ([64], [16, 64])
class buf10_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf10', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf11: SchedulerNode(ComputedBuffer)
buf11.writes = [MemoryDep(name='buf11', index=c0, size=(64,))]
buf11.unmet_dependencies = [MemoryDep(name='buf10', index=c0, size=(64,))]
buf11.met_dependencies = []
buf11.group.device = cpu
buf11.group.iteration = ((64,), ())
buf11.sizes = ([64], [])
class buf11_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf11', get_index_1, div, None)
        return store


buf12: SchedulerNode(ComputedBuffer)
buf12.writes = 
    [   MemoryDep(name='buf12', index=c0, size=(64, 1024)),
        MemoryDep(name='buf12', index=c0, size=(64,))]
buf12.unmet_dependencies = 
    [   MemoryDep(name='buf11', index=c0, size=(64, 1024)),
        MemoryDep(name='buf8', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64))]
buf12.met_dependencies = []
buf12.group.device = cpu
buf12.group.iteration = ((64,), (16, 64))
buf12.sizes = ([64], [16, 64])
class buf12_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf11', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf12', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf13: SchedulerNode(ComputedBuffer)
buf13.writes = [MemoryDep(name='buf13', index=c0, size=(65536,))]
buf13.unmet_dependencies = 
    [   MemoryDep(name='buf11', index=c1, size=(16, 64, 64)),
        MemoryDep(name='buf12', index=c1, size=(16, 64, 64)),
        MemoryDep(name='buf8', index=c0, size=(65536,))]
buf13.met_dependencies = 
    [   MemoryDep(name='arg4_1', index=c1, size=(16, 64, 64)),
        MemoryDep(name='arg5_1', index=c1, size=(16, 64, 64))]
buf13.group.device = cpu
buf13.group.iteration = ((16, 64, 64), ())
buf13.sizes = ([16, 64, 64], [])
class buf13_loop_body:
    var_ranges = {z0: 16, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf11', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf12', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf13', get_index_5, relu, None)
        return store


buf14: ExternKernelSchedulerNode(Convolution)
buf14.writes = [StarDep(name='buf14')]
buf14.unmet_dependencies = [StarDep(name='buf13')]
buf14.met_dependencies = [StarDep(name='arg6_1')]
buf14.node.kernel = aten.convolution


buf16: SchedulerNode(ComputedBuffer)
buf16.writes = 
    [   MemoryDep(name='buf16', index=c0, size=(64, 1024)),
        MemoryDep(name='buf16', index=c0, size=(64,))]
buf16.unmet_dependencies = [MemoryDep(name='buf14', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64))]
buf16.met_dependencies = []
buf16.group.device = cpu
buf16.group.iteration = ((64,), (16, 64))
buf16.sizes = ([64], [16, 64])
class buf16_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf16', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf17: SchedulerNode(ComputedBuffer)
buf17.writes = [MemoryDep(name='buf17', index=c0, size=(64,))]
buf17.unmet_dependencies = [MemoryDep(name='buf16', index=c0, size=(64,))]
buf17.met_dependencies = []
buf17.group.device = cpu
buf17.group.iteration = ((64,), ())
buf17.sizes = ([64], [])
class buf17_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf17', get_index_1, div, None)
        return store


buf18: SchedulerNode(ComputedBuffer)
buf18.writes = 
    [   MemoryDep(name='buf18', index=c0, size=(64, 1024)),
        MemoryDep(name='buf18', index=c0, size=(64,))]
buf18.unmet_dependencies = 
    [   MemoryDep(name='buf14', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64)),
        MemoryDep(name='buf17', index=c0, size=(64, 1024))]
buf18.met_dependencies = []
buf18.group.device = cpu
buf18.group.iteration = ((64,), (16, 64))
buf18.sizes = ([64], [16, 64])
class buf18_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf17', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf18', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf19: SchedulerNode(ComputedBuffer)
buf19.writes = [MemoryDep(name='buf19', index=c0, size=(65536,))]
buf19.unmet_dependencies = 
    [   MemoryDep(name='buf14', index=c0, size=(65536,)),
        MemoryDep(name='buf17', index=c1, size=(16, 64, 64)),
        MemoryDep(name='buf18', index=c1, size=(16, 64, 64))]
buf19.met_dependencies = 
    [   MemoryDep(name='arg7_1', index=c1, size=(16, 64, 64)),
        MemoryDep(name='arg8_1', index=c1, size=(16, 64, 64))]
buf19.group.device = cpu
buf19.group.iteration = ((16, 64, 64), ())
buf19.sizes = ([16, 64, 64], [])
class buf19_loop_body:
    var_ranges = {z0: 16, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf17', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf18', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg7_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg8_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf19', get_index_5, relu, None)
        return store


buf20: ExternKernelSchedulerNode(Convolution)
buf20.writes = [StarDep(name='buf20')]
buf20.unmet_dependencies = [StarDep(name='buf19')]
buf20.met_dependencies = [StarDep(name='arg9_1')]
buf20.node.kernel = aten.convolution


buf22: SchedulerNode(ComputedBuffer)
buf22.writes = 
    [   MemoryDep(name='buf22', index=c0, size=(256, 1024)),
        MemoryDep(name='buf22', index=c0, size=(256,))]
buf22.unmet_dependencies = [MemoryDep(name='buf20', index=64*c0 + 16384*c1 + c2, size=(256, 16, 64))]
buf22.met_dependencies = []
buf22.group.device = cpu
buf22.group.iteration = ((256,), (16, 64))
buf22.sizes = ([256], [16, 64])
class buf22_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf22', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf23: SchedulerNode(ComputedBuffer)
buf23.writes = [MemoryDep(name='buf23', index=c0, size=(256,))]
buf23.unmet_dependencies = [MemoryDep(name='buf22', index=c0, size=(256,))]
buf23.met_dependencies = []
buf23.group.device = cpu
buf23.group.iteration = ((256,), ())
buf23.sizes = ([256], [])
class buf23_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf23', get_index_1, div, None)
        return store


buf24: SchedulerNode(ComputedBuffer)
buf24.writes = 
    [   MemoryDep(name='buf24', index=c0, size=(256, 1024)),
        MemoryDep(name='buf24', index=c0, size=(256,))]
buf24.unmet_dependencies = 
    [   MemoryDep(name='buf20', index=64*c0 + 16384*c1 + c2, size=(256, 16, 64)),
        MemoryDep(name='buf23', index=c0, size=(256, 1024))]
buf24.met_dependencies = []
buf24.group.device = cpu
buf24.group.iteration = ((256,), (16, 64))
buf24.sizes = ([256], [16, 64])
class buf24_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf23', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf24', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf25: ExternKernelSchedulerNode(Convolution)
buf25.writes = [StarDep(name='buf25')]
buf25.unmet_dependencies = [StarDep(name='buf6')]
buf25.met_dependencies = [StarDep(name='arg12_1')]
buf25.node.kernel = aten.convolution


buf27: SchedulerNode(ComputedBuffer)
buf27.writes = 
    [   MemoryDep(name='buf27', index=c0, size=(256, 1024)),
        MemoryDep(name='buf27', index=c0, size=(256,))]
buf27.unmet_dependencies = [MemoryDep(name='buf25', index=64*c0 + 16384*c1 + c2, size=(256, 16, 64))]
buf27.met_dependencies = []
buf27.group.device = cpu
buf27.group.iteration = ((256,), (16, 64))
buf27.sizes = ([256], [16, 64])
class buf27_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf27', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf28: SchedulerNode(ComputedBuffer)
buf28.writes = [MemoryDep(name='buf28', index=c0, size=(256,))]
buf28.unmet_dependencies = [MemoryDep(name='buf27', index=c0, size=(256,))]
buf28.met_dependencies = []
buf28.group.device = cpu
buf28.group.iteration = ((256,), ())
buf28.sizes = ([256], [])
class buf28_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf28', get_index_1, div, None)
        return store


buf29: SchedulerNode(ComputedBuffer)
buf29.writes = 
    [   MemoryDep(name='buf29', index=c0, size=(256, 1024)),
        MemoryDep(name='buf29', index=c0, size=(256,))]
buf29.unmet_dependencies = 
    [   MemoryDep(name='buf25', index=64*c0 + 16384*c1 + c2, size=(256, 16, 64)),
        MemoryDep(name='buf28', index=c0, size=(256, 1024))]
buf29.met_dependencies = []
buf29.group.device = cpu
buf29.group.iteration = ((256,), (16, 64))
buf29.sizes = ([256], [16, 64])
class buf29_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf28', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf29', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf30: SchedulerNode(ComputedBuffer)
buf30.writes = [MemoryDep(name='buf30', index=c0, size=(262144,))]
buf30.unmet_dependencies = 
    [   MemoryDep(name='buf20', index=c0, size=(262144,)),
        MemoryDep(name='buf23', index=c1, size=(16, 256, 64)),
        MemoryDep(name='buf24', index=c1, size=(16, 256, 64)),
        MemoryDep(name='buf25', index=c0, size=(262144,)),
        MemoryDep(name='buf28', index=c1, size=(16, 256, 64)),
        MemoryDep(name='buf29', index=c1, size=(16, 256, 64))]
buf30.met_dependencies = 
    [   MemoryDep(name='arg10_1', index=c1, size=(16, 256, 64)),
        MemoryDep(name='arg11_1', index=c1, size=(16, 256, 64)),
        MemoryDep(name='arg13_1', index=c1, size=(16, 256, 64)),
        MemoryDep(name='arg14_1', index=c1, size=(16, 256, 64))]
buf30.group.device = cpu
buf30.group.iteration = ((16, 256, 64), ())
buf30.sizes = ([16, 256, 64], [])
class buf30_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 64}
    index0 = 16384*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf23', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf24', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg10_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg11_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf25', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf28', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf29', get_index_7)
        constant_2 = ops.constant(1024, torch.float32)
        div_1 = ops.div(load_7, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg13_1', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg14_1', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf30', get_index_10, add_4, None)
        return store


buf31: SchedulerNode(ComputedBuffer)
buf31.writes = [MemoryDep(name='buf31', index=c0, size=(262144,))]
buf31.unmet_dependencies = [MemoryDep(name='buf30', index=c0, size=(262144,))]
buf31.met_dependencies = []
buf31.group.device = cpu
buf31.group.iteration = ((262144,), ())
buf31.sizes = ([262144], [])
class buf31_loop_body:
    var_ranges = {z0: 262144}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf31', get_index_1, relu, None)
        return store


buf32: ExternKernelSchedulerNode(Convolution)
buf32.writes = [StarDep(name='buf32')]
buf32.unmet_dependencies = [StarDep(name='buf31')]
buf32.met_dependencies = [StarDep(name='arg15_1')]
buf32.node.kernel = aten.convolution


buf34: SchedulerNode(ComputedBuffer)
buf34.writes = 
    [   MemoryDep(name='buf34', index=c0, size=(64, 1024)),
        MemoryDep(name='buf34', index=c0, size=(64,))]
buf34.unmet_dependencies = [MemoryDep(name='buf32', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64))]
buf34.met_dependencies = []
buf34.group.device = cpu
buf34.group.iteration = ((64,), (16, 64))
buf34.sizes = ([64], [16, 64])
class buf34_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf34', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf35: SchedulerNode(ComputedBuffer)
buf35.writes = [MemoryDep(name='buf35', index=c0, size=(64,))]
buf35.unmet_dependencies = [MemoryDep(name='buf34', index=c0, size=(64,))]
buf35.met_dependencies = []
buf35.group.device = cpu
buf35.group.iteration = ((64,), ())
buf35.sizes = ([64], [])
class buf35_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf35', get_index_1, div, None)
        return store


buf36: SchedulerNode(ComputedBuffer)
buf36.writes = 
    [   MemoryDep(name='buf36', index=c0, size=(64, 1024)),
        MemoryDep(name='buf36', index=c0, size=(64,))]
buf36.unmet_dependencies = 
    [   MemoryDep(name='buf32', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64)),
        MemoryDep(name='buf35', index=c0, size=(64, 1024))]
buf36.met_dependencies = []
buf36.group.device = cpu
buf36.group.iteration = ((64,), (16, 64))
buf36.sizes = ([64], [16, 64])
class buf36_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf35', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf36', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf37: SchedulerNode(ComputedBuffer)
buf37.writes = [MemoryDep(name='buf37', index=c0, size=(65536,))]
buf37.unmet_dependencies = 
    [   MemoryDep(name='buf32', index=c0, size=(65536,)),
        MemoryDep(name='buf35', index=c1, size=(16, 64, 64)),
        MemoryDep(name='buf36', index=c1, size=(16, 64, 64))]
buf37.met_dependencies = 
    [   MemoryDep(name='arg16_1', index=c1, size=(16, 64, 64)),
        MemoryDep(name='arg17_1', index=c1, size=(16, 64, 64))]
buf37.group.device = cpu
buf37.group.iteration = ((16, 64, 64), ())
buf37.sizes = ([16, 64, 64], [])
class buf37_loop_body:
    var_ranges = {z0: 16, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf35', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf36', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg16_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg17_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf37', get_index_5, relu, None)
        return store


buf38: ExternKernelSchedulerNode(Convolution)
buf38.writes = [StarDep(name='buf38')]
buf38.unmet_dependencies = [StarDep(name='buf37')]
buf38.met_dependencies = [StarDep(name='arg18_1')]
buf38.node.kernel = aten.convolution


buf40: SchedulerNode(ComputedBuffer)
buf40.writes = 
    [   MemoryDep(name='buf40', index=c0, size=(64, 1024)),
        MemoryDep(name='buf40', index=c0, size=(64,))]
buf40.unmet_dependencies = [MemoryDep(name='buf38', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64))]
buf40.met_dependencies = []
buf40.group.device = cpu
buf40.group.iteration = ((64,), (16, 64))
buf40.sizes = ([64], [16, 64])
class buf40_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf40', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf41: SchedulerNode(ComputedBuffer)
buf41.writes = [MemoryDep(name='buf41', index=c0, size=(64,))]
buf41.unmet_dependencies = [MemoryDep(name='buf40', index=c0, size=(64,))]
buf41.met_dependencies = []
buf41.group.device = cpu
buf41.group.iteration = ((64,), ())
buf41.sizes = ([64], [])
class buf41_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf41', get_index_1, div, None)
        return store


buf42: SchedulerNode(ComputedBuffer)
buf42.writes = 
    [   MemoryDep(name='buf42', index=c0, size=(64, 1024)),
        MemoryDep(name='buf42', index=c0, size=(64,))]
buf42.unmet_dependencies = 
    [   MemoryDep(name='buf38', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64)),
        MemoryDep(name='buf41', index=c0, size=(64, 1024))]
buf42.met_dependencies = []
buf42.group.device = cpu
buf42.group.iteration = ((64,), (16, 64))
buf42.sizes = ([64], [16, 64])
class buf42_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf41', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf42', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf43: SchedulerNode(ComputedBuffer)
buf43.writes = [MemoryDep(name='buf43', index=c0, size=(65536,))]
buf43.unmet_dependencies = 
    [   MemoryDep(name='buf38', index=c0, size=(65536,)),
        MemoryDep(name='buf41', index=c1, size=(16, 64, 64)),
        MemoryDep(name='buf42', index=c1, size=(16, 64, 64))]
buf43.met_dependencies = 
    [   MemoryDep(name='arg19_1', index=c1, size=(16, 64, 64)),
        MemoryDep(name='arg20_1', index=c1, size=(16, 64, 64))]
buf43.group.device = cpu
buf43.group.iteration = ((16, 64, 64), ())
buf43.sizes = ([16, 64, 64], [])
class buf43_loop_body:
    var_ranges = {z0: 16, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf41', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf42', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg20_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf43', get_index_5, relu, None)
        return store


buf44: ExternKernelSchedulerNode(Convolution)
buf44.writes = [StarDep(name='buf44')]
buf44.unmet_dependencies = [StarDep(name='buf43')]
buf44.met_dependencies = [StarDep(name='arg21_1')]
buf44.node.kernel = aten.convolution


buf46: SchedulerNode(ComputedBuffer)
buf46.writes = 
    [   MemoryDep(name='buf46', index=c0, size=(256, 1024)),
        MemoryDep(name='buf46', index=c0, size=(256,))]
buf46.unmet_dependencies = [MemoryDep(name='buf44', index=64*c0 + 16384*c1 + c2, size=(256, 16, 64))]
buf46.met_dependencies = []
buf46.group.device = cpu
buf46.group.iteration = ((256,), (16, 64))
buf46.sizes = ([256], [16, 64])
class buf46_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf46', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf47: SchedulerNode(ComputedBuffer)
buf47.writes = [MemoryDep(name='buf47', index=c0, size=(256,))]
buf47.unmet_dependencies = [MemoryDep(name='buf46', index=c0, size=(256,))]
buf47.met_dependencies = []
buf47.group.device = cpu
buf47.group.iteration = ((256,), ())
buf47.sizes = ([256], [])
class buf47_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf47', get_index_1, div, None)
        return store


buf48: SchedulerNode(ComputedBuffer)
buf48.writes = 
    [   MemoryDep(name='buf48', index=c0, size=(256, 1024)),
        MemoryDep(name='buf48', index=c0, size=(256,))]
buf48.unmet_dependencies = 
    [   MemoryDep(name='buf44', index=64*c0 + 16384*c1 + c2, size=(256, 16, 64)),
        MemoryDep(name='buf47', index=c0, size=(256, 1024))]
buf48.met_dependencies = []
buf48.group.device = cpu
buf48.group.iteration = ((256,), (16, 64))
buf48.sizes = ([256], [16, 64])
class buf48_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf47', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf48', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf49: SchedulerNode(ComputedBuffer)
buf49.writes = [MemoryDep(name='buf49', index=c0, size=(262144,))]
buf49.unmet_dependencies = 
    [   MemoryDep(name='buf31', index=c0, size=(262144,)),
        MemoryDep(name='buf44', index=c0, size=(262144,)),
        MemoryDep(name='buf47', index=c1, size=(16, 256, 64)),
        MemoryDep(name='buf48', index=c1, size=(16, 256, 64))]
buf49.met_dependencies = 
    [   MemoryDep(name='arg22_1', index=c1, size=(16, 256, 64)),
        MemoryDep(name='arg23_1', index=c1, size=(16, 256, 64))]
buf49.group.device = cpu
buf49.group.iteration = ((16, 256, 64), ())
buf49.sizes = ([16, 256, 64], [])
class buf49_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 64}
    index0 = 16384*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf47', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf48', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg22_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg23_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf31', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf49', get_index_6, relu, None)
        return store


buf50: ExternKernelSchedulerNode(Convolution)
buf50.writes = [StarDep(name='buf50')]
buf50.unmet_dependencies = [StarDep(name='buf49')]
buf50.met_dependencies = [StarDep(name='arg24_1')]
buf50.node.kernel = aten.convolution


buf52: SchedulerNode(ComputedBuffer)
buf52.writes = 
    [   MemoryDep(name='buf52', index=c0, size=(64, 1024)),
        MemoryDep(name='buf52', index=c0, size=(64,))]
buf52.unmet_dependencies = [MemoryDep(name='buf50', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64))]
buf52.met_dependencies = []
buf52.group.device = cpu
buf52.group.iteration = ((64,), (16, 64))
buf52.sizes = ([64], [16, 64])
class buf52_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf52', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf53: SchedulerNode(ComputedBuffer)
buf53.writes = [MemoryDep(name='buf53', index=c0, size=(64,))]
buf53.unmet_dependencies = [MemoryDep(name='buf52', index=c0, size=(64,))]
buf53.met_dependencies = []
buf53.group.device = cpu
buf53.group.iteration = ((64,), ())
buf53.sizes = ([64], [])
class buf53_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf53', get_index_1, div, None)
        return store


buf54: SchedulerNode(ComputedBuffer)
buf54.writes = 
    [   MemoryDep(name='buf54', index=c0, size=(64, 1024)),
        MemoryDep(name='buf54', index=c0, size=(64,))]
buf54.unmet_dependencies = 
    [   MemoryDep(name='buf50', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64)),
        MemoryDep(name='buf53', index=c0, size=(64, 1024))]
buf54.met_dependencies = []
buf54.group.device = cpu
buf54.group.iteration = ((64,), (16, 64))
buf54.sizes = ([64], [16, 64])
class buf54_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf53', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf54', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf55: SchedulerNode(ComputedBuffer)
buf55.writes = [MemoryDep(name='buf55', index=c0, size=(65536,))]
buf55.unmet_dependencies = 
    [   MemoryDep(name='buf50', index=c0, size=(65536,)),
        MemoryDep(name='buf53', index=c1, size=(16, 64, 64)),
        MemoryDep(name='buf54', index=c1, size=(16, 64, 64))]
buf55.met_dependencies = 
    [   MemoryDep(name='arg25_1', index=c1, size=(16, 64, 64)),
        MemoryDep(name='arg26_1', index=c1, size=(16, 64, 64))]
buf55.group.device = cpu
buf55.group.iteration = ((16, 64, 64), ())
buf55.sizes = ([16, 64, 64], [])
class buf55_loop_body:
    var_ranges = {z0: 16, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf53', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf54', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg25_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg26_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf55', get_index_5, relu, None)
        return store


buf56: ExternKernelSchedulerNode(Convolution)
buf56.writes = [StarDep(name='buf56')]
buf56.unmet_dependencies = [StarDep(name='buf55')]
buf56.met_dependencies = [StarDep(name='arg27_1')]
buf56.node.kernel = aten.convolution


buf58: SchedulerNode(ComputedBuffer)
buf58.writes = 
    [   MemoryDep(name='buf58', index=c0, size=(64, 1024)),
        MemoryDep(name='buf58', index=c0, size=(64,))]
buf58.unmet_dependencies = [MemoryDep(name='buf56', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64))]
buf58.met_dependencies = []
buf58.group.device = cpu
buf58.group.iteration = ((64,), (16, 64))
buf58.sizes = ([64], [16, 64])
class buf58_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf58', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf59: SchedulerNode(ComputedBuffer)
buf59.writes = [MemoryDep(name='buf59', index=c0, size=(64,))]
buf59.unmet_dependencies = [MemoryDep(name='buf58', index=c0, size=(64,))]
buf59.met_dependencies = []
buf59.group.device = cpu
buf59.group.iteration = ((64,), ())
buf59.sizes = ([64], [])
class buf59_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf59', get_index_1, div, None)
        return store


buf60: SchedulerNode(ComputedBuffer)
buf60.writes = 
    [   MemoryDep(name='buf60', index=c0, size=(64, 1024)),
        MemoryDep(name='buf60', index=c0, size=(64,))]
buf60.unmet_dependencies = 
    [   MemoryDep(name='buf56', index=64*c0 + 4096*c1 + c2, size=(64, 16, 64)),
        MemoryDep(name='buf59', index=c0, size=(64, 1024))]
buf60.met_dependencies = []
buf60.group.device = cpu
buf60.group.iteration = ((64,), (16, 64))
buf60.sizes = ([64], [16, 64])
class buf60_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 64}
    index0 = 64*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf59', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf60', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf61: SchedulerNode(ComputedBuffer)
buf61.writes = [MemoryDep(name='buf61', index=c0, size=(65536,))]
buf61.unmet_dependencies = 
    [   MemoryDep(name='buf56', index=c0, size=(65536,)),
        MemoryDep(name='buf59', index=c1, size=(16, 64, 64)),
        MemoryDep(name='buf60', index=c1, size=(16, 64, 64))]
buf61.met_dependencies = 
    [   MemoryDep(name='arg28_1', index=c1, size=(16, 64, 64)),
        MemoryDep(name='arg29_1', index=c1, size=(16, 64, 64))]
buf61.group.device = cpu
buf61.group.iteration = ((16, 64, 64), ())
buf61.sizes = ([16, 64, 64], [])
class buf61_loop_body:
    var_ranges = {z0: 16, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf59', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf60', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg28_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg29_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf61', get_index_5, relu, None)
        return store


buf62: ExternKernelSchedulerNode(Convolution)
buf62.writes = [StarDep(name='buf62')]
buf62.unmet_dependencies = [StarDep(name='buf61')]
buf62.met_dependencies = [StarDep(name='arg30_1')]
buf62.node.kernel = aten.convolution


buf64: SchedulerNode(ComputedBuffer)
buf64.writes = 
    [   MemoryDep(name='buf64', index=c0, size=(256, 1024)),
        MemoryDep(name='buf64', index=c0, size=(256,))]
buf64.unmet_dependencies = [MemoryDep(name='buf62', index=64*c0 + 16384*c1 + c2, size=(256, 16, 64))]
buf64.met_dependencies = []
buf64.group.device = cpu
buf64.group.iteration = ((256,), (16, 64))
buf64.sizes = ([256], [16, 64])
class buf64_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf64', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf65: SchedulerNode(ComputedBuffer)
buf65.writes = [MemoryDep(name='buf65', index=c0, size=(256,))]
buf65.unmet_dependencies = [MemoryDep(name='buf64', index=c0, size=(256,))]
buf65.met_dependencies = []
buf65.group.device = cpu
buf65.group.iteration = ((256,), ())
buf65.sizes = ([256], [])
class buf65_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf65', get_index_1, div, None)
        return store


buf66: SchedulerNode(ComputedBuffer)
buf66.writes = 
    [   MemoryDep(name='buf66', index=c0, size=(256, 1024)),
        MemoryDep(name='buf66', index=c0, size=(256,))]
buf66.unmet_dependencies = 
    [   MemoryDep(name='buf62', index=64*c0 + 16384*c1 + c2, size=(256, 16, 64)),
        MemoryDep(name='buf65', index=c0, size=(256, 1024))]
buf66.met_dependencies = []
buf66.group.device = cpu
buf66.group.iteration = ((256,), (16, 64))
buf66.sizes = ([256], [16, 64])
class buf66_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 64}
    index0 = 64*z0 + 16384*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf65', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf66', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf67: SchedulerNode(ComputedBuffer)
buf67.writes = [MemoryDep(name='buf67', index=c0, size=(262144,))]
buf67.unmet_dependencies = 
    [   MemoryDep(name='buf49', index=c0, size=(262144,)),
        MemoryDep(name='buf62', index=c0, size=(262144,)),
        MemoryDep(name='buf65', index=c1, size=(16, 256, 64)),
        MemoryDep(name='buf66', index=c1, size=(16, 256, 64))]
buf67.met_dependencies = 
    [   MemoryDep(name='arg31_1', index=c1, size=(16, 256, 64)),
        MemoryDep(name='arg32_1', index=c1, size=(16, 256, 64))]
buf67.group.device = cpu
buf67.group.iteration = ((16, 256, 64), ())
buf67.sizes = ([16, 256, 64], [])
class buf67_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 64}
    index0 = 16384*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf65', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf66', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg31_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg32_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf49', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf67', get_index_6, relu, None)
        return store


buf68: ExternKernelSchedulerNode(Convolution)
buf68.writes = [StarDep(name='buf68')]
buf68.unmet_dependencies = [StarDep(name='buf67')]
buf68.met_dependencies = [StarDep(name='arg33_1')]
buf68.node.kernel = aten.convolution


buf70: SchedulerNode(ComputedBuffer)
buf70.writes = 
    [   MemoryDep(name='buf70', index=c0, size=(128, 1024)),
        MemoryDep(name='buf70', index=c0, size=(128,))]
buf70.unmet_dependencies = [MemoryDep(name='buf68', index=64*c0 + 8192*c1 + c2, size=(128, 16, 64))]
buf70.met_dependencies = []
buf70.group.device = cpu
buf70.group.iteration = ((128,), (16, 64))
buf70.sizes = ([128], [16, 64])
class buf70_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 64}
    index0 = 64*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf70', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf71: SchedulerNode(ComputedBuffer)
buf71.writes = [MemoryDep(name='buf71', index=c0, size=(128,))]
buf71.unmet_dependencies = [MemoryDep(name='buf70', index=c0, size=(128,))]
buf71.met_dependencies = []
buf71.group.device = cpu
buf71.group.iteration = ((128,), ())
buf71.sizes = ([128], [])
class buf71_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf71', get_index_1, div, None)
        return store


buf72: SchedulerNode(ComputedBuffer)
buf72.writes = 
    [   MemoryDep(name='buf72', index=c0, size=(128, 1024)),
        MemoryDep(name='buf72', index=c0, size=(128,))]
buf72.unmet_dependencies = 
    [   MemoryDep(name='buf68', index=64*c0 + 8192*c1 + c2, size=(128, 16, 64)),
        MemoryDep(name='buf71', index=c0, size=(128, 1024))]
buf72.met_dependencies = []
buf72.group.device = cpu
buf72.group.iteration = ((128,), (16, 64))
buf72.sizes = ([128], [16, 64])
class buf72_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 64}
    index0 = 64*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf71', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf72', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf73: SchedulerNode(ComputedBuffer)
buf73.writes = [MemoryDep(name='buf73', index=c0, size=(131072,))]
buf73.unmet_dependencies = 
    [   MemoryDep(name='buf68', index=c0, size=(131072,)),
        MemoryDep(name='buf71', index=c1, size=(16, 128, 64)),
        MemoryDep(name='buf72', index=c1, size=(16, 128, 64))]
buf73.met_dependencies = 
    [   MemoryDep(name='arg34_1', index=c1, size=(16, 128, 64)),
        MemoryDep(name='arg35_1', index=c1, size=(16, 128, 64))]
buf73.group.device = cpu
buf73.group.iteration = ((16, 128, 64), ())
buf73.sizes = ([16, 128, 64], [])
class buf73_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 64}
    index0 = 8192*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf71', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf72', get_index_2)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg34_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg35_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf73', get_index_5, relu, None)
        return store


buf74: ExternKernelSchedulerNode(Convolution)
buf74.writes = [StarDep(name='buf74')]
buf74.unmet_dependencies = [StarDep(name='buf73')]
buf74.met_dependencies = [StarDep(name='arg36_1')]
buf74.node.kernel = aten.convolution


buf76: SchedulerNode(ComputedBuffer)
buf76.writes = 
    [   MemoryDep(name='buf76', index=c0, size=(128, 256)),
        MemoryDep(name='buf76', index=c0, size=(128,))]
buf76.unmet_dependencies = [MemoryDep(name='buf74', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16))]
buf76.met_dependencies = []
buf76.group.device = cpu
buf76.group.iteration = ((128,), (16, 16))
buf76.sizes = ([128], [16, 16])
class buf76_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf76', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf77: SchedulerNode(ComputedBuffer)
buf77.writes = [MemoryDep(name='buf77', index=c0, size=(128,))]
buf77.unmet_dependencies = [MemoryDep(name='buf76', index=c0, size=(128,))]
buf77.met_dependencies = []
buf77.group.device = cpu
buf77.group.iteration = ((128,), ())
buf77.sizes = ([128], [])
class buf77_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf77', get_index_1, div, None)
        return store


buf78: SchedulerNode(ComputedBuffer)
buf78.writes = 
    [   MemoryDep(name='buf78', index=c0, size=(128, 256)),
        MemoryDep(name='buf78', index=c0, size=(128,))]
buf78.unmet_dependencies = 
    [   MemoryDep(name='buf74', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16)),
        MemoryDep(name='buf77', index=c0, size=(128, 256))]
buf78.met_dependencies = []
buf78.group.device = cpu
buf78.group.iteration = ((128,), (16, 16))
buf78.sizes = ([128], [16, 16])
class buf78_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf77', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf78', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf79: SchedulerNode(ComputedBuffer)
buf79.writes = [MemoryDep(name='buf79', index=c0, size=(32768,))]
buf79.unmet_dependencies = 
    [   MemoryDep(name='buf74', index=c0, size=(32768,)),
        MemoryDep(name='buf77', index=c1, size=(16, 128, 16)),
        MemoryDep(name='buf78', index=c1, size=(16, 128, 16))]
buf79.met_dependencies = 
    [   MemoryDep(name='arg37_1', index=c1, size=(16, 128, 16)),
        MemoryDep(name='arg38_1', index=c1, size=(16, 128, 16))]
buf79.group.device = cpu
buf79.group.iteration = ((16, 128, 16), ())
buf79.sizes = ([16, 128, 16], [])
class buf79_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf77', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf78', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg37_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg38_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf79', get_index_5, relu, None)
        return store


buf80: ExternKernelSchedulerNode(Convolution)
buf80.writes = [StarDep(name='buf80')]
buf80.unmet_dependencies = [StarDep(name='buf79')]
buf80.met_dependencies = [StarDep(name='arg39_1')]
buf80.node.kernel = aten.convolution


buf82: SchedulerNode(ComputedBuffer)
buf82.writes = 
    [   MemoryDep(name='buf82', index=c0, size=(512, 256)),
        MemoryDep(name='buf82', index=c0, size=(512,))]
buf82.unmet_dependencies = [MemoryDep(name='buf80', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16))]
buf82.met_dependencies = []
buf82.group.device = cpu
buf82.group.iteration = ((512,), (16, 16))
buf82.sizes = ([512], [16, 16])
class buf82_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf82', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf83: SchedulerNode(ComputedBuffer)
buf83.writes = [MemoryDep(name='buf83', index=c0, size=(512,))]
buf83.unmet_dependencies = [MemoryDep(name='buf82', index=c0, size=(512,))]
buf83.met_dependencies = []
buf83.group.device = cpu
buf83.group.iteration = ((512,), ())
buf83.sizes = ([512], [])
class buf83_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf83', get_index_1, div, None)
        return store


buf84: SchedulerNode(ComputedBuffer)
buf84.writes = 
    [   MemoryDep(name='buf84', index=c0, size=(512, 256)),
        MemoryDep(name='buf84', index=c0, size=(512,))]
buf84.unmet_dependencies = 
    [   MemoryDep(name='buf80', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16)),
        MemoryDep(name='buf83', index=c0, size=(512, 256))]
buf84.met_dependencies = []
buf84.group.device = cpu
buf84.group.iteration = ((512,), (16, 16))
buf84.sizes = ([512], [16, 16])
class buf84_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf83', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf84', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf85: ExternKernelSchedulerNode(Convolution)
buf85.writes = [StarDep(name='buf85')]
buf85.unmet_dependencies = [StarDep(name='buf67')]
buf85.met_dependencies = [StarDep(name='arg42_1')]
buf85.node.kernel = aten.convolution


buf87: SchedulerNode(ComputedBuffer)
buf87.writes = 
    [   MemoryDep(name='buf87', index=c0, size=(512, 256)),
        MemoryDep(name='buf87', index=c0, size=(512,))]
buf87.unmet_dependencies = [MemoryDep(name='buf85', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16))]
buf87.met_dependencies = []
buf87.group.device = cpu
buf87.group.iteration = ((512,), (16, 16))
buf87.sizes = ([512], [16, 16])
class buf87_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf87', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf88: SchedulerNode(ComputedBuffer)
buf88.writes = [MemoryDep(name='buf88', index=c0, size=(512,))]
buf88.unmet_dependencies = [MemoryDep(name='buf87', index=c0, size=(512,))]
buf88.met_dependencies = []
buf88.group.device = cpu
buf88.group.iteration = ((512,), ())
buf88.sizes = ([512], [])
class buf88_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf88', get_index_1, div, None)
        return store


buf89: SchedulerNode(ComputedBuffer)
buf89.writes = 
    [   MemoryDep(name='buf89', index=c0, size=(512, 256)),
        MemoryDep(name='buf89', index=c0, size=(512,))]
buf89.unmet_dependencies = 
    [   MemoryDep(name='buf85', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16)),
        MemoryDep(name='buf88', index=c0, size=(512, 256))]
buf89.met_dependencies = []
buf89.group.device = cpu
buf89.group.iteration = ((512,), (16, 16))
buf89.sizes = ([512], [16, 16])
class buf89_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf88', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf89', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf90: SchedulerNode(ComputedBuffer)
buf90.writes = [MemoryDep(name='buf90', index=c0, size=(131072,))]
buf90.unmet_dependencies = 
    [   MemoryDep(name='buf80', index=c0, size=(131072,)),
        MemoryDep(name='buf83', index=c1, size=(16, 512, 16)),
        MemoryDep(name='buf84', index=c1, size=(16, 512, 16)),
        MemoryDep(name='buf85', index=c0, size=(131072,)),
        MemoryDep(name='buf88', index=c1, size=(16, 512, 16)),
        MemoryDep(name='buf89', index=c1, size=(16, 512, 16))]
buf90.met_dependencies = 
    [   MemoryDep(name='arg40_1', index=c1, size=(16, 512, 16)),
        MemoryDep(name='arg41_1', index=c1, size=(16, 512, 16)),
        MemoryDep(name='arg43_1', index=c1, size=(16, 512, 16)),
        MemoryDep(name='arg44_1', index=c1, size=(16, 512, 16))]
buf90.group.device = cpu
buf90.group.iteration = ((16, 512, 16), ())
buf90.sizes = ([16, 512, 16], [])
class buf90_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 16}
    index0 = 8192*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf83', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf84', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg40_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg41_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf85', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf88', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf89', get_index_7)
        constant_2 = ops.constant(256, torch.float32)
        div_1 = ops.div(load_7, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg43_1', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg44_1', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf90', get_index_10, add_4, None)
        return store


buf91: SchedulerNode(ComputedBuffer)
buf91.writes = [MemoryDep(name='buf91', index=c0, size=(131072,))]
buf91.unmet_dependencies = [MemoryDep(name='buf90', index=c0, size=(131072,))]
buf91.met_dependencies = []
buf91.group.device = cpu
buf91.group.iteration = ((131072,), ())
buf91.sizes = ([131072], [])
class buf91_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf91', get_index_1, relu, None)
        return store


buf92: ExternKernelSchedulerNode(Convolution)
buf92.writes = [StarDep(name='buf92')]
buf92.unmet_dependencies = [StarDep(name='buf91')]
buf92.met_dependencies = [StarDep(name='arg45_1')]
buf92.node.kernel = aten.convolution


buf94: SchedulerNode(ComputedBuffer)
buf94.writes = 
    [   MemoryDep(name='buf94', index=c0, size=(128, 256)),
        MemoryDep(name='buf94', index=c0, size=(128,))]
buf94.unmet_dependencies = [MemoryDep(name='buf92', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16))]
buf94.met_dependencies = []
buf94.group.device = cpu
buf94.group.iteration = ((128,), (16, 16))
buf94.sizes = ([128], [16, 16])
class buf94_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf94', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf95: SchedulerNode(ComputedBuffer)
buf95.writes = [MemoryDep(name='buf95', index=c0, size=(128,))]
buf95.unmet_dependencies = [MemoryDep(name='buf94', index=c0, size=(128,))]
buf95.met_dependencies = []
buf95.group.device = cpu
buf95.group.iteration = ((128,), ())
buf95.sizes = ([128], [])
class buf95_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf95', get_index_1, div, None)
        return store


buf96: SchedulerNode(ComputedBuffer)
buf96.writes = 
    [   MemoryDep(name='buf96', index=c0, size=(128, 256)),
        MemoryDep(name='buf96', index=c0, size=(128,))]
buf96.unmet_dependencies = 
    [   MemoryDep(name='buf92', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16)),
        MemoryDep(name='buf95', index=c0, size=(128, 256))]
buf96.met_dependencies = []
buf96.group.device = cpu
buf96.group.iteration = ((128,), (16, 16))
buf96.sizes = ([128], [16, 16])
class buf96_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf95', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf96', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf97: SchedulerNode(ComputedBuffer)
buf97.writes = [MemoryDep(name='buf97', index=c0, size=(32768,))]
buf97.unmet_dependencies = 
    [   MemoryDep(name='buf92', index=c0, size=(32768,)),
        MemoryDep(name='buf95', index=c1, size=(16, 128, 16)),
        MemoryDep(name='buf96', index=c1, size=(16, 128, 16))]
buf97.met_dependencies = 
    [   MemoryDep(name='arg46_1', index=c1, size=(16, 128, 16)),
        MemoryDep(name='arg47_1', index=c1, size=(16, 128, 16))]
buf97.group.device = cpu
buf97.group.iteration = ((16, 128, 16), ())
buf97.sizes = ([16, 128, 16], [])
class buf97_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf95', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf96', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg46_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg47_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf97', get_index_5, relu, None)
        return store


buf98: ExternKernelSchedulerNode(Convolution)
buf98.writes = [StarDep(name='buf98')]
buf98.unmet_dependencies = [StarDep(name='buf97')]
buf98.met_dependencies = [StarDep(name='arg48_1')]
buf98.node.kernel = aten.convolution


buf100: SchedulerNode(ComputedBuffer)
buf100.writes = 
    [   MemoryDep(name='buf100', index=c0, size=(128, 256)),
        MemoryDep(name='buf100', index=c0, size=(128,))]
buf100.unmet_dependencies = [MemoryDep(name='buf98', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16))]
buf100.met_dependencies = []
buf100.group.device = cpu
buf100.group.iteration = ((128,), (16, 16))
buf100.sizes = ([128], [16, 16])
class buf100_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf100', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf101: SchedulerNode(ComputedBuffer)
buf101.writes = [MemoryDep(name='buf101', index=c0, size=(128,))]
buf101.unmet_dependencies = [MemoryDep(name='buf100', index=c0, size=(128,))]
buf101.met_dependencies = []
buf101.group.device = cpu
buf101.group.iteration = ((128,), ())
buf101.sizes = ([128], [])
class buf101_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf101', get_index_1, div, None)
        return store


buf102: SchedulerNode(ComputedBuffer)
buf102.writes = 
    [   MemoryDep(name='buf102', index=c0, size=(128, 256)),
        MemoryDep(name='buf102', index=c0, size=(128,))]
buf102.unmet_dependencies = 
    [   MemoryDep(name='buf101', index=c0, size=(128, 256)),
        MemoryDep(name='buf98', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16))]
buf102.met_dependencies = []
buf102.group.device = cpu
buf102.group.iteration = ((128,), (16, 16))
buf102.sizes = ([128], [16, 16])
class buf102_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf101', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf102', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf103: SchedulerNode(ComputedBuffer)
buf103.writes = [MemoryDep(name='buf103', index=c0, size=(32768,))]
buf103.unmet_dependencies = 
    [   MemoryDep(name='buf101', index=c1, size=(16, 128, 16)),
        MemoryDep(name='buf102', index=c1, size=(16, 128, 16)),
        MemoryDep(name='buf98', index=c0, size=(32768,))]
buf103.met_dependencies = 
    [   MemoryDep(name='arg49_1', index=c1, size=(16, 128, 16)),
        MemoryDep(name='arg50_1', index=c1, size=(16, 128, 16))]
buf103.group.device = cpu
buf103.group.iteration = ((16, 128, 16), ())
buf103.sizes = ([16, 128, 16], [])
class buf103_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf101', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf102', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg49_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg50_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf103', get_index_5, relu, None)
        return store


buf104: ExternKernelSchedulerNode(Convolution)
buf104.writes = [StarDep(name='buf104')]
buf104.unmet_dependencies = [StarDep(name='buf103')]
buf104.met_dependencies = [StarDep(name='arg51_1')]
buf104.node.kernel = aten.convolution


buf106: SchedulerNode(ComputedBuffer)
buf106.writes = 
    [   MemoryDep(name='buf106', index=c0, size=(512, 256)),
        MemoryDep(name='buf106', index=c0, size=(512,))]
buf106.unmet_dependencies = [MemoryDep(name='buf104', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16))]
buf106.met_dependencies = []
buf106.group.device = cpu
buf106.group.iteration = ((512,), (16, 16))
buf106.sizes = ([512], [16, 16])
class buf106_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf106', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf107: SchedulerNode(ComputedBuffer)
buf107.writes = [MemoryDep(name='buf107', index=c0, size=(512,))]
buf107.unmet_dependencies = [MemoryDep(name='buf106', index=c0, size=(512,))]
buf107.met_dependencies = []
buf107.group.device = cpu
buf107.group.iteration = ((512,), ())
buf107.sizes = ([512], [])
class buf107_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf107', get_index_1, div, None)
        return store


buf108: SchedulerNode(ComputedBuffer)
buf108.writes = 
    [   MemoryDep(name='buf108', index=c0, size=(512, 256)),
        MemoryDep(name='buf108', index=c0, size=(512,))]
buf108.unmet_dependencies = 
    [   MemoryDep(name='buf104', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16)),
        MemoryDep(name='buf107', index=c0, size=(512, 256))]
buf108.met_dependencies = []
buf108.group.device = cpu
buf108.group.iteration = ((512,), (16, 16))
buf108.sizes = ([512], [16, 16])
class buf108_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf107', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf108', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf109: SchedulerNode(ComputedBuffer)
buf109.writes = [MemoryDep(name='buf109', index=c0, size=(131072,))]
buf109.unmet_dependencies = 
    [   MemoryDep(name='buf104', index=c0, size=(131072,)),
        MemoryDep(name='buf107', index=c1, size=(16, 512, 16)),
        MemoryDep(name='buf108', index=c1, size=(16, 512, 16)),
        MemoryDep(name='buf91', index=c0, size=(131072,))]
buf109.met_dependencies = 
    [   MemoryDep(name='arg52_1', index=c1, size=(16, 512, 16)),
        MemoryDep(name='arg53_1', index=c1, size=(16, 512, 16))]
buf109.group.device = cpu
buf109.group.iteration = ((16, 512, 16), ())
buf109.sizes = ([16, 512, 16], [])
class buf109_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 16}
    index0 = 8192*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf107', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf108', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg52_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg53_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf91', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf109', get_index_6, relu, None)
        return store


buf110: ExternKernelSchedulerNode(Convolution)
buf110.writes = [StarDep(name='buf110')]
buf110.unmet_dependencies = [StarDep(name='buf109')]
buf110.met_dependencies = [StarDep(name='arg54_1')]
buf110.node.kernel = aten.convolution


buf112: SchedulerNode(ComputedBuffer)
buf112.writes = 
    [   MemoryDep(name='buf112', index=c0, size=(128, 256)),
        MemoryDep(name='buf112', index=c0, size=(128,))]
buf112.unmet_dependencies = [MemoryDep(name='buf110', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16))]
buf112.met_dependencies = []
buf112.group.device = cpu
buf112.group.iteration = ((128,), (16, 16))
buf112.sizes = ([128], [16, 16])
class buf112_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf112', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf113: SchedulerNode(ComputedBuffer)
buf113.writes = [MemoryDep(name='buf113', index=c0, size=(128,))]
buf113.unmet_dependencies = [MemoryDep(name='buf112', index=c0, size=(128,))]
buf113.met_dependencies = []
buf113.group.device = cpu
buf113.group.iteration = ((128,), ())
buf113.sizes = ([128], [])
class buf113_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf113', get_index_1, div, None)
        return store


buf114: SchedulerNode(ComputedBuffer)
buf114.writes = 
    [   MemoryDep(name='buf114', index=c0, size=(128, 256)),
        MemoryDep(name='buf114', index=c0, size=(128,))]
buf114.unmet_dependencies = 
    [   MemoryDep(name='buf110', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16)),
        MemoryDep(name='buf113', index=c0, size=(128, 256))]
buf114.met_dependencies = []
buf114.group.device = cpu
buf114.group.iteration = ((128,), (16, 16))
buf114.sizes = ([128], [16, 16])
class buf114_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf113', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf114', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf115: SchedulerNode(ComputedBuffer)
buf115.writes = [MemoryDep(name='buf115', index=c0, size=(32768,))]
buf115.unmet_dependencies = 
    [   MemoryDep(name='buf110', index=c0, size=(32768,)),
        MemoryDep(name='buf113', index=c1, size=(16, 128, 16)),
        MemoryDep(name='buf114', index=c1, size=(16, 128, 16))]
buf115.met_dependencies = 
    [   MemoryDep(name='arg55_1', index=c1, size=(16, 128, 16)),
        MemoryDep(name='arg56_1', index=c1, size=(16, 128, 16))]
buf115.group.device = cpu
buf115.group.iteration = ((16, 128, 16), ())
buf115.sizes = ([16, 128, 16], [])
class buf115_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf113', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf114', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg55_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg56_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf115', get_index_5, relu, None)
        return store


buf116: ExternKernelSchedulerNode(Convolution)
buf116.writes = [StarDep(name='buf116')]
buf116.unmet_dependencies = [StarDep(name='buf115')]
buf116.met_dependencies = [StarDep(name='arg57_1')]
buf116.node.kernel = aten.convolution


buf118: SchedulerNode(ComputedBuffer)
buf118.writes = 
    [   MemoryDep(name='buf118', index=c0, size=(128, 256)),
        MemoryDep(name='buf118', index=c0, size=(128,))]
buf118.unmet_dependencies = [MemoryDep(name='buf116', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16))]
buf118.met_dependencies = []
buf118.group.device = cpu
buf118.group.iteration = ((128,), (16, 16))
buf118.sizes = ([128], [16, 16])
class buf118_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf118', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf119: SchedulerNode(ComputedBuffer)
buf119.writes = [MemoryDep(name='buf119', index=c0, size=(128,))]
buf119.unmet_dependencies = [MemoryDep(name='buf118', index=c0, size=(128,))]
buf119.met_dependencies = []
buf119.group.device = cpu
buf119.group.iteration = ((128,), ())
buf119.sizes = ([128], [])
class buf119_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf119', get_index_1, div, None)
        return store


buf120: SchedulerNode(ComputedBuffer)
buf120.writes = 
    [   MemoryDep(name='buf120', index=c0, size=(128, 256)),
        MemoryDep(name='buf120', index=c0, size=(128,))]
buf120.unmet_dependencies = 
    [   MemoryDep(name='buf116', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16)),
        MemoryDep(name='buf119', index=c0, size=(128, 256))]
buf120.met_dependencies = []
buf120.group.device = cpu
buf120.group.iteration = ((128,), (16, 16))
buf120.sizes = ([128], [16, 16])
class buf120_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf119', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf120', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf121: SchedulerNode(ComputedBuffer)
buf121.writes = [MemoryDep(name='buf121', index=c0, size=(32768,))]
buf121.unmet_dependencies = 
    [   MemoryDep(name='buf116', index=c0, size=(32768,)),
        MemoryDep(name='buf119', index=c1, size=(16, 128, 16)),
        MemoryDep(name='buf120', index=c1, size=(16, 128, 16))]
buf121.met_dependencies = 
    [   MemoryDep(name='arg58_1', index=c1, size=(16, 128, 16)),
        MemoryDep(name='arg59_1', index=c1, size=(16, 128, 16))]
buf121.group.device = cpu
buf121.group.iteration = ((16, 128, 16), ())
buf121.sizes = ([16, 128, 16], [])
class buf121_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf119', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf120', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg58_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg59_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf121', get_index_5, relu, None)
        return store


buf122: ExternKernelSchedulerNode(Convolution)
buf122.writes = [StarDep(name='buf122')]
buf122.unmet_dependencies = [StarDep(name='buf121')]
buf122.met_dependencies = [StarDep(name='arg60_1')]
buf122.node.kernel = aten.convolution


buf124: SchedulerNode(ComputedBuffer)
buf124.writes = 
    [   MemoryDep(name='buf124', index=c0, size=(512, 256)),
        MemoryDep(name='buf124', index=c0, size=(512,))]
buf124.unmet_dependencies = [MemoryDep(name='buf122', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16))]
buf124.met_dependencies = []
buf124.group.device = cpu
buf124.group.iteration = ((512,), (16, 16))
buf124.sizes = ([512], [16, 16])
class buf124_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf124', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf125: SchedulerNode(ComputedBuffer)
buf125.writes = [MemoryDep(name='buf125', index=c0, size=(512,))]
buf125.unmet_dependencies = [MemoryDep(name='buf124', index=c0, size=(512,))]
buf125.met_dependencies = []
buf125.group.device = cpu
buf125.group.iteration = ((512,), ())
buf125.sizes = ([512], [])
class buf125_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf125', get_index_1, div, None)
        return store


buf126: SchedulerNode(ComputedBuffer)
buf126.writes = 
    [   MemoryDep(name='buf126', index=c0, size=(512, 256)),
        MemoryDep(name='buf126', index=c0, size=(512,))]
buf126.unmet_dependencies = 
    [   MemoryDep(name='buf122', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16)),
        MemoryDep(name='buf125', index=c0, size=(512, 256))]
buf126.met_dependencies = []
buf126.group.device = cpu
buf126.group.iteration = ((512,), (16, 16))
buf126.sizes = ([512], [16, 16])
class buf126_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf125', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf126', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf127: SchedulerNode(ComputedBuffer)
buf127.writes = [MemoryDep(name='buf127', index=c0, size=(131072,))]
buf127.unmet_dependencies = 
    [   MemoryDep(name='buf109', index=c0, size=(131072,)),
        MemoryDep(name='buf122', index=c0, size=(131072,)),
        MemoryDep(name='buf125', index=c1, size=(16, 512, 16)),
        MemoryDep(name='buf126', index=c1, size=(16, 512, 16))]
buf127.met_dependencies = 
    [   MemoryDep(name='arg61_1', index=c1, size=(16, 512, 16)),
        MemoryDep(name='arg62_1', index=c1, size=(16, 512, 16))]
buf127.group.device = cpu
buf127.group.iteration = ((16, 512, 16), ())
buf127.sizes = ([16, 512, 16], [])
class buf127_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 16}
    index0 = 8192*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf125', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf126', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg61_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg62_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf109', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf127', get_index_6, relu, None)
        return store


buf128: ExternKernelSchedulerNode(Convolution)
buf128.writes = [StarDep(name='buf128')]
buf128.unmet_dependencies = [StarDep(name='buf127')]
buf128.met_dependencies = [StarDep(name='arg63_1')]
buf128.node.kernel = aten.convolution


buf130: SchedulerNode(ComputedBuffer)
buf130.writes = 
    [   MemoryDep(name='buf130', index=c0, size=(128, 256)),
        MemoryDep(name='buf130', index=c0, size=(128,))]
buf130.unmet_dependencies = [MemoryDep(name='buf128', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16))]
buf130.met_dependencies = []
buf130.group.device = cpu
buf130.group.iteration = ((128,), (16, 16))
buf130.sizes = ([128], [16, 16])
class buf130_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf130', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf131: SchedulerNode(ComputedBuffer)
buf131.writes = [MemoryDep(name='buf131', index=c0, size=(128,))]
buf131.unmet_dependencies = [MemoryDep(name='buf130', index=c0, size=(128,))]
buf131.met_dependencies = []
buf131.group.device = cpu
buf131.group.iteration = ((128,), ())
buf131.sizes = ([128], [])
class buf131_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf131', get_index_1, div, None)
        return store


buf132: SchedulerNode(ComputedBuffer)
buf132.writes = 
    [   MemoryDep(name='buf132', index=c0, size=(128, 256)),
        MemoryDep(name='buf132', index=c0, size=(128,))]
buf132.unmet_dependencies = 
    [   MemoryDep(name='buf128', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16)),
        MemoryDep(name='buf131', index=c0, size=(128, 256))]
buf132.met_dependencies = []
buf132.group.device = cpu
buf132.group.iteration = ((128,), (16, 16))
buf132.sizes = ([128], [16, 16])
class buf132_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf131', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf132', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf133: SchedulerNode(ComputedBuffer)
buf133.writes = [MemoryDep(name='buf133', index=c0, size=(32768,))]
buf133.unmet_dependencies = 
    [   MemoryDep(name='buf128', index=c0, size=(32768,)),
        MemoryDep(name='buf131', index=c1, size=(16, 128, 16)),
        MemoryDep(name='buf132', index=c1, size=(16, 128, 16))]
buf133.met_dependencies = 
    [   MemoryDep(name='arg64_1', index=c1, size=(16, 128, 16)),
        MemoryDep(name='arg65_1', index=c1, size=(16, 128, 16))]
buf133.group.device = cpu
buf133.group.iteration = ((16, 128, 16), ())
buf133.sizes = ([16, 128, 16], [])
class buf133_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf131', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf132', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg64_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg65_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf133', get_index_5, relu, None)
        return store


buf134: ExternKernelSchedulerNode(Convolution)
buf134.writes = [StarDep(name='buf134')]
buf134.unmet_dependencies = [StarDep(name='buf133')]
buf134.met_dependencies = [StarDep(name='arg66_1')]
buf134.node.kernel = aten.convolution


buf136: SchedulerNode(ComputedBuffer)
buf136.writes = 
    [   MemoryDep(name='buf136', index=c0, size=(128, 256)),
        MemoryDep(name='buf136', index=c0, size=(128,))]
buf136.unmet_dependencies = [MemoryDep(name='buf134', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16))]
buf136.met_dependencies = []
buf136.group.device = cpu
buf136.group.iteration = ((128,), (16, 16))
buf136.sizes = ([128], [16, 16])
class buf136_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf136', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf137: SchedulerNode(ComputedBuffer)
buf137.writes = [MemoryDep(name='buf137', index=c0, size=(128,))]
buf137.unmet_dependencies = [MemoryDep(name='buf136', index=c0, size=(128,))]
buf137.met_dependencies = []
buf137.group.device = cpu
buf137.group.iteration = ((128,), ())
buf137.sizes = ([128], [])
class buf137_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf137', get_index_1, div, None)
        return store


buf138: SchedulerNode(ComputedBuffer)
buf138.writes = 
    [   MemoryDep(name='buf138', index=c0, size=(128, 256)),
        MemoryDep(name='buf138', index=c0, size=(128,))]
buf138.unmet_dependencies = 
    [   MemoryDep(name='buf134', index=16*c0 + 2048*c1 + c2, size=(128, 16, 16)),
        MemoryDep(name='buf137', index=c0, size=(128, 256))]
buf138.met_dependencies = []
buf138.group.device = cpu
buf138.group.iteration = ((128,), (16, 16))
buf138.sizes = ([128], [16, 16])
class buf138_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 16}
    index0 = 16*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf137', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf138', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf139: SchedulerNode(ComputedBuffer)
buf139.writes = [MemoryDep(name='buf139', index=c0, size=(32768,))]
buf139.unmet_dependencies = 
    [   MemoryDep(name='buf134', index=c0, size=(32768,)),
        MemoryDep(name='buf137', index=c1, size=(16, 128, 16)),
        MemoryDep(name='buf138', index=c1, size=(16, 128, 16))]
buf139.met_dependencies = 
    [   MemoryDep(name='arg67_1', index=c1, size=(16, 128, 16)),
        MemoryDep(name='arg68_1', index=c1, size=(16, 128, 16))]
buf139.group.device = cpu
buf139.group.iteration = ((16, 128, 16), ())
buf139.sizes = ([16, 128, 16], [])
class buf139_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf137', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf138', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg67_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg68_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf139', get_index_5, relu, None)
        return store


buf140: ExternKernelSchedulerNode(Convolution)
buf140.writes = [StarDep(name='buf140')]
buf140.unmet_dependencies = [StarDep(name='buf139')]
buf140.met_dependencies = [StarDep(name='arg69_1')]
buf140.node.kernel = aten.convolution


buf142: SchedulerNode(ComputedBuffer)
buf142.writes = 
    [   MemoryDep(name='buf142', index=c0, size=(512, 256)),
        MemoryDep(name='buf142', index=c0, size=(512,))]
buf142.unmet_dependencies = [MemoryDep(name='buf140', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16))]
buf142.met_dependencies = []
buf142.group.device = cpu
buf142.group.iteration = ((512,), (16, 16))
buf142.sizes = ([512], [16, 16])
class buf142_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf142', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf143: SchedulerNode(ComputedBuffer)
buf143.writes = [MemoryDep(name='buf143', index=c0, size=(512,))]
buf143.unmet_dependencies = [MemoryDep(name='buf142', index=c0, size=(512,))]
buf143.met_dependencies = []
buf143.group.device = cpu
buf143.group.iteration = ((512,), ())
buf143.sizes = ([512], [])
class buf143_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf143', get_index_1, div, None)
        return store


buf144: SchedulerNode(ComputedBuffer)
buf144.writes = 
    [   MemoryDep(name='buf144', index=c0, size=(512, 256)),
        MemoryDep(name='buf144', index=c0, size=(512,))]
buf144.unmet_dependencies = 
    [   MemoryDep(name='buf140', index=16*c0 + 8192*c1 + c2, size=(512, 16, 16)),
        MemoryDep(name='buf143', index=c0, size=(512, 256))]
buf144.met_dependencies = []
buf144.group.device = cpu
buf144.group.iteration = ((512,), (16, 16))
buf144.sizes = ([512], [16, 16])
class buf144_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 16}
    index0 = 16*z0 + 8192*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf143', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf144', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf145: SchedulerNode(ComputedBuffer)
buf145.writes = [MemoryDep(name='buf145', index=c0, size=(131072,))]
buf145.unmet_dependencies = 
    [   MemoryDep(name='buf127', index=c0, size=(131072,)),
        MemoryDep(name='buf140', index=c0, size=(131072,)),
        MemoryDep(name='buf143', index=c1, size=(16, 512, 16)),
        MemoryDep(name='buf144', index=c1, size=(16, 512, 16))]
buf145.met_dependencies = 
    [   MemoryDep(name='arg70_1', index=c1, size=(16, 512, 16)),
        MemoryDep(name='arg71_1', index=c1, size=(16, 512, 16))]
buf145.group.device = cpu
buf145.group.iteration = ((16, 512, 16), ())
buf145.sizes = ([16, 512, 16], [])
class buf145_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 16}
    index0 = 8192*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf143', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf144', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg70_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg71_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf127', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf145', get_index_6, relu, None)
        return store


buf146: ExternKernelSchedulerNode(Convolution)
buf146.writes = [StarDep(name='buf146')]
buf146.unmet_dependencies = [StarDep(name='buf145')]
buf146.met_dependencies = [StarDep(name='arg72_1')]
buf146.node.kernel = aten.convolution


buf148: SchedulerNode(ComputedBuffer)
buf148.writes = 
    [   MemoryDep(name='buf148', index=c0, size=(256, 256)),
        MemoryDep(name='buf148', index=c0, size=(256,))]
buf148.unmet_dependencies = [MemoryDep(name='buf146', index=16*c0 + 4096*c1 + c2, size=(256, 16, 16))]
buf148.met_dependencies = []
buf148.group.device = cpu
buf148.group.iteration = ((256,), (16, 16))
buf148.sizes = ([256], [16, 16])
class buf148_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 16}
    index0 = 16*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf148', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf149: SchedulerNode(ComputedBuffer)
buf149.writes = [MemoryDep(name='buf149', index=c0, size=(256,))]
buf149.unmet_dependencies = [MemoryDep(name='buf148', index=c0, size=(256,))]
buf149.met_dependencies = []
buf149.group.device = cpu
buf149.group.iteration = ((256,), ())
buf149.sizes = ([256], [])
class buf149_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf149', get_index_1, div, None)
        return store


buf150: SchedulerNode(ComputedBuffer)
buf150.writes = 
    [   MemoryDep(name='buf150', index=c0, size=(256, 256)),
        MemoryDep(name='buf150', index=c0, size=(256,))]
buf150.unmet_dependencies = 
    [   MemoryDep(name='buf146', index=16*c0 + 4096*c1 + c2, size=(256, 16, 16)),
        MemoryDep(name='buf149', index=c0, size=(256, 256))]
buf150.met_dependencies = []
buf150.group.device = cpu
buf150.group.iteration = ((256,), (16, 16))
buf150.sizes = ([256], [16, 16])
class buf150_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 16}
    index0 = 16*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf149', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf150', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf151: SchedulerNode(ComputedBuffer)
buf151.writes = [MemoryDep(name='buf151', index=c0, size=(65536,))]
buf151.unmet_dependencies = 
    [   MemoryDep(name='buf146', index=c0, size=(65536,)),
        MemoryDep(name='buf149', index=c1, size=(16, 256, 16)),
        MemoryDep(name='buf150', index=c1, size=(16, 256, 16))]
buf151.met_dependencies = 
    [   MemoryDep(name='arg73_1', index=c1, size=(16, 256, 16)),
        MemoryDep(name='arg74_1', index=c1, size=(16, 256, 16))]
buf151.group.device = cpu
buf151.group.iteration = ((16, 256, 16), ())
buf151.sizes = ([16, 256, 16], [])
class buf151_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 16}
    index0 = 4096*z0 + 16*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf149', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf150', get_index_2)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg73_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg74_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf151', get_index_5, relu, None)
        return store


buf152: ExternKernelSchedulerNode(Convolution)
buf152.writes = [StarDep(name='buf152')]
buf152.unmet_dependencies = [StarDep(name='buf151')]
buf152.met_dependencies = [StarDep(name='arg75_1')]
buf152.node.kernel = aten.convolution


buf154: SchedulerNode(ComputedBuffer)
buf154.writes = 
    [   MemoryDep(name='buf154', index=c0, size=(256, 64)),
        MemoryDep(name='buf154', index=c0, size=(256,))]
buf154.unmet_dependencies = [MemoryDep(name='buf152', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf154.met_dependencies = []
buf154.group.device = cpu
buf154.group.iteration = ((256,), (16, 4))
buf154.sizes = ([256], [16, 4])
class buf154_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf154', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf155: SchedulerNode(ComputedBuffer)
buf155.writes = [MemoryDep(name='buf155', index=c0, size=(256,))]
buf155.unmet_dependencies = [MemoryDep(name='buf154', index=c0, size=(256,))]
buf155.met_dependencies = []
buf155.group.device = cpu
buf155.group.iteration = ((256,), ())
buf155.sizes = ([256], [])
class buf155_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf155', get_index_1, div, None)
        return store


buf156: SchedulerNode(ComputedBuffer)
buf156.writes = 
    [   MemoryDep(name='buf156', index=c0, size=(256, 64)),
        MemoryDep(name='buf156', index=c0, size=(256,))]
buf156.unmet_dependencies = 
    [   MemoryDep(name='buf152', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf155', index=c0, size=(256, 64))]
buf156.met_dependencies = []
buf156.group.device = cpu
buf156.group.iteration = ((256,), (16, 4))
buf156.sizes = ([256], [16, 4])
class buf156_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf155', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf156', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf157: SchedulerNode(ComputedBuffer)
buf157.writes = [MemoryDep(name='buf157', index=c0, size=(16384,))]
buf157.unmet_dependencies = 
    [   MemoryDep(name='buf152', index=c0, size=(16384,)),
        MemoryDep(name='buf155', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf156', index=c1, size=(16, 256, 4))]
buf157.met_dependencies = 
    [   MemoryDep(name='arg76_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg77_1', index=c1, size=(16, 256, 4))]
buf157.group.device = cpu
buf157.group.iteration = ((16, 256, 4), ())
buf157.sizes = ([16, 256, 4], [])
class buf157_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf155', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf156', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg76_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg77_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf157', get_index_5, relu, None)
        return store


buf158: ExternKernelSchedulerNode(Convolution)
buf158.writes = [StarDep(name='buf158')]
buf158.unmet_dependencies = [StarDep(name='buf157')]
buf158.met_dependencies = [StarDep(name='arg78_1')]
buf158.node.kernel = aten.convolution


buf160: SchedulerNode(ComputedBuffer)
buf160.writes = 
    [   MemoryDep(name='buf160', index=c0, size=(1024, 64)),
        MemoryDep(name='buf160', index=c0, size=(1024,))]
buf160.unmet_dependencies = [MemoryDep(name='buf158', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4))]
buf160.met_dependencies = []
buf160.group.device = cpu
buf160.group.iteration = ((1024,), (16, 4))
buf160.sizes = ([1024], [16, 4])
class buf160_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf160', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf161: SchedulerNode(ComputedBuffer)
buf161.writes = [MemoryDep(name='buf161', index=c0, size=(1024,))]
buf161.unmet_dependencies = [MemoryDep(name='buf160', index=c0, size=(1024,))]
buf161.met_dependencies = []
buf161.group.device = cpu
buf161.group.iteration = ((1024,), ())
buf161.sizes = ([1024], [])
class buf161_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf161', get_index_1, div, None)
        return store


buf162: SchedulerNode(ComputedBuffer)
buf162.writes = 
    [   MemoryDep(name='buf162', index=c0, size=(1024, 64)),
        MemoryDep(name='buf162', index=c0, size=(1024,))]
buf162.unmet_dependencies = 
    [   MemoryDep(name='buf158', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4)),
        MemoryDep(name='buf161', index=c0, size=(1024, 64))]
buf162.met_dependencies = []
buf162.group.device = cpu
buf162.group.iteration = ((1024,), (16, 4))
buf162.sizes = ([1024], [16, 4])
class buf162_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf161', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf162', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf163: ExternKernelSchedulerNode(Convolution)
buf163.writes = [StarDep(name='buf163')]
buf163.unmet_dependencies = [StarDep(name='buf145')]
buf163.met_dependencies = [StarDep(name='arg81_1')]
buf163.node.kernel = aten.convolution


buf165: SchedulerNode(ComputedBuffer)
buf165.writes = 
    [   MemoryDep(name='buf165', index=c0, size=(1024, 64)),
        MemoryDep(name='buf165', index=c0, size=(1024,))]
buf165.unmet_dependencies = [MemoryDep(name='buf163', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4))]
buf165.met_dependencies = []
buf165.group.device = cpu
buf165.group.iteration = ((1024,), (16, 4))
buf165.sizes = ([1024], [16, 4])
class buf165_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf165', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf166: SchedulerNode(ComputedBuffer)
buf166.writes = [MemoryDep(name='buf166', index=c0, size=(1024,))]
buf166.unmet_dependencies = [MemoryDep(name='buf165', index=c0, size=(1024,))]
buf166.met_dependencies = []
buf166.group.device = cpu
buf166.group.iteration = ((1024,), ())
buf166.sizes = ([1024], [])
class buf166_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf166', get_index_1, div, None)
        return store


buf167: SchedulerNode(ComputedBuffer)
buf167.writes = 
    [   MemoryDep(name='buf167', index=c0, size=(1024, 64)),
        MemoryDep(name='buf167', index=c0, size=(1024,))]
buf167.unmet_dependencies = 
    [   MemoryDep(name='buf163', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4)),
        MemoryDep(name='buf166', index=c0, size=(1024, 64))]
buf167.met_dependencies = []
buf167.group.device = cpu
buf167.group.iteration = ((1024,), (16, 4))
buf167.sizes = ([1024], [16, 4])
class buf167_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf166', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf167', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf168: SchedulerNode(ComputedBuffer)
buf168.writes = [MemoryDep(name='buf168', index=c0, size=(65536,))]
buf168.unmet_dependencies = 
    [   MemoryDep(name='buf158', index=c0, size=(65536,)),
        MemoryDep(name='buf161', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='buf162', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='buf163', index=c0, size=(65536,)),
        MemoryDep(name='buf166', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='buf167', index=c1, size=(16, 1024, 4))]
buf168.met_dependencies = 
    [   MemoryDep(name='arg79_1', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='arg80_1', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='arg82_1', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='arg83_1', index=c1, size=(16, 1024, 4))]
buf168.group.device = cpu
buf168.group.iteration = ((16, 1024, 4), ())
buf168.sizes = ([16, 1024, 4], [])
class buf168_loop_body:
    var_ranges = {z0: 16, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf161', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf162', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg79_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg80_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf163', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf166', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf167', get_index_7)
        constant_2 = ops.constant(64, torch.float32)
        div_1 = ops.div(load_7, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg82_1', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg83_1', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf168', get_index_10, add_4, None)
        return store


buf169: SchedulerNode(ComputedBuffer)
buf169.writes = [MemoryDep(name='buf169', index=c0, size=(65536,))]
buf169.unmet_dependencies = [MemoryDep(name='buf168', index=c0, size=(65536,))]
buf169.met_dependencies = []
buf169.group.device = cpu
buf169.group.iteration = ((65536,), ())
buf169.sizes = ([65536], [])
class buf169_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf169', get_index_1, relu, None)
        return store


buf170: ExternKernelSchedulerNode(Convolution)
buf170.writes = [StarDep(name='buf170')]
buf170.unmet_dependencies = [StarDep(name='buf169')]
buf170.met_dependencies = [StarDep(name='arg84_1')]
buf170.node.kernel = aten.convolution


buf172: SchedulerNode(ComputedBuffer)
buf172.writes = 
    [   MemoryDep(name='buf172', index=c0, size=(256, 64)),
        MemoryDep(name='buf172', index=c0, size=(256,))]
buf172.unmet_dependencies = [MemoryDep(name='buf170', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf172.met_dependencies = []
buf172.group.device = cpu
buf172.group.iteration = ((256,), (16, 4))
buf172.sizes = ([256], [16, 4])
class buf172_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf172', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf173: SchedulerNode(ComputedBuffer)
buf173.writes = [MemoryDep(name='buf173', index=c0, size=(256,))]
buf173.unmet_dependencies = [MemoryDep(name='buf172', index=c0, size=(256,))]
buf173.met_dependencies = []
buf173.group.device = cpu
buf173.group.iteration = ((256,), ())
buf173.sizes = ([256], [])
class buf173_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf173', get_index_1, div, None)
        return store


buf174: SchedulerNode(ComputedBuffer)
buf174.writes = 
    [   MemoryDep(name='buf174', index=c0, size=(256, 64)),
        MemoryDep(name='buf174', index=c0, size=(256,))]
buf174.unmet_dependencies = 
    [   MemoryDep(name='buf170', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf173', index=c0, size=(256, 64))]
buf174.met_dependencies = []
buf174.group.device = cpu
buf174.group.iteration = ((256,), (16, 4))
buf174.sizes = ([256], [16, 4])
class buf174_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf173', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf174', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf175: SchedulerNode(ComputedBuffer)
buf175.writes = [MemoryDep(name='buf175', index=c0, size=(16384,))]
buf175.unmet_dependencies = 
    [   MemoryDep(name='buf170', index=c0, size=(16384,)),
        MemoryDep(name='buf173', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf174', index=c1, size=(16, 256, 4))]
buf175.met_dependencies = 
    [   MemoryDep(name='arg85_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg86_1', index=c1, size=(16, 256, 4))]
buf175.group.device = cpu
buf175.group.iteration = ((16, 256, 4), ())
buf175.sizes = ([16, 256, 4], [])
class buf175_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf173', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf174', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg85_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg86_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf175', get_index_5, relu, None)
        return store


buf176: ExternKernelSchedulerNode(Convolution)
buf176.writes = [StarDep(name='buf176')]
buf176.unmet_dependencies = [StarDep(name='buf175')]
buf176.met_dependencies = [StarDep(name='arg87_1')]
buf176.node.kernel = aten.convolution


buf178: SchedulerNode(ComputedBuffer)
buf178.writes = 
    [   MemoryDep(name='buf178', index=c0, size=(256, 64)),
        MemoryDep(name='buf178', index=c0, size=(256,))]
buf178.unmet_dependencies = [MemoryDep(name='buf176', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf178.met_dependencies = []
buf178.group.device = cpu
buf178.group.iteration = ((256,), (16, 4))
buf178.sizes = ([256], [16, 4])
class buf178_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf178', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf179: SchedulerNode(ComputedBuffer)
buf179.writes = [MemoryDep(name='buf179', index=c0, size=(256,))]
buf179.unmet_dependencies = [MemoryDep(name='buf178', index=c0, size=(256,))]
buf179.met_dependencies = []
buf179.group.device = cpu
buf179.group.iteration = ((256,), ())
buf179.sizes = ([256], [])
class buf179_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf179', get_index_1, div, None)
        return store


buf180: SchedulerNode(ComputedBuffer)
buf180.writes = 
    [   MemoryDep(name='buf180', index=c0, size=(256, 64)),
        MemoryDep(name='buf180', index=c0, size=(256,))]
buf180.unmet_dependencies = 
    [   MemoryDep(name='buf176', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf179', index=c0, size=(256, 64))]
buf180.met_dependencies = []
buf180.group.device = cpu
buf180.group.iteration = ((256,), (16, 4))
buf180.sizes = ([256], [16, 4])
class buf180_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf179', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf180', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf181: SchedulerNode(ComputedBuffer)
buf181.writes = [MemoryDep(name='buf181', index=c0, size=(16384,))]
buf181.unmet_dependencies = 
    [   MemoryDep(name='buf176', index=c0, size=(16384,)),
        MemoryDep(name='buf179', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf180', index=c1, size=(16, 256, 4))]
buf181.met_dependencies = 
    [   MemoryDep(name='arg88_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg89_1', index=c1, size=(16, 256, 4))]
buf181.group.device = cpu
buf181.group.iteration = ((16, 256, 4), ())
buf181.sizes = ([16, 256, 4], [])
class buf181_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf179', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf180', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg88_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg89_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf181', get_index_5, relu, None)
        return store


buf182: ExternKernelSchedulerNode(Convolution)
buf182.writes = [StarDep(name='buf182')]
buf182.unmet_dependencies = [StarDep(name='buf181')]
buf182.met_dependencies = [StarDep(name='arg90_1')]
buf182.node.kernel = aten.convolution


buf184: SchedulerNode(ComputedBuffer)
buf184.writes = 
    [   MemoryDep(name='buf184', index=c0, size=(1024, 64)),
        MemoryDep(name='buf184', index=c0, size=(1024,))]
buf184.unmet_dependencies = [MemoryDep(name='buf182', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4))]
buf184.met_dependencies = []
buf184.group.device = cpu
buf184.group.iteration = ((1024,), (16, 4))
buf184.sizes = ([1024], [16, 4])
class buf184_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf184', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf185: SchedulerNode(ComputedBuffer)
buf185.writes = [MemoryDep(name='buf185', index=c0, size=(1024,))]
buf185.unmet_dependencies = [MemoryDep(name='buf184', index=c0, size=(1024,))]
buf185.met_dependencies = []
buf185.group.device = cpu
buf185.group.iteration = ((1024,), ())
buf185.sizes = ([1024], [])
class buf185_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf185', get_index_1, div, None)
        return store


buf186: SchedulerNode(ComputedBuffer)
buf186.writes = 
    [   MemoryDep(name='buf186', index=c0, size=(1024, 64)),
        MemoryDep(name='buf186', index=c0, size=(1024,))]
buf186.unmet_dependencies = 
    [   MemoryDep(name='buf182', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4)),
        MemoryDep(name='buf185', index=c0, size=(1024, 64))]
buf186.met_dependencies = []
buf186.group.device = cpu
buf186.group.iteration = ((1024,), (16, 4))
buf186.sizes = ([1024], [16, 4])
class buf186_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf185', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf186', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf187: SchedulerNode(ComputedBuffer)
buf187.writes = [MemoryDep(name='buf187', index=c0, size=(65536,))]
buf187.unmet_dependencies = 
    [   MemoryDep(name='buf169', index=c0, size=(65536,)),
        MemoryDep(name='buf182', index=c0, size=(65536,)),
        MemoryDep(name='buf185', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='buf186', index=c1, size=(16, 1024, 4))]
buf187.met_dependencies = 
    [   MemoryDep(name='arg91_1', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='arg92_1', index=c1, size=(16, 1024, 4))]
buf187.group.device = cpu
buf187.group.iteration = ((16, 1024, 4), ())
buf187.sizes = ([16, 1024, 4], [])
class buf187_loop_body:
    var_ranges = {z0: 16, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf185', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf186', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg91_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg92_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf169', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf187', get_index_6, relu, None)
        return store


buf188: ExternKernelSchedulerNode(Convolution)
buf188.writes = [StarDep(name='buf188')]
buf188.unmet_dependencies = [StarDep(name='buf187')]
buf188.met_dependencies = [StarDep(name='arg93_1')]
buf188.node.kernel = aten.convolution


buf190: SchedulerNode(ComputedBuffer)
buf190.writes = 
    [   MemoryDep(name='buf190', index=c0, size=(256, 64)),
        MemoryDep(name='buf190', index=c0, size=(256,))]
buf190.unmet_dependencies = [MemoryDep(name='buf188', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf190.met_dependencies = []
buf190.group.device = cpu
buf190.group.iteration = ((256,), (16, 4))
buf190.sizes = ([256], [16, 4])
class buf190_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf190', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf191: SchedulerNode(ComputedBuffer)
buf191.writes = [MemoryDep(name='buf191', index=c0, size=(256,))]
buf191.unmet_dependencies = [MemoryDep(name='buf190', index=c0, size=(256,))]
buf191.met_dependencies = []
buf191.group.device = cpu
buf191.group.iteration = ((256,), ())
buf191.sizes = ([256], [])
class buf191_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf191', get_index_1, div, None)
        return store


buf192: SchedulerNode(ComputedBuffer)
buf192.writes = 
    [   MemoryDep(name='buf192', index=c0, size=(256, 64)),
        MemoryDep(name='buf192', index=c0, size=(256,))]
buf192.unmet_dependencies = 
    [   MemoryDep(name='buf188', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf191', index=c0, size=(256, 64))]
buf192.met_dependencies = []
buf192.group.device = cpu
buf192.group.iteration = ((256,), (16, 4))
buf192.sizes = ([256], [16, 4])
class buf192_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf191', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf192', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf193: SchedulerNode(ComputedBuffer)
buf193.writes = [MemoryDep(name='buf193', index=c0, size=(16384,))]
buf193.unmet_dependencies = 
    [   MemoryDep(name='buf188', index=c0, size=(16384,)),
        MemoryDep(name='buf191', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf192', index=c1, size=(16, 256, 4))]
buf193.met_dependencies = 
    [   MemoryDep(name='arg94_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg95_1', index=c1, size=(16, 256, 4))]
buf193.group.device = cpu
buf193.group.iteration = ((16, 256, 4), ())
buf193.sizes = ([16, 256, 4], [])
class buf193_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf191', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf192', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg94_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg95_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf193', get_index_5, relu, None)
        return store


buf194: ExternKernelSchedulerNode(Convolution)
buf194.writes = [StarDep(name='buf194')]
buf194.unmet_dependencies = [StarDep(name='buf193')]
buf194.met_dependencies = [StarDep(name='arg96_1')]
buf194.node.kernel = aten.convolution


buf196: SchedulerNode(ComputedBuffer)
buf196.writes = 
    [   MemoryDep(name='buf196', index=c0, size=(256, 64)),
        MemoryDep(name='buf196', index=c0, size=(256,))]
buf196.unmet_dependencies = [MemoryDep(name='buf194', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf196.met_dependencies = []
buf196.group.device = cpu
buf196.group.iteration = ((256,), (16, 4))
buf196.sizes = ([256], [16, 4])
class buf196_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf196', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf197: SchedulerNode(ComputedBuffer)
buf197.writes = [MemoryDep(name='buf197', index=c0, size=(256,))]
buf197.unmet_dependencies = [MemoryDep(name='buf196', index=c0, size=(256,))]
buf197.met_dependencies = []
buf197.group.device = cpu
buf197.group.iteration = ((256,), ())
buf197.sizes = ([256], [])
class buf197_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf197', get_index_1, div, None)
        return store


buf198: SchedulerNode(ComputedBuffer)
buf198.writes = 
    [   MemoryDep(name='buf198', index=c0, size=(256, 64)),
        MemoryDep(name='buf198', index=c0, size=(256,))]
buf198.unmet_dependencies = 
    [   MemoryDep(name='buf194', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf197', index=c0, size=(256, 64))]
buf198.met_dependencies = []
buf198.group.device = cpu
buf198.group.iteration = ((256,), (16, 4))
buf198.sizes = ([256], [16, 4])
class buf198_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf197', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf198', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf199: SchedulerNode(ComputedBuffer)
buf199.writes = [MemoryDep(name='buf199', index=c0, size=(16384,))]
buf199.unmet_dependencies = 
    [   MemoryDep(name='buf194', index=c0, size=(16384,)),
        MemoryDep(name='buf197', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf198', index=c1, size=(16, 256, 4))]
buf199.met_dependencies = 
    [   MemoryDep(name='arg97_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg98_1', index=c1, size=(16, 256, 4))]
buf199.group.device = cpu
buf199.group.iteration = ((16, 256, 4), ())
buf199.sizes = ([16, 256, 4], [])
class buf199_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf197', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf198', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg97_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg98_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf199', get_index_5, relu, None)
        return store


buf200: ExternKernelSchedulerNode(Convolution)
buf200.writes = [StarDep(name='buf200')]
buf200.unmet_dependencies = [StarDep(name='buf199')]
buf200.met_dependencies = [StarDep(name='arg99_1')]
buf200.node.kernel = aten.convolution


buf202: SchedulerNode(ComputedBuffer)
buf202.writes = 
    [   MemoryDep(name='buf202', index=c0, size=(1024, 64)),
        MemoryDep(name='buf202', index=c0, size=(1024,))]
buf202.unmet_dependencies = [MemoryDep(name='buf200', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4))]
buf202.met_dependencies = []
buf202.group.device = cpu
buf202.group.iteration = ((1024,), (16, 4))
buf202.sizes = ([1024], [16, 4])
class buf202_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf202', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf203: SchedulerNode(ComputedBuffer)
buf203.writes = [MemoryDep(name='buf203', index=c0, size=(1024,))]
buf203.unmet_dependencies = [MemoryDep(name='buf202', index=c0, size=(1024,))]
buf203.met_dependencies = []
buf203.group.device = cpu
buf203.group.iteration = ((1024,), ())
buf203.sizes = ([1024], [])
class buf203_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf203', get_index_1, div, None)
        return store


buf204: SchedulerNode(ComputedBuffer)
buf204.writes = 
    [   MemoryDep(name='buf204', index=c0, size=(1024, 64)),
        MemoryDep(name='buf204', index=c0, size=(1024,))]
buf204.unmet_dependencies = 
    [   MemoryDep(name='buf200', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4)),
        MemoryDep(name='buf203', index=c0, size=(1024, 64))]
buf204.met_dependencies = []
buf204.group.device = cpu
buf204.group.iteration = ((1024,), (16, 4))
buf204.sizes = ([1024], [16, 4])
class buf204_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf203', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf204', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf205: SchedulerNode(ComputedBuffer)
buf205.writes = [MemoryDep(name='buf205', index=c0, size=(65536,))]
buf205.unmet_dependencies = 
    [   MemoryDep(name='buf187', index=c0, size=(65536,)),
        MemoryDep(name='buf200', index=c0, size=(65536,)),
        MemoryDep(name='buf203', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='buf204', index=c1, size=(16, 1024, 4))]
buf205.met_dependencies = 
    [   MemoryDep(name='arg100_1', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='arg101_1', index=c1, size=(16, 1024, 4))]
buf205.group.device = cpu
buf205.group.iteration = ((16, 1024, 4), ())
buf205.sizes = ([16, 1024, 4], [])
class buf205_loop_body:
    var_ranges = {z0: 16, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf203', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf204', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg100_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg101_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf187', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf205', get_index_6, relu, None)
        return store


buf206: ExternKernelSchedulerNode(Convolution)
buf206.writes = [StarDep(name='buf206')]
buf206.unmet_dependencies = [StarDep(name='buf205')]
buf206.met_dependencies = [StarDep(name='arg102_1')]
buf206.node.kernel = aten.convolution


buf208: SchedulerNode(ComputedBuffer)
buf208.writes = 
    [   MemoryDep(name='buf208', index=c0, size=(256, 64)),
        MemoryDep(name='buf208', index=c0, size=(256,))]
buf208.unmet_dependencies = [MemoryDep(name='buf206', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf208.met_dependencies = []
buf208.group.device = cpu
buf208.group.iteration = ((256,), (16, 4))
buf208.sizes = ([256], [16, 4])
class buf208_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf208', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf209: SchedulerNode(ComputedBuffer)
buf209.writes = [MemoryDep(name='buf209', index=c0, size=(256,))]
buf209.unmet_dependencies = [MemoryDep(name='buf208', index=c0, size=(256,))]
buf209.met_dependencies = []
buf209.group.device = cpu
buf209.group.iteration = ((256,), ())
buf209.sizes = ([256], [])
class buf209_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf209', get_index_1, div, None)
        return store


buf210: SchedulerNode(ComputedBuffer)
buf210.writes = 
    [   MemoryDep(name='buf210', index=c0, size=(256, 64)),
        MemoryDep(name='buf210', index=c0, size=(256,))]
buf210.unmet_dependencies = 
    [   MemoryDep(name='buf206', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf209', index=c0, size=(256, 64))]
buf210.met_dependencies = []
buf210.group.device = cpu
buf210.group.iteration = ((256,), (16, 4))
buf210.sizes = ([256], [16, 4])
class buf210_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf209', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf210', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf211: SchedulerNode(ComputedBuffer)
buf211.writes = [MemoryDep(name='buf211', index=c0, size=(16384,))]
buf211.unmet_dependencies = 
    [   MemoryDep(name='buf206', index=c0, size=(16384,)),
        MemoryDep(name='buf209', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf210', index=c1, size=(16, 256, 4))]
buf211.met_dependencies = 
    [   MemoryDep(name='arg103_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg104_1', index=c1, size=(16, 256, 4))]
buf211.group.device = cpu
buf211.group.iteration = ((16, 256, 4), ())
buf211.sizes = ([16, 256, 4], [])
class buf211_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf209', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf210', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg103_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg104_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf211', get_index_5, relu, None)
        return store


buf212: ExternKernelSchedulerNode(Convolution)
buf212.writes = [StarDep(name='buf212')]
buf212.unmet_dependencies = [StarDep(name='buf211')]
buf212.met_dependencies = [StarDep(name='arg105_1')]
buf212.node.kernel = aten.convolution


buf214: SchedulerNode(ComputedBuffer)
buf214.writes = 
    [   MemoryDep(name='buf214', index=c0, size=(256, 64)),
        MemoryDep(name='buf214', index=c0, size=(256,))]
buf214.unmet_dependencies = [MemoryDep(name='buf212', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf214.met_dependencies = []
buf214.group.device = cpu
buf214.group.iteration = ((256,), (16, 4))
buf214.sizes = ([256], [16, 4])
class buf214_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf214', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf215: SchedulerNode(ComputedBuffer)
buf215.writes = [MemoryDep(name='buf215', index=c0, size=(256,))]
buf215.unmet_dependencies = [MemoryDep(name='buf214', index=c0, size=(256,))]
buf215.met_dependencies = []
buf215.group.device = cpu
buf215.group.iteration = ((256,), ())
buf215.sizes = ([256], [])
class buf215_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf215', get_index_1, div, None)
        return store


buf216: SchedulerNode(ComputedBuffer)
buf216.writes = 
    [   MemoryDep(name='buf216', index=c0, size=(256, 64)),
        MemoryDep(name='buf216', index=c0, size=(256,))]
buf216.unmet_dependencies = 
    [   MemoryDep(name='buf212', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf215', index=c0, size=(256, 64))]
buf216.met_dependencies = []
buf216.group.device = cpu
buf216.group.iteration = ((256,), (16, 4))
buf216.sizes = ([256], [16, 4])
class buf216_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf215', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf216', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf217: SchedulerNode(ComputedBuffer)
buf217.writes = [MemoryDep(name='buf217', index=c0, size=(16384,))]
buf217.unmet_dependencies = 
    [   MemoryDep(name='buf212', index=c0, size=(16384,)),
        MemoryDep(name='buf215', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf216', index=c1, size=(16, 256, 4))]
buf217.met_dependencies = 
    [   MemoryDep(name='arg106_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg107_1', index=c1, size=(16, 256, 4))]
buf217.group.device = cpu
buf217.group.iteration = ((16, 256, 4), ())
buf217.sizes = ([16, 256, 4], [])
class buf217_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf215', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf216', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg106_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg107_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf217', get_index_5, relu, None)
        return store


buf218: ExternKernelSchedulerNode(Convolution)
buf218.writes = [StarDep(name='buf218')]
buf218.unmet_dependencies = [StarDep(name='buf217')]
buf218.met_dependencies = [StarDep(name='arg108_1')]
buf218.node.kernel = aten.convolution


buf220: SchedulerNode(ComputedBuffer)
buf220.writes = 
    [   MemoryDep(name='buf220', index=c0, size=(1024, 64)),
        MemoryDep(name='buf220', index=c0, size=(1024,))]
buf220.unmet_dependencies = [MemoryDep(name='buf218', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4))]
buf220.met_dependencies = []
buf220.group.device = cpu
buf220.group.iteration = ((1024,), (16, 4))
buf220.sizes = ([1024], [16, 4])
class buf220_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf220', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf221: SchedulerNode(ComputedBuffer)
buf221.writes = [MemoryDep(name='buf221', index=c0, size=(1024,))]
buf221.unmet_dependencies = [MemoryDep(name='buf220', index=c0, size=(1024,))]
buf221.met_dependencies = []
buf221.group.device = cpu
buf221.group.iteration = ((1024,), ())
buf221.sizes = ([1024], [])
class buf221_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf221', get_index_1, div, None)
        return store


buf222: SchedulerNode(ComputedBuffer)
buf222.writes = 
    [   MemoryDep(name='buf222', index=c0, size=(1024, 64)),
        MemoryDep(name='buf222', index=c0, size=(1024,))]
buf222.unmet_dependencies = 
    [   MemoryDep(name='buf218', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4)),
        MemoryDep(name='buf221', index=c0, size=(1024, 64))]
buf222.met_dependencies = []
buf222.group.device = cpu
buf222.group.iteration = ((1024,), (16, 4))
buf222.sizes = ([1024], [16, 4])
class buf222_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf221', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf222', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf223: SchedulerNode(ComputedBuffer)
buf223.writes = [MemoryDep(name='buf223', index=c0, size=(65536,))]
buf223.unmet_dependencies = 
    [   MemoryDep(name='buf205', index=c0, size=(65536,)),
        MemoryDep(name='buf218', index=c0, size=(65536,)),
        MemoryDep(name='buf221', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='buf222', index=c1, size=(16, 1024, 4))]
buf223.met_dependencies = 
    [   MemoryDep(name='arg109_1', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='arg110_1', index=c1, size=(16, 1024, 4))]
buf223.group.device = cpu
buf223.group.iteration = ((16, 1024, 4), ())
buf223.sizes = ([16, 1024, 4], [])
class buf223_loop_body:
    var_ranges = {z0: 16, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf221', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf222', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg109_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg110_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf205', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf223', get_index_6, relu, None)
        return store


buf224: ExternKernelSchedulerNode(Convolution)
buf224.writes = [StarDep(name='buf224')]
buf224.unmet_dependencies = [StarDep(name='buf223')]
buf224.met_dependencies = [StarDep(name='arg111_1')]
buf224.node.kernel = aten.convolution


buf226: SchedulerNode(ComputedBuffer)
buf226.writes = 
    [   MemoryDep(name='buf226', index=c0, size=(256, 64)),
        MemoryDep(name='buf226', index=c0, size=(256,))]
buf226.unmet_dependencies = [MemoryDep(name='buf224', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf226.met_dependencies = []
buf226.group.device = cpu
buf226.group.iteration = ((256,), (16, 4))
buf226.sizes = ([256], [16, 4])
class buf226_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf226', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf227: SchedulerNode(ComputedBuffer)
buf227.writes = [MemoryDep(name='buf227', index=c0, size=(256,))]
buf227.unmet_dependencies = [MemoryDep(name='buf226', index=c0, size=(256,))]
buf227.met_dependencies = []
buf227.group.device = cpu
buf227.group.iteration = ((256,), ())
buf227.sizes = ([256], [])
class buf227_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf227', get_index_1, div, None)
        return store


buf228: SchedulerNode(ComputedBuffer)
buf228.writes = 
    [   MemoryDep(name='buf228', index=c0, size=(256, 64)),
        MemoryDep(name='buf228', index=c0, size=(256,))]
buf228.unmet_dependencies = 
    [   MemoryDep(name='buf224', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf227', index=c0, size=(256, 64))]
buf228.met_dependencies = []
buf228.group.device = cpu
buf228.group.iteration = ((256,), (16, 4))
buf228.sizes = ([256], [16, 4])
class buf228_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf227', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf228', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf229: SchedulerNode(ComputedBuffer)
buf229.writes = [MemoryDep(name='buf229', index=c0, size=(16384,))]
buf229.unmet_dependencies = 
    [   MemoryDep(name='buf224', index=c0, size=(16384,)),
        MemoryDep(name='buf227', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf228', index=c1, size=(16, 256, 4))]
buf229.met_dependencies = 
    [   MemoryDep(name='arg112_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg113_1', index=c1, size=(16, 256, 4))]
buf229.group.device = cpu
buf229.group.iteration = ((16, 256, 4), ())
buf229.sizes = ([16, 256, 4], [])
class buf229_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf227', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf228', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg112_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg113_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf229', get_index_5, relu, None)
        return store


buf230: ExternKernelSchedulerNode(Convolution)
buf230.writes = [StarDep(name='buf230')]
buf230.unmet_dependencies = [StarDep(name='buf229')]
buf230.met_dependencies = [StarDep(name='arg114_1')]
buf230.node.kernel = aten.convolution


buf232: SchedulerNode(ComputedBuffer)
buf232.writes = 
    [   MemoryDep(name='buf232', index=c0, size=(256, 64)),
        MemoryDep(name='buf232', index=c0, size=(256,))]
buf232.unmet_dependencies = [MemoryDep(name='buf230', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf232.met_dependencies = []
buf232.group.device = cpu
buf232.group.iteration = ((256,), (16, 4))
buf232.sizes = ([256], [16, 4])
class buf232_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf232', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf233: SchedulerNode(ComputedBuffer)
buf233.writes = [MemoryDep(name='buf233', index=c0, size=(256,))]
buf233.unmet_dependencies = [MemoryDep(name='buf232', index=c0, size=(256,))]
buf233.met_dependencies = []
buf233.group.device = cpu
buf233.group.iteration = ((256,), ())
buf233.sizes = ([256], [])
class buf233_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf233', get_index_1, div, None)
        return store


buf234: SchedulerNode(ComputedBuffer)
buf234.writes = 
    [   MemoryDep(name='buf234', index=c0, size=(256, 64)),
        MemoryDep(name='buf234', index=c0, size=(256,))]
buf234.unmet_dependencies = 
    [   MemoryDep(name='buf230', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf233', index=c0, size=(256, 64))]
buf234.met_dependencies = []
buf234.group.device = cpu
buf234.group.iteration = ((256,), (16, 4))
buf234.sizes = ([256], [16, 4])
class buf234_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf233', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf234', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf235: SchedulerNode(ComputedBuffer)
buf235.writes = [MemoryDep(name='buf235', index=c0, size=(16384,))]
buf235.unmet_dependencies = 
    [   MemoryDep(name='buf230', index=c0, size=(16384,)),
        MemoryDep(name='buf233', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf234', index=c1, size=(16, 256, 4))]
buf235.met_dependencies = 
    [   MemoryDep(name='arg115_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg116_1', index=c1, size=(16, 256, 4))]
buf235.group.device = cpu
buf235.group.iteration = ((16, 256, 4), ())
buf235.sizes = ([16, 256, 4], [])
class buf235_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf233', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf234', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg115_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg116_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf235', get_index_5, relu, None)
        return store


buf236: ExternKernelSchedulerNode(Convolution)
buf236.writes = [StarDep(name='buf236')]
buf236.unmet_dependencies = [StarDep(name='buf235')]
buf236.met_dependencies = [StarDep(name='arg117_1')]
buf236.node.kernel = aten.convolution


buf238: SchedulerNode(ComputedBuffer)
buf238.writes = 
    [   MemoryDep(name='buf238', index=c0, size=(1024, 64)),
        MemoryDep(name='buf238', index=c0, size=(1024,))]
buf238.unmet_dependencies = [MemoryDep(name='buf236', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4))]
buf238.met_dependencies = []
buf238.group.device = cpu
buf238.group.iteration = ((1024,), (16, 4))
buf238.sizes = ([1024], [16, 4])
class buf238_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf238', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf239: SchedulerNode(ComputedBuffer)
buf239.writes = [MemoryDep(name='buf239', index=c0, size=(1024,))]
buf239.unmet_dependencies = [MemoryDep(name='buf238', index=c0, size=(1024,))]
buf239.met_dependencies = []
buf239.group.device = cpu
buf239.group.iteration = ((1024,), ())
buf239.sizes = ([1024], [])
class buf239_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf239', get_index_1, div, None)
        return store


buf240: SchedulerNode(ComputedBuffer)
buf240.writes = 
    [   MemoryDep(name='buf240', index=c0, size=(1024, 64)),
        MemoryDep(name='buf240', index=c0, size=(1024,))]
buf240.unmet_dependencies = 
    [   MemoryDep(name='buf236', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4)),
        MemoryDep(name='buf239', index=c0, size=(1024, 64))]
buf240.met_dependencies = []
buf240.group.device = cpu
buf240.group.iteration = ((1024,), (16, 4))
buf240.sizes = ([1024], [16, 4])
class buf240_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf239', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf240', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf241: SchedulerNode(ComputedBuffer)
buf241.writes = [MemoryDep(name='buf241', index=c0, size=(65536,))]
buf241.unmet_dependencies = 
    [   MemoryDep(name='buf223', index=c0, size=(65536,)),
        MemoryDep(name='buf236', index=c0, size=(65536,)),
        MemoryDep(name='buf239', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='buf240', index=c1, size=(16, 1024, 4))]
buf241.met_dependencies = 
    [   MemoryDep(name='arg118_1', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='arg119_1', index=c1, size=(16, 1024, 4))]
buf241.group.device = cpu
buf241.group.iteration = ((16, 1024, 4), ())
buf241.sizes = ([16, 1024, 4], [])
class buf241_loop_body:
    var_ranges = {z0: 16, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf239', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf240', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg118_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg119_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf223', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf241', get_index_6, relu, None)
        return store


buf242: ExternKernelSchedulerNode(Convolution)
buf242.writes = [StarDep(name='buf242')]
buf242.unmet_dependencies = [StarDep(name='buf241')]
buf242.met_dependencies = [StarDep(name='arg120_1')]
buf242.node.kernel = aten.convolution


buf244: SchedulerNode(ComputedBuffer)
buf244.writes = 
    [   MemoryDep(name='buf244', index=c0, size=(256, 64)),
        MemoryDep(name='buf244', index=c0, size=(256,))]
buf244.unmet_dependencies = [MemoryDep(name='buf242', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf244.met_dependencies = []
buf244.group.device = cpu
buf244.group.iteration = ((256,), (16, 4))
buf244.sizes = ([256], [16, 4])
class buf244_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf244', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf245: SchedulerNode(ComputedBuffer)
buf245.writes = [MemoryDep(name='buf245', index=c0, size=(256,))]
buf245.unmet_dependencies = [MemoryDep(name='buf244', index=c0, size=(256,))]
buf245.met_dependencies = []
buf245.group.device = cpu
buf245.group.iteration = ((256,), ())
buf245.sizes = ([256], [])
class buf245_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf245', get_index_1, div, None)
        return store


buf246: SchedulerNode(ComputedBuffer)
buf246.writes = 
    [   MemoryDep(name='buf246', index=c0, size=(256, 64)),
        MemoryDep(name='buf246', index=c0, size=(256,))]
buf246.unmet_dependencies = 
    [   MemoryDep(name='buf242', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf245', index=c0, size=(256, 64))]
buf246.met_dependencies = []
buf246.group.device = cpu
buf246.group.iteration = ((256,), (16, 4))
buf246.sizes = ([256], [16, 4])
class buf246_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf245', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf246', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf247: SchedulerNode(ComputedBuffer)
buf247.writes = [MemoryDep(name='buf247', index=c0, size=(16384,))]
buf247.unmet_dependencies = 
    [   MemoryDep(name='buf242', index=c0, size=(16384,)),
        MemoryDep(name='buf245', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf246', index=c1, size=(16, 256, 4))]
buf247.met_dependencies = 
    [   MemoryDep(name='arg121_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg122_1', index=c1, size=(16, 256, 4))]
buf247.group.device = cpu
buf247.group.iteration = ((16, 256, 4), ())
buf247.sizes = ([16, 256, 4], [])
class buf247_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf245', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf246', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg121_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg122_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf247', get_index_5, relu, None)
        return store


buf248: ExternKernelSchedulerNode(Convolution)
buf248.writes = [StarDep(name='buf248')]
buf248.unmet_dependencies = [StarDep(name='buf247')]
buf248.met_dependencies = [StarDep(name='arg123_1')]
buf248.node.kernel = aten.convolution


buf250: SchedulerNode(ComputedBuffer)
buf250.writes = 
    [   MemoryDep(name='buf250', index=c0, size=(256, 64)),
        MemoryDep(name='buf250', index=c0, size=(256,))]
buf250.unmet_dependencies = [MemoryDep(name='buf248', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4))]
buf250.met_dependencies = []
buf250.group.device = cpu
buf250.group.iteration = ((256,), (16, 4))
buf250.sizes = ([256], [16, 4])
class buf250_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf250', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf251: SchedulerNode(ComputedBuffer)
buf251.writes = [MemoryDep(name='buf251', index=c0, size=(256,))]
buf251.unmet_dependencies = [MemoryDep(name='buf250', index=c0, size=(256,))]
buf251.met_dependencies = []
buf251.group.device = cpu
buf251.group.iteration = ((256,), ())
buf251.sizes = ([256], [])
class buf251_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf251', get_index_1, div, None)
        return store


buf252: SchedulerNode(ComputedBuffer)
buf252.writes = 
    [   MemoryDep(name='buf252', index=c0, size=(256, 64)),
        MemoryDep(name='buf252', index=c0, size=(256,))]
buf252.unmet_dependencies = 
    [   MemoryDep(name='buf248', index=4*c0 + 1024*c1 + c2, size=(256, 16, 4)),
        MemoryDep(name='buf251', index=c0, size=(256, 64))]
buf252.met_dependencies = []
buf252.group.device = cpu
buf252.group.iteration = ((256,), (16, 4))
buf252.sizes = ([256], [16, 4])
class buf252_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 4}
    index0 = 4*z0 + 1024*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf251', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf252', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf253: SchedulerNode(ComputedBuffer)
buf253.writes = [MemoryDep(name='buf253', index=c0, size=(16384,))]
buf253.unmet_dependencies = 
    [   MemoryDep(name='buf248', index=c0, size=(16384,)),
        MemoryDep(name='buf251', index=c1, size=(16, 256, 4)),
        MemoryDep(name='buf252', index=c1, size=(16, 256, 4))]
buf253.met_dependencies = 
    [   MemoryDep(name='arg124_1', index=c1, size=(16, 256, 4)),
        MemoryDep(name='arg125_1', index=c1, size=(16, 256, 4))]
buf253.group.device = cpu
buf253.group.iteration = ((16, 256, 4), ())
buf253.sizes = ([16, 256, 4], [])
class buf253_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf251', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf252', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg124_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg125_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf253', get_index_5, relu, None)
        return store


buf254: ExternKernelSchedulerNode(Convolution)
buf254.writes = [StarDep(name='buf254')]
buf254.unmet_dependencies = [StarDep(name='buf253')]
buf254.met_dependencies = [StarDep(name='arg126_1')]
buf254.node.kernel = aten.convolution


buf256: SchedulerNode(ComputedBuffer)
buf256.writes = 
    [   MemoryDep(name='buf256', index=c0, size=(1024, 64)),
        MemoryDep(name='buf256', index=c0, size=(1024,))]
buf256.unmet_dependencies = [MemoryDep(name='buf254', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4))]
buf256.met_dependencies = []
buf256.group.device = cpu
buf256.group.iteration = ((1024,), (16, 4))
buf256.sizes = ([1024], [16, 4])
class buf256_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf256', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf257: SchedulerNode(ComputedBuffer)
buf257.writes = [MemoryDep(name='buf257', index=c0, size=(1024,))]
buf257.unmet_dependencies = [MemoryDep(name='buf256', index=c0, size=(1024,))]
buf257.met_dependencies = []
buf257.group.device = cpu
buf257.group.iteration = ((1024,), ())
buf257.sizes = ([1024], [])
class buf257_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf257', get_index_1, div, None)
        return store


buf258: SchedulerNode(ComputedBuffer)
buf258.writes = 
    [   MemoryDep(name='buf258', index=c0, size=(1024, 64)),
        MemoryDep(name='buf258', index=c0, size=(1024,))]
buf258.unmet_dependencies = 
    [   MemoryDep(name='buf254', index=4*c0 + 4096*c1 + c2, size=(1024, 16, 4)),
        MemoryDep(name='buf257', index=c0, size=(1024, 64))]
buf258.met_dependencies = []
buf258.group.device = cpu
buf258.group.iteration = ((1024,), (16, 4))
buf258.sizes = ([1024], [16, 4])
class buf258_loop_body:
    var_ranges = {z0: 1024, z1: 16, z2: 4}
    index0 = 4*z0 + 4096*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf257', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf258', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf259: SchedulerNode(ComputedBuffer)
buf259.writes = [MemoryDep(name='buf259', index=c0, size=(65536,))]
buf259.unmet_dependencies = 
    [   MemoryDep(name='buf241', index=c0, size=(65536,)),
        MemoryDep(name='buf254', index=c0, size=(65536,)),
        MemoryDep(name='buf257', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='buf258', index=c1, size=(16, 1024, 4))]
buf259.met_dependencies = 
    [   MemoryDep(name='arg127_1', index=c1, size=(16, 1024, 4)),
        MemoryDep(name='arg128_1', index=c1, size=(16, 1024, 4))]
buf259.group.device = cpu
buf259.group.iteration = ((16, 1024, 4), ())
buf259.sizes = ([16, 1024, 4], [])
class buf259_loop_body:
    var_ranges = {z0: 16, z1: 1024, z2: 4}
    index0 = 4096*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf257', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf258', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg127_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg128_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf241', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf259', get_index_6, relu, None)
        return store


buf260: ExternKernelSchedulerNode(Convolution)
buf260.writes = [StarDep(name='buf260')]
buf260.unmet_dependencies = [StarDep(name='buf259')]
buf260.met_dependencies = [StarDep(name='arg129_1')]
buf260.node.kernel = aten.convolution


buf262: SchedulerNode(ComputedBuffer)
buf262.writes = 
    [   MemoryDep(name='buf262', index=c0, size=(512, 64)),
        MemoryDep(name='buf262', index=c0, size=(512,))]
buf262.unmet_dependencies = [MemoryDep(name='buf260', index=4*c0 + 2048*c1 + c2, size=(512, 16, 4))]
buf262.met_dependencies = []
buf262.group.device = cpu
buf262.group.iteration = ((512,), (16, 4))
buf262.sizes = ([512], [16, 4])
class buf262_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 4}
    index0 = 4*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf262', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf263: SchedulerNode(ComputedBuffer)
buf263.writes = [MemoryDep(name='buf263', index=c0, size=(512,))]
buf263.unmet_dependencies = [MemoryDep(name='buf262', index=c0, size=(512,))]
buf263.met_dependencies = []
buf263.group.device = cpu
buf263.group.iteration = ((512,), ())
buf263.sizes = ([512], [])
class buf263_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf262', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf263', get_index_1, div, None)
        return store


buf264: SchedulerNode(ComputedBuffer)
buf264.writes = 
    [   MemoryDep(name='buf264', index=c0, size=(512, 64)),
        MemoryDep(name='buf264', index=c0, size=(512,))]
buf264.unmet_dependencies = 
    [   MemoryDep(name='buf260', index=4*c0 + 2048*c1 + c2, size=(512, 16, 4)),
        MemoryDep(name='buf263', index=c0, size=(512, 64))]
buf264.met_dependencies = []
buf264.group.device = cpu
buf264.group.iteration = ((512,), (16, 4))
buf264.sizes = ([512], [16, 4])
class buf264_loop_body:
    var_ranges = {z0: 512, z1: 16, z2: 4}
    index0 = 4*z0 + 2048*z1 + z2
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf263', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf264', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf265: SchedulerNode(ComputedBuffer)
buf265.writes = [MemoryDep(name='buf265', index=c0, size=(32768,))]
buf265.unmet_dependencies = 
    [   MemoryDep(name='buf260', index=c0, size=(32768,)),
        MemoryDep(name='buf263', index=c1, size=(16, 512, 4)),
        MemoryDep(name='buf264', index=c1, size=(16, 512, 4))]
buf265.met_dependencies = 
    [   MemoryDep(name='arg130_1', index=c1, size=(16, 512, 4)),
        MemoryDep(name='arg131_1', index=c1, size=(16, 512, 4))]
buf265.group.device = cpu
buf265.group.iteration = ((16, 512, 4), ())
buf265.sizes = ([16, 512, 4], [])
class buf265_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 4}
    index0 = 2048*z0 + 4*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf263', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf264', get_index_2)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg130_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg131_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf265', get_index_5, relu, None)
        return store


buf266: ExternKernelSchedulerNode(Convolution)
buf266.writes = [StarDep(name='buf266')]
buf266.unmet_dependencies = [StarDep(name='buf265')]
buf266.met_dependencies = [StarDep(name='arg132_1')]
buf266.node.kernel = aten.convolution


buf268: SchedulerNode(ComputedBuffer)
buf268.writes = 
    [   MemoryDep(name='buf268', index=c0, size=(512, 16)),
        MemoryDep(name='buf268', index=c0, size=(512,))]
buf268.unmet_dependencies = [MemoryDep(name='buf266', index=c0 + 512*c1, size=(512, 16))]
buf268.met_dependencies = []
buf268.group.device = cpu
buf268.group.iteration = ((512,), (16,))
buf268.sizes = ([512], [16])
class buf268_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf268', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf269: SchedulerNode(ComputedBuffer)
buf269.writes = [MemoryDep(name='buf269', index=c0, size=(512,))]
buf269.unmet_dependencies = [MemoryDep(name='buf268', index=c0, size=(512,))]
buf269.met_dependencies = []
buf269.group.device = cpu
buf269.group.iteration = ((512,), ())
buf269.sizes = ([512], [])
class buf269_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf269', get_index_1, div, None)
        return store


buf270: SchedulerNode(ComputedBuffer)
buf270.writes = 
    [   MemoryDep(name='buf270', index=c0, size=(512, 16)),
        MemoryDep(name='buf270', index=c0, size=(512,))]
buf270.unmet_dependencies = 
    [   MemoryDep(name='buf266', index=c0 + 512*c1, size=(512, 16)),
        MemoryDep(name='buf269', index=c0, size=(512, 16))]
buf270.met_dependencies = []
buf270.group.device = cpu
buf270.group.iteration = ((512,), (16,))
buf270.sizes = ([512], [16])
class buf270_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf269', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf270', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf271: SchedulerNode(ComputedBuffer)
buf271.writes = [MemoryDep(name='buf271', index=c0, size=(8192,))]
buf271.unmet_dependencies = 
    [   MemoryDep(name='buf266', index=c0, size=(8192,)),
        MemoryDep(name='buf269', index=c1, size=(16, 512)),
        MemoryDep(name='buf270', index=c1, size=(16, 512))]
buf271.met_dependencies = 
    [   MemoryDep(name='arg133_1', index=c1, size=(16, 512)),
        MemoryDep(name='arg134_1', index=c1, size=(16, 512))]
buf271.group.device = cpu
buf271.group.iteration = ((16, 512), ())
buf271.sizes = ([16, 512], [])
class buf271_loop_body:
    var_ranges = {z0: 16, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf269', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf270', get_index_2)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg133_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg134_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf271', get_index_5, relu, None)
        return store


buf272: ExternKernelSchedulerNode(Convolution)
buf272.writes = [StarDep(name='buf272')]
buf272.unmet_dependencies = [StarDep(name='buf271')]
buf272.met_dependencies = [StarDep(name='arg135_1')]
buf272.node.kernel = aten.convolution


buf274: SchedulerNode(ComputedBuffer)
buf274.writes = 
    [   MemoryDep(name='buf274', index=c0, size=(2048, 16)),
        MemoryDep(name='buf274', index=c0, size=(2048,))]
buf274.unmet_dependencies = [MemoryDep(name='buf272', index=c0 + 2048*c1, size=(2048, 16))]
buf274.met_dependencies = []
buf274.group.device = cpu
buf274.group.iteration = ((2048,), (16,))
buf274.sizes = ([2048], [16])
class buf274_loop_body:
    var_ranges = {z0: 2048, z1: 16}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf274', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf275: SchedulerNode(ComputedBuffer)
buf275.writes = [MemoryDep(name='buf275', index=c0, size=(2048,))]
buf275.unmet_dependencies = [MemoryDep(name='buf274', index=c0, size=(2048,))]
buf275.met_dependencies = []
buf275.group.device = cpu
buf275.group.iteration = ((2048,), ())
buf275.sizes = ([2048], [])
class buf275_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf275', get_index_1, div, None)
        return store


buf276: SchedulerNode(ComputedBuffer)
buf276.writes = 
    [   MemoryDep(name='buf276', index=c0, size=(2048, 16)),
        MemoryDep(name='buf276', index=c0, size=(2048,))]
buf276.unmet_dependencies = 
    [   MemoryDep(name='buf272', index=c0 + 2048*c1, size=(2048, 16)),
        MemoryDep(name='buf275', index=c0, size=(2048, 16))]
buf276.met_dependencies = []
buf276.group.device = cpu
buf276.group.iteration = ((2048,), (16,))
buf276.sizes = ([2048], [16])
class buf276_loop_body:
    var_ranges = {z0: 2048, z1: 16}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf275', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf276', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf277: ExternKernelSchedulerNode(Convolution)
buf277.writes = [StarDep(name='buf277')]
buf277.unmet_dependencies = [StarDep(name='buf259')]
buf277.met_dependencies = [StarDep(name='arg138_1')]
buf277.node.kernel = aten.convolution


buf279: SchedulerNode(ComputedBuffer)
buf279.writes = 
    [   MemoryDep(name='buf279', index=c0, size=(2048, 16)),
        MemoryDep(name='buf279', index=c0, size=(2048,))]
buf279.unmet_dependencies = [MemoryDep(name='buf277', index=c0 + 2048*c1, size=(2048, 16))]
buf279.met_dependencies = []
buf279.group.device = cpu
buf279.group.iteration = ((2048,), (16,))
buf279.sizes = ([2048], [16])
class buf279_loop_body:
    var_ranges = {z0: 2048, z1: 16}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf279', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf280: SchedulerNode(ComputedBuffer)
buf280.writes = [MemoryDep(name='buf280', index=c0, size=(2048,))]
buf280.unmet_dependencies = [MemoryDep(name='buf279', index=c0, size=(2048,))]
buf280.met_dependencies = []
buf280.group.device = cpu
buf280.group.iteration = ((2048,), ())
buf280.sizes = ([2048], [])
class buf280_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf280', get_index_1, div, None)
        return store


buf281: SchedulerNode(ComputedBuffer)
buf281.writes = 
    [   MemoryDep(name='buf281', index=c0, size=(2048, 16)),
        MemoryDep(name='buf281', index=c0, size=(2048,))]
buf281.unmet_dependencies = 
    [   MemoryDep(name='buf277', index=c0 + 2048*c1, size=(2048, 16)),
        MemoryDep(name='buf280', index=c0, size=(2048, 16))]
buf281.met_dependencies = []
buf281.group.device = cpu
buf281.group.iteration = ((2048,), (16,))
buf281.sizes = ([2048], [16])
class buf281_loop_body:
    var_ranges = {z0: 2048, z1: 16}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf280', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf281', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf282: SchedulerNode(ComputedBuffer)
buf282.writes = [MemoryDep(name='buf282', index=c0, size=(32768,))]
buf282.unmet_dependencies = 
    [   MemoryDep(name='buf272', index=c0, size=(32768,)),
        MemoryDep(name='buf275', index=c1, size=(16, 2048)),
        MemoryDep(name='buf276', index=c1, size=(16, 2048)),
        MemoryDep(name='buf277', index=c0, size=(32768,)),
        MemoryDep(name='buf280', index=c1, size=(16, 2048)),
        MemoryDep(name='buf281', index=c1, size=(16, 2048))]
buf282.met_dependencies = 
    [   MemoryDep(name='arg136_1', index=c1, size=(16, 2048)),
        MemoryDep(name='arg137_1', index=c1, size=(16, 2048)),
        MemoryDep(name='arg139_1', index=c1, size=(16, 2048)),
        MemoryDep(name='arg140_1', index=c1, size=(16, 2048))]
buf282.group.device = cpu
buf282.group.iteration = ((16, 2048), ())
buf282.sizes = ([16, 2048], [])
class buf282_loop_body:
    var_ranges = {z0: 16, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf275', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf276', get_index_2)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg136_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg137_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf277', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf280', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf281', get_index_7)
        constant_2 = ops.constant(16, torch.float32)
        div_1 = ops.div(load_7, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(div_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg139_1', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg140_1', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf282', get_index_10, add_4, None)
        return store


buf283: SchedulerNode(ComputedBuffer)
buf283.writes = [MemoryDep(name='buf283', index=c0, size=(32768,))]
buf283.unmet_dependencies = [MemoryDep(name='buf282', index=c0, size=(32768,))]
buf283.met_dependencies = []
buf283.group.device = cpu
buf283.group.iteration = ((32768,), ())
buf283.sizes = ([32768], [])
class buf283_loop_body:
    var_ranges = {z0: 32768}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf282', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf283', get_index_1, relu, None)
        return store


buf284: ExternKernelSchedulerNode(Convolution)
buf284.writes = [StarDep(name='buf284')]
buf284.unmet_dependencies = [StarDep(name='buf283')]
buf284.met_dependencies = [StarDep(name='arg141_1')]
buf284.node.kernel = aten.convolution


buf286: SchedulerNode(ComputedBuffer)
buf286.writes = 
    [   MemoryDep(name='buf286', index=c0, size=(512, 16)),
        MemoryDep(name='buf286', index=c0, size=(512,))]
buf286.unmet_dependencies = [MemoryDep(name='buf284', index=c0 + 512*c1, size=(512, 16))]
buf286.met_dependencies = []
buf286.group.device = cpu
buf286.group.iteration = ((512,), (16,))
buf286.sizes = ([512], [16])
class buf286_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf286', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf287: SchedulerNode(ComputedBuffer)
buf287.writes = [MemoryDep(name='buf287', index=c0, size=(512,))]
buf287.unmet_dependencies = [MemoryDep(name='buf286', index=c0, size=(512,))]
buf287.met_dependencies = []
buf287.group.device = cpu
buf287.group.iteration = ((512,), ())
buf287.sizes = ([512], [])
class buf287_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf287', get_index_1, div, None)
        return store


buf288: SchedulerNode(ComputedBuffer)
buf288.writes = 
    [   MemoryDep(name='buf288', index=c0, size=(512, 16)),
        MemoryDep(name='buf288', index=c0, size=(512,))]
buf288.unmet_dependencies = 
    [   MemoryDep(name='buf284', index=c0 + 512*c1, size=(512, 16)),
        MemoryDep(name='buf287', index=c0, size=(512, 16))]
buf288.met_dependencies = []
buf288.group.device = cpu
buf288.group.iteration = ((512,), (16,))
buf288.sizes = ([512], [16])
class buf288_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf287', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf288', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf289: SchedulerNode(ComputedBuffer)
buf289.writes = [MemoryDep(name='buf289', index=c0, size=(8192,))]
buf289.unmet_dependencies = 
    [   MemoryDep(name='buf284', index=c0, size=(8192,)),
        MemoryDep(name='buf287', index=c1, size=(16, 512)),
        MemoryDep(name='buf288', index=c1, size=(16, 512))]
buf289.met_dependencies = 
    [   MemoryDep(name='arg142_1', index=c1, size=(16, 512)),
        MemoryDep(name='arg143_1', index=c1, size=(16, 512))]
buf289.group.device = cpu
buf289.group.iteration = ((16, 512), ())
buf289.sizes = ([16, 512], [])
class buf289_loop_body:
    var_ranges = {z0: 16, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf287', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf288', get_index_2)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg142_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg143_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf289', get_index_5, relu, None)
        return store


buf290: ExternKernelSchedulerNode(Convolution)
buf290.writes = [StarDep(name='buf290')]
buf290.unmet_dependencies = [StarDep(name='buf289')]
buf290.met_dependencies = [StarDep(name='arg144_1')]
buf290.node.kernel = aten.convolution


buf292: SchedulerNode(ComputedBuffer)
buf292.writes = 
    [   MemoryDep(name='buf292', index=c0, size=(512, 16)),
        MemoryDep(name='buf292', index=c0, size=(512,))]
buf292.unmet_dependencies = [MemoryDep(name='buf290', index=c0 + 512*c1, size=(512, 16))]
buf292.met_dependencies = []
buf292.group.device = cpu
buf292.group.iteration = ((512,), (16,))
buf292.sizes = ([512], [16])
class buf292_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf292', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf293: SchedulerNode(ComputedBuffer)
buf293.writes = [MemoryDep(name='buf293', index=c0, size=(512,))]
buf293.unmet_dependencies = [MemoryDep(name='buf292', index=c0, size=(512,))]
buf293.met_dependencies = []
buf293.group.device = cpu
buf293.group.iteration = ((512,), ())
buf293.sizes = ([512], [])
class buf293_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf293', get_index_1, div, None)
        return store


buf294: SchedulerNode(ComputedBuffer)
buf294.writes = 
    [   MemoryDep(name='buf294', index=c0, size=(512, 16)),
        MemoryDep(name='buf294', index=c0, size=(512,))]
buf294.unmet_dependencies = 
    [   MemoryDep(name='buf290', index=c0 + 512*c1, size=(512, 16)),
        MemoryDep(name='buf293', index=c0, size=(512, 16))]
buf294.met_dependencies = []
buf294.group.device = cpu
buf294.group.iteration = ((512,), (16,))
buf294.sizes = ([512], [16])
class buf294_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf293', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf294', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf295: SchedulerNode(ComputedBuffer)
buf295.writes = [MemoryDep(name='buf295', index=c0, size=(8192,))]
buf295.unmet_dependencies = 
    [   MemoryDep(name='buf290', index=c0, size=(8192,)),
        MemoryDep(name='buf293', index=c1, size=(16, 512)),
        MemoryDep(name='buf294', index=c1, size=(16, 512))]
buf295.met_dependencies = 
    [   MemoryDep(name='arg145_1', index=c1, size=(16, 512)),
        MemoryDep(name='arg146_1', index=c1, size=(16, 512))]
buf295.group.device = cpu
buf295.group.iteration = ((16, 512), ())
buf295.sizes = ([16, 512], [])
class buf295_loop_body:
    var_ranges = {z0: 16, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf293', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf294', get_index_2)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg145_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg146_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf295', get_index_5, relu, None)
        return store


buf296: ExternKernelSchedulerNode(Convolution)
buf296.writes = [StarDep(name='buf296')]
buf296.unmet_dependencies = [StarDep(name='buf295')]
buf296.met_dependencies = [StarDep(name='arg147_1')]
buf296.node.kernel = aten.convolution


buf298: SchedulerNode(ComputedBuffer)
buf298.writes = 
    [   MemoryDep(name='buf298', index=c0, size=(2048, 16)),
        MemoryDep(name='buf298', index=c0, size=(2048,))]
buf298.unmet_dependencies = [MemoryDep(name='buf296', index=c0 + 2048*c1, size=(2048, 16))]
buf298.met_dependencies = []
buf298.group.device = cpu
buf298.group.iteration = ((2048,), (16,))
buf298.sizes = ([2048], [16])
class buf298_loop_body:
    var_ranges = {z0: 2048, z1: 16}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf298', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf299: SchedulerNode(ComputedBuffer)
buf299.writes = [MemoryDep(name='buf299', index=c0, size=(2048,))]
buf299.unmet_dependencies = [MemoryDep(name='buf298', index=c0, size=(2048,))]
buf299.met_dependencies = []
buf299.group.device = cpu
buf299.group.iteration = ((2048,), ())
buf299.sizes = ([2048], [])
class buf299_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf299', get_index_1, div, None)
        return store


buf300: SchedulerNode(ComputedBuffer)
buf300.writes = 
    [   MemoryDep(name='buf300', index=c0, size=(2048, 16)),
        MemoryDep(name='buf300', index=c0, size=(2048,))]
buf300.unmet_dependencies = 
    [   MemoryDep(name='buf296', index=c0 + 2048*c1, size=(2048, 16)),
        MemoryDep(name='buf299', index=c0, size=(2048, 16))]
buf300.met_dependencies = []
buf300.group.device = cpu
buf300.group.iteration = ((2048,), (16,))
buf300.sizes = ([2048], [16])
class buf300_loop_body:
    var_ranges = {z0: 2048, z1: 16}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf299', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf300', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf301: SchedulerNode(ComputedBuffer)
buf301.writes = [MemoryDep(name='buf301', index=c0, size=(32768,))]
buf301.unmet_dependencies = 
    [   MemoryDep(name='buf283', index=c0, size=(32768,)),
        MemoryDep(name='buf296', index=c0, size=(32768,)),
        MemoryDep(name='buf299', index=c1, size=(16, 2048)),
        MemoryDep(name='buf300', index=c1, size=(16, 2048))]
buf301.met_dependencies = 
    [   MemoryDep(name='arg148_1', index=c1, size=(16, 2048)),
        MemoryDep(name='arg149_1', index=c1, size=(16, 2048))]
buf301.group.device = cpu
buf301.group.iteration = ((16, 2048), ())
buf301.sizes = ([16, 2048], [])
class buf301_loop_body:
    var_ranges = {z0: 16, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf299', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf300', get_index_2)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg148_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg149_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf283', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf301', get_index_6, relu, None)
        return store


buf302: ExternKernelSchedulerNode(Convolution)
buf302.writes = [StarDep(name='buf302')]
buf302.unmet_dependencies = [StarDep(name='buf301')]
buf302.met_dependencies = [StarDep(name='arg150_1')]
buf302.node.kernel = aten.convolution


buf304: SchedulerNode(ComputedBuffer)
buf304.writes = 
    [   MemoryDep(name='buf304', index=c0, size=(512, 16)),
        MemoryDep(name='buf304', index=c0, size=(512,))]
buf304.unmet_dependencies = [MemoryDep(name='buf302', index=c0 + 512*c1, size=(512, 16))]
buf304.met_dependencies = []
buf304.group.device = cpu
buf304.group.iteration = ((512,), (16,))
buf304.sizes = ([512], [16])
class buf304_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf304', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf305: SchedulerNode(ComputedBuffer)
buf305.writes = [MemoryDep(name='buf305', index=c0, size=(512,))]
buf305.unmet_dependencies = [MemoryDep(name='buf304', index=c0, size=(512,))]
buf305.met_dependencies = []
buf305.group.device = cpu
buf305.group.iteration = ((512,), ())
buf305.sizes = ([512], [])
class buf305_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf304', get_index)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf305', get_index_1, div, None)
        return store


buf306: SchedulerNode(ComputedBuffer)
buf306.writes = 
    [   MemoryDep(name='buf306', index=c0, size=(512, 16)),
        MemoryDep(name='buf306', index=c0, size=(512,))]
buf306.unmet_dependencies = 
    [   MemoryDep(name='buf302', index=c0 + 512*c1, size=(512, 16)),
        MemoryDep(name='buf305', index=c0, size=(512, 16))]
buf306.met_dependencies = []
buf306.group.device = cpu
buf306.group.iteration = ((512,), (16,))
buf306.sizes = ([512], [16])
class buf306_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf305', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf306', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf307: SchedulerNode(ComputedBuffer)
buf307.writes = [MemoryDep(name='buf307', index=c0, size=(8192,))]
buf307.unmet_dependencies = 
    [   MemoryDep(name='buf302', index=c0, size=(8192,)),
        MemoryDep(name='buf305', index=c1, size=(16, 512)),
        MemoryDep(name='buf306', index=c1, size=(16, 512))]
buf307.met_dependencies = 
    [   MemoryDep(name='arg151_1', index=c1, size=(16, 512)),
        MemoryDep(name='arg152_1', index=c1, size=(16, 512))]
buf307.group.device = cpu
buf307.group.iteration = ((16, 512), ())
buf307.sizes = ([16, 512], [])
class buf307_loop_body:
    var_ranges = {z0: 16, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf305', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf306', get_index_2)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg151_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg152_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf307', get_index_5, relu, None)
        return store


buf308: ExternKernelSchedulerNode(Convolution)
buf308.writes = [StarDep(name='buf308')]
buf308.unmet_dependencies = [StarDep(name='buf307')]
buf308.met_dependencies = [StarDep(name='arg153_1')]
buf308.node.kernel = aten.convolution


buf310: SchedulerNode(ComputedBuffer)
buf310.writes = 
    [   MemoryDep(name='buf310', index=c0, size=(512, 16)),
        MemoryDep(name='buf310', index=c0, size=(512,))]
buf310.unmet_dependencies = [MemoryDep(name='buf308', index=c0 + 512*c1, size=(512, 16))]
buf310.met_dependencies = []
buf310.group.device = cpu
buf310.group.iteration = ((512,), (16,))
buf310.sizes = ([512], [16])
class buf310_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf310', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf311: SchedulerNode(ComputedBuffer)
buf311.writes = [MemoryDep(name='buf311', index=c0, size=(512,))]
buf311.unmet_dependencies = [MemoryDep(name='buf310', index=c0, size=(512,))]
buf311.met_dependencies = []
buf311.group.device = cpu
buf311.group.iteration = ((512,), ())
buf311.sizes = ([512], [])
class buf311_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf310', get_index)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf311', get_index_1, div, None)
        return store


buf312: SchedulerNode(ComputedBuffer)
buf312.writes = 
    [   MemoryDep(name='buf312', index=c0, size=(512, 16)),
        MemoryDep(name='buf312', index=c0, size=(512,))]
buf312.unmet_dependencies = 
    [   MemoryDep(name='buf308', index=c0 + 512*c1, size=(512, 16)),
        MemoryDep(name='buf311', index=c0, size=(512, 16))]
buf312.met_dependencies = []
buf312.group.device = cpu
buf312.group.iteration = ((512,), (16,))
buf312.sizes = ([512], [16])
class buf312_loop_body:
    var_ranges = {z0: 512, z1: 16}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf311', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf312', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf313: SchedulerNode(ComputedBuffer)
buf313.writes = [MemoryDep(name='buf313', index=c0, size=(8192,))]
buf313.unmet_dependencies = 
    [   MemoryDep(name='buf308', index=c0, size=(8192,)),
        MemoryDep(name='buf311', index=c1, size=(16, 512)),
        MemoryDep(name='buf312', index=c1, size=(16, 512))]
buf313.met_dependencies = 
    [   MemoryDep(name='arg154_1', index=c1, size=(16, 512)),
        MemoryDep(name='arg155_1', index=c1, size=(16, 512))]
buf313.group.device = cpu
buf313.group.iteration = ((16, 512), ())
buf313.sizes = ([16, 512], [])
class buf313_loop_body:
    var_ranges = {z0: 16, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf311', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf312', get_index_2)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg154_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg155_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf313', get_index_5, relu, None)
        return store


buf314: ExternKernelSchedulerNode(Convolution)
buf314.writes = [StarDep(name='buf314')]
buf314.unmet_dependencies = [StarDep(name='buf313')]
buf314.met_dependencies = [StarDep(name='arg156_1')]
buf314.node.kernel = aten.convolution


buf316: SchedulerNode(ComputedBuffer)
buf316.writes = 
    [   MemoryDep(name='buf316', index=c0, size=(2048, 16)),
        MemoryDep(name='buf316', index=c0, size=(2048,))]
buf316.unmet_dependencies = [MemoryDep(name='buf314', index=c0 + 2048*c1, size=(2048, 16))]
buf316.met_dependencies = []
buf316.group.device = cpu
buf316.group.iteration = ((2048,), (16,))
buf316.sizes = ([2048], [16])
class buf316_loop_body:
    var_ranges = {z0: 2048, z1: 16}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf316', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf317: SchedulerNode(ComputedBuffer)
buf317.writes = [MemoryDep(name='buf317', index=c0, size=(2048,))]
buf317.unmet_dependencies = [MemoryDep(name='buf316', index=c0, size=(2048,))]
buf317.met_dependencies = []
buf317.group.device = cpu
buf317.group.iteration = ((2048,), ())
buf317.sizes = ([2048], [])
class buf317_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf316', get_index)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf317', get_index_1, div, None)
        return store


buf318: SchedulerNode(ComputedBuffer)
buf318.writes = 
    [   MemoryDep(name='buf318', index=c0, size=(2048, 16)),
        MemoryDep(name='buf318', index=c0, size=(2048,))]
buf318.unmet_dependencies = 
    [   MemoryDep(name='buf314', index=c0 + 2048*c1, size=(2048, 16)),
        MemoryDep(name='buf317', index=c0, size=(2048, 16))]
buf318.met_dependencies = []
buf318.group.device = cpu
buf318.group.iteration = ((2048,), (16,))
buf318.sizes = ([2048], [16])
class buf318_loop_body:
    var_ranges = {z0: 2048, z1: 16}
    index0 = z0 + 2048*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf317', get_index_1)
        sub = ops.sub(load, load_1)
        square = ops.square(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf318', torch.float32, torch.float32, 'sum', get_index_2, square)
        return reduction


buf319: SchedulerNode(ComputedBuffer)
buf319.writes = [MemoryDep(name='buf319', index=c0, size=(32768,))]
buf319.unmet_dependencies = 
    [   MemoryDep(name='buf301', index=c0, size=(32768,)),
        MemoryDep(name='buf314', index=c0, size=(32768,)),
        MemoryDep(name='buf317', index=c1, size=(16, 2048)),
        MemoryDep(name='buf318', index=c1, size=(16, 2048))]
buf319.met_dependencies = 
    [   MemoryDep(name='arg157_1', index=c1, size=(16, 2048)),
        MemoryDep(name='arg158_1', index=c1, size=(16, 2048))]
buf319.group.device = cpu
buf319.group.iteration = ((16, 2048), ())
buf319.sizes = ([16, 2048], [])
class buf319_loop_body:
    var_ranges = {z0: 16, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf317', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf318', get_index_2)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(div, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg157_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg158_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf301', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        constant_2 = ops.constant(1, torch.float32)
        div_1 = ops.div(relu, constant_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf319', get_index_6, div_1, None)
        return store


buf320: ExternKernelSchedulerNode(ExternKernelOut)
buf320.writes = [StarDep(name='buf320')]
buf320.unmet_dependencies = [StarDep(name='buf319')]
buf320.met_dependencies = [StarDep(name='arg159_1'), StarDep(name='arg160_1')]
buf320.node.kernel = extern_kernels.addmm


buf321: SchedulerNode(ComputedBuffer)
buf321.writes = [MemoryDep(name='buf321', index=c0, size=(64,))]
buf321.unmet_dependencies = [MemoryDep(name='buf3', index=c0, size=(64,))]
buf321.met_dependencies = [MemoryDep(name='arg161_1', index=c0, size=(64,))]
buf321.group.device = cpu
buf321.group.iteration = ((64,), ())
buf321.sizes = ([64], [])
class buf321_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg161_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf321', get_index_2, add, None)
        return store


buf322: SchedulerNode(ComputedBuffer)
buf322.writes = [MemoryDep(name='buf322', index=c0, size=(64,))]
buf322.unmet_dependencies = [MemoryDep(name='buf321', index=c0, size=(64,))]
buf322.met_dependencies = [StarDep(name='arg161_1')]
buf322.group.device = cpu
buf322.group.iteration = ((64,), ())
buf322.sizes = ([64], [])
buf322.mutations = ['arg161_1']
class buf322_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf321', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf322', get_index_1, load, None)
        return store


buf323: SchedulerNode(ComputedBuffer)
buf323.writes = [MemoryDep(name='buf323', index=c0, size=(64,))]
buf323.unmet_dependencies = [MemoryDep(name='buf4', index=c0, size=(64,))]
buf323.met_dependencies = [MemoryDep(name='arg162_1', index=c0, size=(64,))]
buf323.group.device = cpu
buf323.group.iteration = ((64,), ())
buf323.sizes = ([64], [])
class buf323_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        constant = ops.constant(4096, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0002442002442002, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg162_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf323', get_index_2, add, None)
        return store


buf324: SchedulerNode(ComputedBuffer)
buf324.writes = [MemoryDep(name='buf324', index=c0, size=(64,))]
buf324.unmet_dependencies = [MemoryDep(name='buf323', index=c0, size=(64,))]
buf324.met_dependencies = [StarDep(name='arg162_1')]
buf324.group.device = cpu
buf324.group.iteration = ((64,), ())
buf324.sizes = ([64], [])
buf324.mutations = ['arg162_1']
class buf324_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf324', get_index_1, load, None)
        return store


buf325: SchedulerNode(ComputedBuffer)
buf325.writes = [MemoryDep(name='buf325', index=0, size=())]
buf325.unmet_dependencies = []
buf325.met_dependencies = [MemoryDep(name='arg163_1', index=0, size=())]
buf325.group.device = cpu
buf325.group.iteration = ((), ())
buf325.sizes = ([], [])
class buf325_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg163_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf325', get_index_1, add, None)
        return store


buf326: SchedulerNode(ComputedBuffer)
buf326.writes = [MemoryDep(name='buf326', index=0, size=())]
buf326.unmet_dependencies = [MemoryDep(name='buf325', index=0, size=())]
buf326.met_dependencies = [StarDep(name='arg163_1')]
buf326.group.device = cpu
buf326.group.iteration = ((), ())
buf326.sizes = ([], [])
buf326.mutations = ['arg163_1']
class buf326_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf325', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf326', get_index_1, load, None)
        return store


buf327: SchedulerNode(ComputedBuffer)
buf327.writes = [MemoryDep(name='buf327', index=c0, size=(64,))]
buf327.unmet_dependencies = [MemoryDep(name='buf11', index=c0, size=(64,))]
buf327.met_dependencies = [MemoryDep(name='arg164_1', index=c0, size=(64,))]
buf327.group.device = cpu
buf327.group.iteration = ((64,), ())
buf327.sizes = ([64], [])
class buf327_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg164_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf327', get_index_2, add, None)
        return store


buf328: SchedulerNode(ComputedBuffer)
buf328.writes = [MemoryDep(name='buf328', index=c0, size=(64,))]
buf328.unmet_dependencies = [MemoryDep(name='buf327', index=c0, size=(64,))]
buf328.met_dependencies = [StarDep(name='arg164_1')]
buf328.group.device = cpu
buf328.group.iteration = ((64,), ())
buf328.sizes = ([64], [])
buf328.mutations = ['arg164_1']
class buf328_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf327', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf328', get_index_1, load, None)
        return store


buf329: SchedulerNode(ComputedBuffer)
buf329.writes = [MemoryDep(name='buf329', index=c0, size=(64,))]
buf329.unmet_dependencies = [MemoryDep(name='buf12', index=c0, size=(64,))]
buf329.met_dependencies = [MemoryDep(name='arg165_1', index=c0, size=(64,))]
buf329.group.device = cpu
buf329.group.iteration = ((64,), ())
buf329.sizes = ([64], [])
class buf329_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0009775171065494, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg165_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf329', get_index_2, add, None)
        return store


buf330: SchedulerNode(ComputedBuffer)
buf330.writes = [MemoryDep(name='buf330', index=c0, size=(64,))]
buf330.unmet_dependencies = [MemoryDep(name='buf329', index=c0, size=(64,))]
buf330.met_dependencies = [StarDep(name='arg165_1')]
buf330.group.device = cpu
buf330.group.iteration = ((64,), ())
buf330.sizes = ([64], [])
buf330.mutations = ['arg165_1']
class buf330_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf330', get_index_1, load, None)
        return store


buf331: SchedulerNode(ComputedBuffer)
buf331.writes = [MemoryDep(name='buf331', index=0, size=())]
buf331.unmet_dependencies = []
buf331.met_dependencies = [MemoryDep(name='arg166_1', index=0, size=())]
buf331.group.device = cpu
buf331.group.iteration = ((), ())
buf331.sizes = ([], [])
class buf331_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg166_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf331', get_index_1, add, None)
        return store


buf332: SchedulerNode(ComputedBuffer)
buf332.writes = [MemoryDep(name='buf332', index=0, size=())]
buf332.unmet_dependencies = [MemoryDep(name='buf331', index=0, size=())]
buf332.met_dependencies = [StarDep(name='arg166_1')]
buf332.group.device = cpu
buf332.group.iteration = ((), ())
buf332.sizes = ([], [])
buf332.mutations = ['arg166_1']
class buf332_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf332', get_index_1, load, None)
        return store


buf333: SchedulerNode(ComputedBuffer)
buf333.writes = [MemoryDep(name='buf333', index=c0, size=(64,))]
buf333.unmet_dependencies = [MemoryDep(name='buf17', index=c0, size=(64,))]
buf333.met_dependencies = [MemoryDep(name='arg167_1', index=c0, size=(64,))]
buf333.group.device = cpu
buf333.group.iteration = ((64,), ())
buf333.sizes = ([64], [])
class buf333_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg167_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf333', get_index_2, add, None)
        return store


buf334: SchedulerNode(ComputedBuffer)
buf334.writes = [MemoryDep(name='buf334', index=c0, size=(64,))]
buf334.unmet_dependencies = [MemoryDep(name='buf333', index=c0, size=(64,))]
buf334.met_dependencies = [StarDep(name='arg167_1')]
buf334.group.device = cpu
buf334.group.iteration = ((64,), ())
buf334.sizes = ([64], [])
buf334.mutations = ['arg167_1']
class buf334_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf334', get_index_1, load, None)
        return store


buf335: SchedulerNode(ComputedBuffer)
buf335.writes = [MemoryDep(name='buf335', index=c0, size=(64,))]
buf335.unmet_dependencies = [MemoryDep(name='buf18', index=c0, size=(64,))]
buf335.met_dependencies = [MemoryDep(name='arg168_1', index=c0, size=(64,))]
buf335.group.device = cpu
buf335.group.iteration = ((64,), ())
buf335.sizes = ([64], [])
class buf335_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0009775171065494, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg168_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf335', get_index_2, add, None)
        return store


buf336: SchedulerNode(ComputedBuffer)
buf336.writes = [MemoryDep(name='buf336', index=c0, size=(64,))]
buf336.unmet_dependencies = [MemoryDep(name='buf335', index=c0, size=(64,))]
buf336.met_dependencies = [StarDep(name='arg168_1')]
buf336.group.device = cpu
buf336.group.iteration = ((64,), ())
buf336.sizes = ([64], [])
buf336.mutations = ['arg168_1']
class buf336_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf335', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf336', get_index_1, load, None)
        return store


buf337: SchedulerNode(ComputedBuffer)
buf337.writes = [MemoryDep(name='buf337', index=0, size=())]
buf337.unmet_dependencies = []
buf337.met_dependencies = [MemoryDep(name='arg169_1', index=0, size=())]
buf337.group.device = cpu
buf337.group.iteration = ((), ())
buf337.sizes = ([], [])
class buf337_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg169_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf337', get_index_1, add, None)
        return store


buf338: SchedulerNode(ComputedBuffer)
buf338.writes = [MemoryDep(name='buf338', index=0, size=())]
buf338.unmet_dependencies = [MemoryDep(name='buf337', index=0, size=())]
buf338.met_dependencies = [StarDep(name='arg169_1')]
buf338.group.device = cpu
buf338.group.iteration = ((), ())
buf338.sizes = ([], [])
buf338.mutations = ['arg169_1']
class buf338_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf338', get_index_1, load, None)
        return store


buf339: SchedulerNode(ComputedBuffer)
buf339.writes = [MemoryDep(name='buf339', index=c0, size=(256,))]
buf339.unmet_dependencies = [MemoryDep(name='buf23', index=c0, size=(256,))]
buf339.met_dependencies = [MemoryDep(name='arg170_1', index=c0, size=(256,))]
buf339.group.device = cpu
buf339.group.iteration = ((256,), ())
buf339.sizes = ([256], [])
class buf339_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg170_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf339', get_index_2, add, None)
        return store


buf340: SchedulerNode(ComputedBuffer)
buf340.writes = [MemoryDep(name='buf340', index=c0, size=(256,))]
buf340.unmet_dependencies = [MemoryDep(name='buf339', index=c0, size=(256,))]
buf340.met_dependencies = [StarDep(name='arg170_1')]
buf340.group.device = cpu
buf340.group.iteration = ((256,), ())
buf340.sizes = ([256], [])
buf340.mutations = ['arg170_1']
class buf340_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf340', get_index_1, load, None)
        return store


buf341: SchedulerNode(ComputedBuffer)
buf341.writes = [MemoryDep(name='buf341', index=c0, size=(256,))]
buf341.unmet_dependencies = [MemoryDep(name='buf24', index=c0, size=(256,))]
buf341.met_dependencies = [MemoryDep(name='arg171_1', index=c0, size=(256,))]
buf341.group.device = cpu
buf341.group.iteration = ((256,), ())
buf341.sizes = ([256], [])
class buf341_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0009775171065494, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg171_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf341', get_index_2, add, None)
        return store


buf342: SchedulerNode(ComputedBuffer)
buf342.writes = [MemoryDep(name='buf342', index=c0, size=(256,))]
buf342.unmet_dependencies = [MemoryDep(name='buf341', index=c0, size=(256,))]
buf342.met_dependencies = [StarDep(name='arg171_1')]
buf342.group.device = cpu
buf342.group.iteration = ((256,), ())
buf342.sizes = ([256], [])
buf342.mutations = ['arg171_1']
class buf342_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf341', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf342', get_index_1, load, None)
        return store


buf343: SchedulerNode(ComputedBuffer)
buf343.writes = [MemoryDep(name='buf343', index=0, size=())]
buf343.unmet_dependencies = []
buf343.met_dependencies = [MemoryDep(name='arg172_1', index=0, size=())]
buf343.group.device = cpu
buf343.group.iteration = ((), ())
buf343.sizes = ([], [])
class buf343_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg172_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf343', get_index_1, add, None)
        return store


buf344: SchedulerNode(ComputedBuffer)
buf344.writes = [MemoryDep(name='buf344', index=0, size=())]
buf344.unmet_dependencies = [MemoryDep(name='buf343', index=0, size=())]
buf344.met_dependencies = [StarDep(name='arg172_1')]
buf344.group.device = cpu
buf344.group.iteration = ((), ())
buf344.sizes = ([], [])
buf344.mutations = ['arg172_1']
class buf344_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf343', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf344', get_index_1, load, None)
        return store


buf345: SchedulerNode(ComputedBuffer)
buf345.writes = [MemoryDep(name='buf345', index=c0, size=(256,))]
buf345.unmet_dependencies = [MemoryDep(name='buf28', index=c0, size=(256,))]
buf345.met_dependencies = [MemoryDep(name='arg173_1', index=c0, size=(256,))]
buf345.group.device = cpu
buf345.group.iteration = ((256,), ())
buf345.sizes = ([256], [])
class buf345_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg173_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf345', get_index_2, add, None)
        return store


buf346: SchedulerNode(ComputedBuffer)
buf346.writes = [MemoryDep(name='buf346', index=c0, size=(256,))]
buf346.unmet_dependencies = [MemoryDep(name='buf345', index=c0, size=(256,))]
buf346.met_dependencies = [StarDep(name='arg173_1')]
buf346.group.device = cpu
buf346.group.iteration = ((256,), ())
buf346.sizes = ([256], [])
buf346.mutations = ['arg173_1']
class buf346_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf346', get_index_1, load, None)
        return store


buf347: SchedulerNode(ComputedBuffer)
buf347.writes = [MemoryDep(name='buf347', index=c0, size=(256,))]
buf347.unmet_dependencies = [MemoryDep(name='buf29', index=c0, size=(256,))]
buf347.met_dependencies = [MemoryDep(name='arg174_1', index=c0, size=(256,))]
buf347.group.device = cpu
buf347.group.iteration = ((256,), ())
buf347.sizes = ([256], [])
class buf347_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0009775171065494, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg174_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf347', get_index_2, add, None)
        return store


buf348: SchedulerNode(ComputedBuffer)
buf348.writes = [MemoryDep(name='buf348', index=c0, size=(256,))]
buf348.unmet_dependencies = [MemoryDep(name='buf347', index=c0, size=(256,))]
buf348.met_dependencies = [StarDep(name='arg174_1')]
buf348.group.device = cpu
buf348.group.iteration = ((256,), ())
buf348.sizes = ([256], [])
buf348.mutations = ['arg174_1']
class buf348_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf348', get_index_1, load, None)
        return store


buf349: SchedulerNode(ComputedBuffer)
buf349.writes = [MemoryDep(name='buf349', index=0, size=())]
buf349.unmet_dependencies = []
buf349.met_dependencies = [MemoryDep(name='arg175_1', index=0, size=())]
buf349.group.device = cpu
buf349.group.iteration = ((), ())
buf349.sizes = ([], [])
class buf349_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg175_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf349', get_index_1, add, None)
        return store


buf350: SchedulerNode(ComputedBuffer)
buf350.writes = [MemoryDep(name='buf350', index=0, size=())]
buf350.unmet_dependencies = [MemoryDep(name='buf349', index=0, size=())]
buf350.met_dependencies = [StarDep(name='arg175_1')]
buf350.group.device = cpu
buf350.group.iteration = ((), ())
buf350.sizes = ([], [])
buf350.mutations = ['arg175_1']
class buf350_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf349', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf350', get_index_1, load, None)
        return store


buf351: SchedulerNode(ComputedBuffer)
buf351.writes = [MemoryDep(name='buf351', index=c0, size=(64,))]
buf351.unmet_dependencies = [MemoryDep(name='buf35', index=c0, size=(64,))]
buf351.met_dependencies = [MemoryDep(name='arg176_1', index=c0, size=(64,))]
buf351.group.device = cpu
buf351.group.iteration = ((64,), ())
buf351.sizes = ([64], [])
class buf351_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg176_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf351', get_index_2, add, None)
        return store


buf352: SchedulerNode(ComputedBuffer)
buf352.writes = [MemoryDep(name='buf352', index=c0, size=(64,))]
buf352.unmet_dependencies = [MemoryDep(name='buf351', index=c0, size=(64,))]
buf352.met_dependencies = [StarDep(name='arg176_1')]
buf352.group.device = cpu
buf352.group.iteration = ((64,), ())
buf352.sizes = ([64], [])
buf352.mutations = ['arg176_1']
class buf352_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf351', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf352', get_index_1, load, None)
        return store


buf353: SchedulerNode(ComputedBuffer)
buf353.writes = [MemoryDep(name='buf353', index=c0, size=(64,))]
buf353.unmet_dependencies = [MemoryDep(name='buf36', index=c0, size=(64,))]
buf353.met_dependencies = [MemoryDep(name='arg177_1', index=c0, size=(64,))]
buf353.group.device = cpu
buf353.group.iteration = ((64,), ())
buf353.sizes = ([64], [])
class buf353_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0009775171065494, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg177_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf353', get_index_2, add, None)
        return store


buf354: SchedulerNode(ComputedBuffer)
buf354.writes = [MemoryDep(name='buf354', index=c0, size=(64,))]
buf354.unmet_dependencies = [MemoryDep(name='buf353', index=c0, size=(64,))]
buf354.met_dependencies = [StarDep(name='arg177_1')]
buf354.group.device = cpu
buf354.group.iteration = ((64,), ())
buf354.sizes = ([64], [])
buf354.mutations = ['arg177_1']
class buf354_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf354', get_index_1, load, None)
        return store


buf355: SchedulerNode(ComputedBuffer)
buf355.writes = [MemoryDep(name='buf355', index=0, size=())]
buf355.unmet_dependencies = []
buf355.met_dependencies = [MemoryDep(name='arg178_1', index=0, size=())]
buf355.group.device = cpu
buf355.group.iteration = ((), ())
buf355.sizes = ([], [])
class buf355_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg178_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf355', get_index_1, add, None)
        return store


buf356: SchedulerNode(ComputedBuffer)
buf356.writes = [MemoryDep(name='buf356', index=0, size=())]
buf356.unmet_dependencies = [MemoryDep(name='buf355', index=0, size=())]
buf356.met_dependencies = [StarDep(name='arg178_1')]
buf356.group.device = cpu
buf356.group.iteration = ((), ())
buf356.sizes = ([], [])
buf356.mutations = ['arg178_1']
class buf356_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf356', get_index_1, load, None)
        return store


buf357: SchedulerNode(ComputedBuffer)
buf357.writes = [MemoryDep(name='buf357', index=c0, size=(64,))]
buf357.unmet_dependencies = [MemoryDep(name='buf41', index=c0, size=(64,))]
buf357.met_dependencies = [MemoryDep(name='arg179_1', index=c0, size=(64,))]
buf357.group.device = cpu
buf357.group.iteration = ((64,), ())
buf357.sizes = ([64], [])
class buf357_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg179_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf357', get_index_2, add, None)
        return store


buf358: SchedulerNode(ComputedBuffer)
buf358.writes = [MemoryDep(name='buf358', index=c0, size=(64,))]
buf358.unmet_dependencies = [MemoryDep(name='buf357', index=c0, size=(64,))]
buf358.met_dependencies = [StarDep(name='arg179_1')]
buf358.group.device = cpu
buf358.group.iteration = ((64,), ())
buf358.sizes = ([64], [])
buf358.mutations = ['arg179_1']
class buf358_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf358', get_index_1, load, None)
        return store


buf359: SchedulerNode(ComputedBuffer)
buf359.writes = [MemoryDep(name='buf359', index=c0, size=(64,))]
buf359.unmet_dependencies = [MemoryDep(name='buf42', index=c0, size=(64,))]
buf359.met_dependencies = [MemoryDep(name='arg180_1', index=c0, size=(64,))]
buf359.group.device = cpu
buf359.group.iteration = ((64,), ())
buf359.sizes = ([64], [])
class buf359_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0009775171065494, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg180_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf359', get_index_2, add, None)
        return store


buf360: SchedulerNode(ComputedBuffer)
buf360.writes = [MemoryDep(name='buf360', index=c0, size=(64,))]
buf360.unmet_dependencies = [MemoryDep(name='buf359', index=c0, size=(64,))]
buf360.met_dependencies = [StarDep(name='arg180_1')]
buf360.group.device = cpu
buf360.group.iteration = ((64,), ())
buf360.sizes = ([64], [])
buf360.mutations = ['arg180_1']
class buf360_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf360', get_index_1, load, None)
        return store


buf361: SchedulerNode(ComputedBuffer)
buf361.writes = [MemoryDep(name='buf361', index=0, size=())]
buf361.unmet_dependencies = []
buf361.met_dependencies = [MemoryDep(name='arg181_1', index=0, size=())]
buf361.group.device = cpu
buf361.group.iteration = ((), ())
buf361.sizes = ([], [])
class buf361_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg181_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf361', get_index_1, add, None)
        return store


buf362: SchedulerNode(ComputedBuffer)
buf362.writes = [MemoryDep(name='buf362', index=0, size=())]
buf362.unmet_dependencies = [MemoryDep(name='buf361', index=0, size=())]
buf362.met_dependencies = [StarDep(name='arg181_1')]
buf362.group.device = cpu
buf362.group.iteration = ((), ())
buf362.sizes = ([], [])
buf362.mutations = ['arg181_1']
class buf362_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf362', get_index_1, load, None)
        return store


buf363: SchedulerNode(ComputedBuffer)
buf363.writes = [MemoryDep(name='buf363', index=c0, size=(256,))]
buf363.unmet_dependencies = [MemoryDep(name='buf47', index=c0, size=(256,))]
buf363.met_dependencies = [MemoryDep(name='arg182_1', index=c0, size=(256,))]
buf363.group.device = cpu
buf363.group.iteration = ((256,), ())
buf363.sizes = ([256], [])
class buf363_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg182_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf363', get_index_2, add, None)
        return store


buf364: SchedulerNode(ComputedBuffer)
buf364.writes = [MemoryDep(name='buf364', index=c0, size=(256,))]
buf364.unmet_dependencies = [MemoryDep(name='buf363', index=c0, size=(256,))]
buf364.met_dependencies = [StarDep(name='arg182_1')]
buf364.group.device = cpu
buf364.group.iteration = ((256,), ())
buf364.sizes = ([256], [])
buf364.mutations = ['arg182_1']
class buf364_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf364', get_index_1, load, None)
        return store


buf365: SchedulerNode(ComputedBuffer)
buf365.writes = [MemoryDep(name='buf365', index=c0, size=(256,))]
buf365.unmet_dependencies = [MemoryDep(name='buf48', index=c0, size=(256,))]
buf365.met_dependencies = [MemoryDep(name='arg183_1', index=c0, size=(256,))]
buf365.group.device = cpu
buf365.group.iteration = ((256,), ())
buf365.sizes = ([256], [])
class buf365_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0009775171065494, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg183_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf365', get_index_2, add, None)
        return store


buf366: SchedulerNode(ComputedBuffer)
buf366.writes = [MemoryDep(name='buf366', index=c0, size=(256,))]
buf366.unmet_dependencies = [MemoryDep(name='buf365', index=c0, size=(256,))]
buf366.met_dependencies = [StarDep(name='arg183_1')]
buf366.group.device = cpu
buf366.group.iteration = ((256,), ())
buf366.sizes = ([256], [])
buf366.mutations = ['arg183_1']
class buf366_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf365', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf366', get_index_1, load, None)
        return store


buf367: SchedulerNode(ComputedBuffer)
buf367.writes = [MemoryDep(name='buf367', index=0, size=())]
buf367.unmet_dependencies = []
buf367.met_dependencies = [MemoryDep(name='arg184_1', index=0, size=())]
buf367.group.device = cpu
buf367.group.iteration = ((), ())
buf367.sizes = ([], [])
class buf367_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg184_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf367', get_index_1, add, None)
        return store


buf368: SchedulerNode(ComputedBuffer)
buf368.writes = [MemoryDep(name='buf368', index=0, size=())]
buf368.unmet_dependencies = [MemoryDep(name='buf367', index=0, size=())]
buf368.met_dependencies = [StarDep(name='arg184_1')]
buf368.group.device = cpu
buf368.group.iteration = ((), ())
buf368.sizes = ([], [])
buf368.mutations = ['arg184_1']
class buf368_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf368', get_index_1, load, None)
        return store


buf369: SchedulerNode(ComputedBuffer)
buf369.writes = [MemoryDep(name='buf369', index=c0, size=(64,))]
buf369.unmet_dependencies = [MemoryDep(name='buf53', index=c0, size=(64,))]
buf369.met_dependencies = [MemoryDep(name='arg185_1', index=c0, size=(64,))]
buf369.group.device = cpu
buf369.group.iteration = ((64,), ())
buf369.sizes = ([64], [])
class buf369_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg185_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf369', get_index_2, add, None)
        return store


buf370: SchedulerNode(ComputedBuffer)
buf370.writes = [MemoryDep(name='buf370', index=c0, size=(64,))]
buf370.unmet_dependencies = [MemoryDep(name='buf369', index=c0, size=(64,))]
buf370.met_dependencies = [StarDep(name='arg185_1')]
buf370.group.device = cpu
buf370.group.iteration = ((64,), ())
buf370.sizes = ([64], [])
buf370.mutations = ['arg185_1']
class buf370_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf369', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf370', get_index_1, load, None)
        return store


buf371: SchedulerNode(ComputedBuffer)
buf371.writes = [MemoryDep(name='buf371', index=c0, size=(64,))]
buf371.unmet_dependencies = [MemoryDep(name='buf54', index=c0, size=(64,))]
buf371.met_dependencies = [MemoryDep(name='arg186_1', index=c0, size=(64,))]
buf371.group.device = cpu
buf371.group.iteration = ((64,), ())
buf371.sizes = ([64], [])
class buf371_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0009775171065494, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg186_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf371', get_index_2, add, None)
        return store


buf372: SchedulerNode(ComputedBuffer)
buf372.writes = [MemoryDep(name='buf372', index=c0, size=(64,))]
buf372.unmet_dependencies = [MemoryDep(name='buf371', index=c0, size=(64,))]
buf372.met_dependencies = [StarDep(name='arg186_1')]
buf372.group.device = cpu
buf372.group.iteration = ((64,), ())
buf372.sizes = ([64], [])
buf372.mutations = ['arg186_1']
class buf372_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf371', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf372', get_index_1, load, None)
        return store


buf373: SchedulerNode(ComputedBuffer)
buf373.writes = [MemoryDep(name='buf373', index=0, size=())]
buf373.unmet_dependencies = []
buf373.met_dependencies = [MemoryDep(name='arg187_1', index=0, size=())]
buf373.group.device = cpu
buf373.group.iteration = ((), ())
buf373.sizes = ([], [])
class buf373_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg187_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf373', get_index_1, add, None)
        return store


buf374: SchedulerNode(ComputedBuffer)
buf374.writes = [MemoryDep(name='buf374', index=0, size=())]
buf374.unmet_dependencies = [MemoryDep(name='buf373', index=0, size=())]
buf374.met_dependencies = [StarDep(name='arg187_1')]
buf374.group.device = cpu
buf374.group.iteration = ((), ())
buf374.sizes = ([], [])
buf374.mutations = ['arg187_1']
class buf374_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf373', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf374', get_index_1, load, None)
        return store


buf375: SchedulerNode(ComputedBuffer)
buf375.writes = [MemoryDep(name='buf375', index=c0, size=(64,))]
buf375.unmet_dependencies = [MemoryDep(name='buf59', index=c0, size=(64,))]
buf375.met_dependencies = [MemoryDep(name='arg188_1', index=c0, size=(64,))]
buf375.group.device = cpu
buf375.group.iteration = ((64,), ())
buf375.sizes = ([64], [])
class buf375_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg188_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf375', get_index_2, add, None)
        return store


buf376: SchedulerNode(ComputedBuffer)
buf376.writes = [MemoryDep(name='buf376', index=c0, size=(64,))]
buf376.unmet_dependencies = [MemoryDep(name='buf375', index=c0, size=(64,))]
buf376.met_dependencies = [StarDep(name='arg188_1')]
buf376.group.device = cpu
buf376.group.iteration = ((64,), ())
buf376.sizes = ([64], [])
buf376.mutations = ['arg188_1']
class buf376_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf375', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf376', get_index_1, load, None)
        return store


buf377: SchedulerNode(ComputedBuffer)
buf377.writes = [MemoryDep(name='buf377', index=c0, size=(64,))]
buf377.unmet_dependencies = [MemoryDep(name='buf60', index=c0, size=(64,))]
buf377.met_dependencies = [MemoryDep(name='arg189_1', index=c0, size=(64,))]
buf377.group.device = cpu
buf377.group.iteration = ((64,), ())
buf377.sizes = ([64], [])
class buf377_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0009775171065494, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg189_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf377', get_index_2, add, None)
        return store


buf378: SchedulerNode(ComputedBuffer)
buf378.writes = [MemoryDep(name='buf378', index=c0, size=(64,))]
buf378.unmet_dependencies = [MemoryDep(name='buf377', index=c0, size=(64,))]
buf378.met_dependencies = [StarDep(name='arg189_1')]
buf378.group.device = cpu
buf378.group.iteration = ((64,), ())
buf378.sizes = ([64], [])
buf378.mutations = ['arg189_1']
class buf378_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf377', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf378', get_index_1, load, None)
        return store


buf379: SchedulerNode(ComputedBuffer)
buf379.writes = [MemoryDep(name='buf379', index=0, size=())]
buf379.unmet_dependencies = []
buf379.met_dependencies = [MemoryDep(name='arg190_1', index=0, size=())]
buf379.group.device = cpu
buf379.group.iteration = ((), ())
buf379.sizes = ([], [])
class buf379_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg190_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf379', get_index_1, add, None)
        return store


buf380: SchedulerNode(ComputedBuffer)
buf380.writes = [MemoryDep(name='buf380', index=0, size=())]
buf380.unmet_dependencies = [MemoryDep(name='buf379', index=0, size=())]
buf380.met_dependencies = [StarDep(name='arg190_1')]
buf380.group.device = cpu
buf380.group.iteration = ((), ())
buf380.sizes = ([], [])
buf380.mutations = ['arg190_1']
class buf380_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf379', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf380', get_index_1, load, None)
        return store


buf381: SchedulerNode(ComputedBuffer)
buf381.writes = [MemoryDep(name='buf381', index=c0, size=(256,))]
buf381.unmet_dependencies = [MemoryDep(name='buf65', index=c0, size=(256,))]
buf381.met_dependencies = [MemoryDep(name='arg191_1', index=c0, size=(256,))]
buf381.group.device = cpu
buf381.group.iteration = ((256,), ())
buf381.sizes = ([256], [])
class buf381_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg191_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf381', get_index_2, add, None)
        return store


buf382: SchedulerNode(ComputedBuffer)
buf382.writes = [MemoryDep(name='buf382', index=c0, size=(256,))]
buf382.unmet_dependencies = [MemoryDep(name='buf381', index=c0, size=(256,))]
buf382.met_dependencies = [StarDep(name='arg191_1')]
buf382.group.device = cpu
buf382.group.iteration = ((256,), ())
buf382.sizes = ([256], [])
buf382.mutations = ['arg191_1']
class buf382_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf381', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf382', get_index_1, load, None)
        return store


buf383: SchedulerNode(ComputedBuffer)
buf383.writes = [MemoryDep(name='buf383', index=c0, size=(256,))]
buf383.unmet_dependencies = [MemoryDep(name='buf66', index=c0, size=(256,))]
buf383.met_dependencies = [MemoryDep(name='arg192_1', index=c0, size=(256,))]
buf383.group.device = cpu
buf383.group.iteration = ((256,), ())
buf383.sizes = ([256], [])
class buf383_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0009775171065494, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg192_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf383', get_index_2, add, None)
        return store


buf384: SchedulerNode(ComputedBuffer)
buf384.writes = [MemoryDep(name='buf384', index=c0, size=(256,))]
buf384.unmet_dependencies = [MemoryDep(name='buf383', index=c0, size=(256,))]
buf384.met_dependencies = [StarDep(name='arg192_1')]
buf384.group.device = cpu
buf384.group.iteration = ((256,), ())
buf384.sizes = ([256], [])
buf384.mutations = ['arg192_1']
class buf384_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf384', get_index_1, load, None)
        return store


buf385: SchedulerNode(ComputedBuffer)
buf385.writes = [MemoryDep(name='buf385', index=0, size=())]
buf385.unmet_dependencies = []
buf385.met_dependencies = [MemoryDep(name='arg193_1', index=0, size=())]
buf385.group.device = cpu
buf385.group.iteration = ((), ())
buf385.sizes = ([], [])
class buf385_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg193_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf385', get_index_1, add, None)
        return store


buf386: SchedulerNode(ComputedBuffer)
buf386.writes = [MemoryDep(name='buf386', index=0, size=())]
buf386.unmet_dependencies = [MemoryDep(name='buf385', index=0, size=())]
buf386.met_dependencies = [StarDep(name='arg193_1')]
buf386.group.device = cpu
buf386.group.iteration = ((), ())
buf386.sizes = ([], [])
buf386.mutations = ['arg193_1']
class buf386_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf385', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf386', get_index_1, load, None)
        return store


buf387: SchedulerNode(ComputedBuffer)
buf387.writes = [MemoryDep(name='buf387', index=c0, size=(128,))]
buf387.unmet_dependencies = [MemoryDep(name='buf71', index=c0, size=(128,))]
buf387.met_dependencies = [MemoryDep(name='arg194_1', index=c0, size=(128,))]
buf387.group.device = cpu
buf387.group.iteration = ((128,), ())
buf387.sizes = ([128], [])
class buf387_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg194_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf387', get_index_2, add, None)
        return store


buf388: SchedulerNode(ComputedBuffer)
buf388.writes = [MemoryDep(name='buf388', index=c0, size=(128,))]
buf388.unmet_dependencies = [MemoryDep(name='buf387', index=c0, size=(128,))]
buf388.met_dependencies = [StarDep(name='arg194_1')]
buf388.group.device = cpu
buf388.group.iteration = ((128,), ())
buf388.sizes = ([128], [])
buf388.mutations = ['arg194_1']
class buf388_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf387', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf388', get_index_1, load, None)
        return store


buf389: SchedulerNode(ComputedBuffer)
buf389.writes = [MemoryDep(name='buf389', index=c0, size=(128,))]
buf389.unmet_dependencies = [MemoryDep(name='buf72', index=c0, size=(128,))]
buf389.met_dependencies = [MemoryDep(name='arg195_1', index=c0, size=(128,))]
buf389.group.device = cpu
buf389.group.iteration = ((128,), ())
buf389.sizes = ([128], [])
class buf389_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        constant = ops.constant(1024, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0009775171065494, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg195_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf389', get_index_2, add, None)
        return store


buf390: SchedulerNode(ComputedBuffer)
buf390.writes = [MemoryDep(name='buf390', index=c0, size=(128,))]
buf390.unmet_dependencies = [MemoryDep(name='buf389', index=c0, size=(128,))]
buf390.met_dependencies = [StarDep(name='arg195_1')]
buf390.group.device = cpu
buf390.group.iteration = ((128,), ())
buf390.sizes = ([128], [])
buf390.mutations = ['arg195_1']
class buf390_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf389', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf390', get_index_1, load, None)
        return store


buf391: SchedulerNode(ComputedBuffer)
buf391.writes = [MemoryDep(name='buf391', index=0, size=())]
buf391.unmet_dependencies = []
buf391.met_dependencies = [MemoryDep(name='arg196_1', index=0, size=())]
buf391.group.device = cpu
buf391.group.iteration = ((), ())
buf391.sizes = ([], [])
class buf391_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg196_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf391', get_index_1, add, None)
        return store


buf392: SchedulerNode(ComputedBuffer)
buf392.writes = [MemoryDep(name='buf392', index=0, size=())]
buf392.unmet_dependencies = [MemoryDep(name='buf391', index=0, size=())]
buf392.met_dependencies = [StarDep(name='arg196_1')]
buf392.group.device = cpu
buf392.group.iteration = ((), ())
buf392.sizes = ([], [])
buf392.mutations = ['arg196_1']
class buf392_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf392', get_index_1, load, None)
        return store


buf393: SchedulerNode(ComputedBuffer)
buf393.writes = [MemoryDep(name='buf393', index=c0, size=(128,))]
buf393.unmet_dependencies = [MemoryDep(name='buf77', index=c0, size=(128,))]
buf393.met_dependencies = [MemoryDep(name='arg197_1', index=c0, size=(128,))]
buf393.group.device = cpu
buf393.group.iteration = ((128,), ())
buf393.sizes = ([128], [])
class buf393_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg197_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf393', get_index_2, add, None)
        return store


buf394: SchedulerNode(ComputedBuffer)
buf394.writes = [MemoryDep(name='buf394', index=c0, size=(128,))]
buf394.unmet_dependencies = [MemoryDep(name='buf393', index=c0, size=(128,))]
buf394.met_dependencies = [StarDep(name='arg197_1')]
buf394.group.device = cpu
buf394.group.iteration = ((128,), ())
buf394.sizes = ([128], [])
buf394.mutations = ['arg197_1']
class buf394_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf393', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf394', get_index_1, load, None)
        return store


buf395: SchedulerNode(ComputedBuffer)
buf395.writes = [MemoryDep(name='buf395', index=c0, size=(128,))]
buf395.unmet_dependencies = [MemoryDep(name='buf78', index=c0, size=(128,))]
buf395.met_dependencies = [MemoryDep(name='arg198_1', index=c0, size=(128,))]
buf395.group.device = cpu
buf395.group.iteration = ((128,), ())
buf395.sizes = ([128], [])
class buf395_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.003921568627451, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg198_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf395', get_index_2, add, None)
        return store


buf396: SchedulerNode(ComputedBuffer)
buf396.writes = [MemoryDep(name='buf396', index=c0, size=(128,))]
buf396.unmet_dependencies = [MemoryDep(name='buf395', index=c0, size=(128,))]
buf396.met_dependencies = [StarDep(name='arg198_1')]
buf396.group.device = cpu
buf396.group.iteration = ((128,), ())
buf396.sizes = ([128], [])
buf396.mutations = ['arg198_1']
class buf396_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf395', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf396', get_index_1, load, None)
        return store


buf397: SchedulerNode(ComputedBuffer)
buf397.writes = [MemoryDep(name='buf397', index=0, size=())]
buf397.unmet_dependencies = []
buf397.met_dependencies = [MemoryDep(name='arg199_1', index=0, size=())]
buf397.group.device = cpu
buf397.group.iteration = ((), ())
buf397.sizes = ([], [])
class buf397_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg199_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf397', get_index_1, add, None)
        return store


buf398: SchedulerNode(ComputedBuffer)
buf398.writes = [MemoryDep(name='buf398', index=0, size=())]
buf398.unmet_dependencies = [MemoryDep(name='buf397', index=0, size=())]
buf398.met_dependencies = [StarDep(name='arg199_1')]
buf398.group.device = cpu
buf398.group.iteration = ((), ())
buf398.sizes = ([], [])
buf398.mutations = ['arg199_1']
class buf398_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf397', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf398', get_index_1, load, None)
        return store


buf399: SchedulerNode(ComputedBuffer)
buf399.writes = [MemoryDep(name='buf399', index=c0, size=(512,))]
buf399.unmet_dependencies = [MemoryDep(name='buf83', index=c0, size=(512,))]
buf399.met_dependencies = [MemoryDep(name='arg200_1', index=c0, size=(512,))]
buf399.group.device = cpu
buf399.group.iteration = ((512,), ())
buf399.sizes = ([512], [])
class buf399_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg200_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf399', get_index_2, add, None)
        return store


buf400: SchedulerNode(ComputedBuffer)
buf400.writes = [MemoryDep(name='buf400', index=c0, size=(512,))]
buf400.unmet_dependencies = [MemoryDep(name='buf399', index=c0, size=(512,))]
buf400.met_dependencies = [StarDep(name='arg200_1')]
buf400.group.device = cpu
buf400.group.iteration = ((512,), ())
buf400.sizes = ([512], [])
buf400.mutations = ['arg200_1']
class buf400_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf400', get_index_1, load, None)
        return store


buf401: SchedulerNode(ComputedBuffer)
buf401.writes = [MemoryDep(name='buf401', index=c0, size=(512,))]
buf401.unmet_dependencies = [MemoryDep(name='buf84', index=c0, size=(512,))]
buf401.met_dependencies = [MemoryDep(name='arg201_1', index=c0, size=(512,))]
buf401.group.device = cpu
buf401.group.iteration = ((512,), ())
buf401.sizes = ([512], [])
class buf401_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.003921568627451, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg201_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf401', get_index_2, add, None)
        return store


buf402: SchedulerNode(ComputedBuffer)
buf402.writes = [MemoryDep(name='buf402', index=c0, size=(512,))]
buf402.unmet_dependencies = [MemoryDep(name='buf401', index=c0, size=(512,))]
buf402.met_dependencies = [StarDep(name='arg201_1')]
buf402.group.device = cpu
buf402.group.iteration = ((512,), ())
buf402.sizes = ([512], [])
buf402.mutations = ['arg201_1']
class buf402_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf401', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf402', get_index_1, load, None)
        return store


buf403: SchedulerNode(ComputedBuffer)
buf403.writes = [MemoryDep(name='buf403', index=0, size=())]
buf403.unmet_dependencies = []
buf403.met_dependencies = [MemoryDep(name='arg202_1', index=0, size=())]
buf403.group.device = cpu
buf403.group.iteration = ((), ())
buf403.sizes = ([], [])
class buf403_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg202_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf403', get_index_1, add, None)
        return store


buf404: SchedulerNode(ComputedBuffer)
buf404.writes = [MemoryDep(name='buf404', index=0, size=())]
buf404.unmet_dependencies = [MemoryDep(name='buf403', index=0, size=())]
buf404.met_dependencies = [StarDep(name='arg202_1')]
buf404.group.device = cpu
buf404.group.iteration = ((), ())
buf404.sizes = ([], [])
buf404.mutations = ['arg202_1']
class buf404_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf404', get_index_1, load, None)
        return store


buf405: SchedulerNode(ComputedBuffer)
buf405.writes = [MemoryDep(name='buf405', index=c0, size=(512,))]
buf405.unmet_dependencies = [MemoryDep(name='buf88', index=c0, size=(512,))]
buf405.met_dependencies = [MemoryDep(name='arg203_1', index=c0, size=(512,))]
buf405.group.device = cpu
buf405.group.iteration = ((512,), ())
buf405.sizes = ([512], [])
class buf405_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg203_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf405', get_index_2, add, None)
        return store


buf406: SchedulerNode(ComputedBuffer)
buf406.writes = [MemoryDep(name='buf406', index=c0, size=(512,))]
buf406.unmet_dependencies = [MemoryDep(name='buf405', index=c0, size=(512,))]
buf406.met_dependencies = [StarDep(name='arg203_1')]
buf406.group.device = cpu
buf406.group.iteration = ((512,), ())
buf406.sizes = ([512], [])
buf406.mutations = ['arg203_1']
class buf406_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf405', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf406', get_index_1, load, None)
        return store


buf407: SchedulerNode(ComputedBuffer)
buf407.writes = [MemoryDep(name='buf407', index=c0, size=(512,))]
buf407.unmet_dependencies = [MemoryDep(name='buf89', index=c0, size=(512,))]
buf407.met_dependencies = [MemoryDep(name='arg204_1', index=c0, size=(512,))]
buf407.group.device = cpu
buf407.group.iteration = ((512,), ())
buf407.sizes = ([512], [])
class buf407_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.003921568627451, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg204_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf407', get_index_2, add, None)
        return store


buf408: SchedulerNode(ComputedBuffer)
buf408.writes = [MemoryDep(name='buf408', index=c0, size=(512,))]
buf408.unmet_dependencies = [MemoryDep(name='buf407', index=c0, size=(512,))]
buf408.met_dependencies = [StarDep(name='arg204_1')]
buf408.group.device = cpu
buf408.group.iteration = ((512,), ())
buf408.sizes = ([512], [])
buf408.mutations = ['arg204_1']
class buf408_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf407', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf408', get_index_1, load, None)
        return store


buf409: SchedulerNode(ComputedBuffer)
buf409.writes = [MemoryDep(name='buf409', index=0, size=())]
buf409.unmet_dependencies = []
buf409.met_dependencies = [MemoryDep(name='arg205_1', index=0, size=())]
buf409.group.device = cpu
buf409.group.iteration = ((), ())
buf409.sizes = ([], [])
class buf409_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg205_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf409', get_index_1, add, None)
        return store


buf410: SchedulerNode(ComputedBuffer)
buf410.writes = [MemoryDep(name='buf410', index=0, size=())]
buf410.unmet_dependencies = [MemoryDep(name='buf409', index=0, size=())]
buf410.met_dependencies = [StarDep(name='arg205_1')]
buf410.group.device = cpu
buf410.group.iteration = ((), ())
buf410.sizes = ([], [])
buf410.mutations = ['arg205_1']
class buf410_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf409', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf410', get_index_1, load, None)
        return store


buf411: SchedulerNode(ComputedBuffer)
buf411.writes = [MemoryDep(name='buf411', index=c0, size=(128,))]
buf411.unmet_dependencies = [MemoryDep(name='buf95', index=c0, size=(128,))]
buf411.met_dependencies = [MemoryDep(name='arg206_1', index=c0, size=(128,))]
buf411.group.device = cpu
buf411.group.iteration = ((128,), ())
buf411.sizes = ([128], [])
class buf411_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg206_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf411', get_index_2, add, None)
        return store


buf412: SchedulerNode(ComputedBuffer)
buf412.writes = [MemoryDep(name='buf412', index=c0, size=(128,))]
buf412.unmet_dependencies = [MemoryDep(name='buf411', index=c0, size=(128,))]
buf412.met_dependencies = [StarDep(name='arg206_1')]
buf412.group.device = cpu
buf412.group.iteration = ((128,), ())
buf412.sizes = ([128], [])
buf412.mutations = ['arg206_1']
class buf412_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf412', get_index_1, load, None)
        return store


buf413: SchedulerNode(ComputedBuffer)
buf413.writes = [MemoryDep(name='buf413', index=c0, size=(128,))]
buf413.unmet_dependencies = [MemoryDep(name='buf96', index=c0, size=(128,))]
buf413.met_dependencies = [MemoryDep(name='arg207_1', index=c0, size=(128,))]
buf413.group.device = cpu
buf413.group.iteration = ((128,), ())
buf413.sizes = ([128], [])
class buf413_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.003921568627451, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg207_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf413', get_index_2, add, None)
        return store


buf414: SchedulerNode(ComputedBuffer)
buf414.writes = [MemoryDep(name='buf414', index=c0, size=(128,))]
buf414.unmet_dependencies = [MemoryDep(name='buf413', index=c0, size=(128,))]
buf414.met_dependencies = [StarDep(name='arg207_1')]
buf414.group.device = cpu
buf414.group.iteration = ((128,), ())
buf414.sizes = ([128], [])
buf414.mutations = ['arg207_1']
class buf414_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf413', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf414', get_index_1, load, None)
        return store


buf415: SchedulerNode(ComputedBuffer)
buf415.writes = [MemoryDep(name='buf415', index=0, size=())]
buf415.unmet_dependencies = []
buf415.met_dependencies = [MemoryDep(name='arg208_1', index=0, size=())]
buf415.group.device = cpu
buf415.group.iteration = ((), ())
buf415.sizes = ([], [])
class buf415_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg208_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf415', get_index_1, add, None)
        return store


buf416: SchedulerNode(ComputedBuffer)
buf416.writes = [MemoryDep(name='buf416', index=0, size=())]
buf416.unmet_dependencies = [MemoryDep(name='buf415', index=0, size=())]
buf416.met_dependencies = [StarDep(name='arg208_1')]
buf416.group.device = cpu
buf416.group.iteration = ((), ())
buf416.sizes = ([], [])
buf416.mutations = ['arg208_1']
class buf416_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf415', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf416', get_index_1, load, None)
        return store


buf417: SchedulerNode(ComputedBuffer)
buf417.writes = [MemoryDep(name='buf417', index=c0, size=(128,))]
buf417.unmet_dependencies = [MemoryDep(name='buf101', index=c0, size=(128,))]
buf417.met_dependencies = [MemoryDep(name='arg209_1', index=c0, size=(128,))]
buf417.group.device = cpu
buf417.group.iteration = ((128,), ())
buf417.sizes = ([128], [])
class buf417_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg209_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf417', get_index_2, add, None)
        return store


buf418: SchedulerNode(ComputedBuffer)
buf418.writes = [MemoryDep(name='buf418', index=c0, size=(128,))]
buf418.unmet_dependencies = [MemoryDep(name='buf417', index=c0, size=(128,))]
buf418.met_dependencies = [StarDep(name='arg209_1')]
buf418.group.device = cpu
buf418.group.iteration = ((128,), ())
buf418.sizes = ([128], [])
buf418.mutations = ['arg209_1']
class buf418_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf417', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf418', get_index_1, load, None)
        return store


buf419: SchedulerNode(ComputedBuffer)
buf419.writes = [MemoryDep(name='buf419', index=c0, size=(128,))]
buf419.unmet_dependencies = [MemoryDep(name='buf102', index=c0, size=(128,))]
buf419.met_dependencies = [MemoryDep(name='arg210_1', index=c0, size=(128,))]
buf419.group.device = cpu
buf419.group.iteration = ((128,), ())
buf419.sizes = ([128], [])
class buf419_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.003921568627451, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg210_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf419', get_index_2, add, None)
        return store


buf420: SchedulerNode(ComputedBuffer)
buf420.writes = [MemoryDep(name='buf420', index=c0, size=(128,))]
buf420.unmet_dependencies = [MemoryDep(name='buf419', index=c0, size=(128,))]
buf420.met_dependencies = [StarDep(name='arg210_1')]
buf420.group.device = cpu
buf420.group.iteration = ((128,), ())
buf420.sizes = ([128], [])
buf420.mutations = ['arg210_1']
class buf420_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf419', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf420', get_index_1, load, None)
        return store


buf421: SchedulerNode(ComputedBuffer)
buf421.writes = [MemoryDep(name='buf421', index=0, size=())]
buf421.unmet_dependencies = []
buf421.met_dependencies = [MemoryDep(name='arg211_1', index=0, size=())]
buf421.group.device = cpu
buf421.group.iteration = ((), ())
buf421.sizes = ([], [])
class buf421_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg211_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf421', get_index_1, add, None)
        return store


buf422: SchedulerNode(ComputedBuffer)
buf422.writes = [MemoryDep(name='buf422', index=0, size=())]
buf422.unmet_dependencies = [MemoryDep(name='buf421', index=0, size=())]
buf422.met_dependencies = [StarDep(name='arg211_1')]
buf422.group.device = cpu
buf422.group.iteration = ((), ())
buf422.sizes = ([], [])
buf422.mutations = ['arg211_1']
class buf422_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf421', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf422', get_index_1, load, None)
        return store


buf423: SchedulerNode(ComputedBuffer)
buf423.writes = [MemoryDep(name='buf423', index=c0, size=(512,))]
buf423.unmet_dependencies = [MemoryDep(name='buf107', index=c0, size=(512,))]
buf423.met_dependencies = [MemoryDep(name='arg212_1', index=c0, size=(512,))]
buf423.group.device = cpu
buf423.group.iteration = ((512,), ())
buf423.sizes = ([512], [])
class buf423_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg212_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf423', get_index_2, add, None)
        return store


buf424: SchedulerNode(ComputedBuffer)
buf424.writes = [MemoryDep(name='buf424', index=c0, size=(512,))]
buf424.unmet_dependencies = [MemoryDep(name='buf423', index=c0, size=(512,))]
buf424.met_dependencies = [StarDep(name='arg212_1')]
buf424.group.device = cpu
buf424.group.iteration = ((512,), ())
buf424.sizes = ([512], [])
buf424.mutations = ['arg212_1']
class buf424_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf423', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf424', get_index_1, load, None)
        return store


buf425: SchedulerNode(ComputedBuffer)
buf425.writes = [MemoryDep(name='buf425', index=c0, size=(512,))]
buf425.unmet_dependencies = [MemoryDep(name='buf108', index=c0, size=(512,))]
buf425.met_dependencies = [MemoryDep(name='arg213_1', index=c0, size=(512,))]
buf425.group.device = cpu
buf425.group.iteration = ((512,), ())
buf425.sizes = ([512], [])
class buf425_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.003921568627451, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg213_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf425', get_index_2, add, None)
        return store


buf426: SchedulerNode(ComputedBuffer)
buf426.writes = [MemoryDep(name='buf426', index=c0, size=(512,))]
buf426.unmet_dependencies = [MemoryDep(name='buf425', index=c0, size=(512,))]
buf426.met_dependencies = [StarDep(name='arg213_1')]
buf426.group.device = cpu
buf426.group.iteration = ((512,), ())
buf426.sizes = ([512], [])
buf426.mutations = ['arg213_1']
class buf426_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf425', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf426', get_index_1, load, None)
        return store


buf427: SchedulerNode(ComputedBuffer)
buf427.writes = [MemoryDep(name='buf427', index=0, size=())]
buf427.unmet_dependencies = []
buf427.met_dependencies = [MemoryDep(name='arg214_1', index=0, size=())]
buf427.group.device = cpu
buf427.group.iteration = ((), ())
buf427.sizes = ([], [])
class buf427_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg214_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf427', get_index_1, add, None)
        return store


buf428: SchedulerNode(ComputedBuffer)
buf428.writes = [MemoryDep(name='buf428', index=0, size=())]
buf428.unmet_dependencies = [MemoryDep(name='buf427', index=0, size=())]
buf428.met_dependencies = [StarDep(name='arg214_1')]
buf428.group.device = cpu
buf428.group.iteration = ((), ())
buf428.sizes = ([], [])
buf428.mutations = ['arg214_1']
class buf428_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf428', get_index_1, load, None)
        return store


buf429: SchedulerNode(ComputedBuffer)
buf429.writes = [MemoryDep(name='buf429', index=c0, size=(128,))]
buf429.unmet_dependencies = [MemoryDep(name='buf113', index=c0, size=(128,))]
buf429.met_dependencies = [MemoryDep(name='arg215_1', index=c0, size=(128,))]
buf429.group.device = cpu
buf429.group.iteration = ((128,), ())
buf429.sizes = ([128], [])
class buf429_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg215_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf429', get_index_2, add, None)
        return store


buf430: SchedulerNode(ComputedBuffer)
buf430.writes = [MemoryDep(name='buf430', index=c0, size=(128,))]
buf430.unmet_dependencies = [MemoryDep(name='buf429', index=c0, size=(128,))]
buf430.met_dependencies = [StarDep(name='arg215_1')]
buf430.group.device = cpu
buf430.group.iteration = ((128,), ())
buf430.sizes = ([128], [])
buf430.mutations = ['arg215_1']
class buf430_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf429', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf430', get_index_1, load, None)
        return store


buf431: SchedulerNode(ComputedBuffer)
buf431.writes = [MemoryDep(name='buf431', index=c0, size=(128,))]
buf431.unmet_dependencies = [MemoryDep(name='buf114', index=c0, size=(128,))]
buf431.met_dependencies = [MemoryDep(name='arg216_1', index=c0, size=(128,))]
buf431.group.device = cpu
buf431.group.iteration = ((128,), ())
buf431.sizes = ([128], [])
class buf431_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.003921568627451, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg216_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf431', get_index_2, add, None)
        return store


buf432: SchedulerNode(ComputedBuffer)
buf432.writes = [MemoryDep(name='buf432', index=c0, size=(128,))]
buf432.unmet_dependencies = [MemoryDep(name='buf431', index=c0, size=(128,))]
buf432.met_dependencies = [StarDep(name='arg216_1')]
buf432.group.device = cpu
buf432.group.iteration = ((128,), ())
buf432.sizes = ([128], [])
buf432.mutations = ['arg216_1']
class buf432_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf432', get_index_1, load, None)
        return store


buf433: SchedulerNode(ComputedBuffer)
buf433.writes = [MemoryDep(name='buf433', index=0, size=())]
buf433.unmet_dependencies = []
buf433.met_dependencies = [MemoryDep(name='arg217_1', index=0, size=())]
buf433.group.device = cpu
buf433.group.iteration = ((), ())
buf433.sizes = ([], [])
class buf433_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg217_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf433', get_index_1, add, None)
        return store


buf434: SchedulerNode(ComputedBuffer)
buf434.writes = [MemoryDep(name='buf434', index=0, size=())]
buf434.unmet_dependencies = [MemoryDep(name='buf433', index=0, size=())]
buf434.met_dependencies = [StarDep(name='arg217_1')]
buf434.group.device = cpu
buf434.group.iteration = ((), ())
buf434.sizes = ([], [])
buf434.mutations = ['arg217_1']
class buf434_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf433', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf434', get_index_1, load, None)
        return store


buf435: SchedulerNode(ComputedBuffer)
buf435.writes = [MemoryDep(name='buf435', index=c0, size=(128,))]
buf435.unmet_dependencies = [MemoryDep(name='buf119', index=c0, size=(128,))]
buf435.met_dependencies = [MemoryDep(name='arg218_1', index=c0, size=(128,))]
buf435.group.device = cpu
buf435.group.iteration = ((128,), ())
buf435.sizes = ([128], [])
class buf435_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg218_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf435', get_index_2, add, None)
        return store


buf436: SchedulerNode(ComputedBuffer)
buf436.writes = [MemoryDep(name='buf436', index=c0, size=(128,))]
buf436.unmet_dependencies = [MemoryDep(name='buf435', index=c0, size=(128,))]
buf436.met_dependencies = [StarDep(name='arg218_1')]
buf436.group.device = cpu
buf436.group.iteration = ((128,), ())
buf436.sizes = ([128], [])
buf436.mutations = ['arg218_1']
class buf436_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf435', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf436', get_index_1, load, None)
        return store


buf437: SchedulerNode(ComputedBuffer)
buf437.writes = [MemoryDep(name='buf437', index=c0, size=(128,))]
buf437.unmet_dependencies = [MemoryDep(name='buf120', index=c0, size=(128,))]
buf437.met_dependencies = [MemoryDep(name='arg219_1', index=c0, size=(128,))]
buf437.group.device = cpu
buf437.group.iteration = ((128,), ())
buf437.sizes = ([128], [])
class buf437_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.003921568627451, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg219_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf437', get_index_2, add, None)
        return store


buf438: SchedulerNode(ComputedBuffer)
buf438.writes = [MemoryDep(name='buf438', index=c0, size=(128,))]
buf438.unmet_dependencies = [MemoryDep(name='buf437', index=c0, size=(128,))]
buf438.met_dependencies = [StarDep(name='arg219_1')]
buf438.group.device = cpu
buf438.group.iteration = ((128,), ())
buf438.sizes = ([128], [])
buf438.mutations = ['arg219_1']
class buf438_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf438', get_index_1, load, None)
        return store


buf439: SchedulerNode(ComputedBuffer)
buf439.writes = [MemoryDep(name='buf439', index=0, size=())]
buf439.unmet_dependencies = []
buf439.met_dependencies = [MemoryDep(name='arg220_1', index=0, size=())]
buf439.group.device = cpu
buf439.group.iteration = ((), ())
buf439.sizes = ([], [])
class buf439_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg220_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf439', get_index_1, add, None)
        return store


buf440: SchedulerNode(ComputedBuffer)
buf440.writes = [MemoryDep(name='buf440', index=0, size=())]
buf440.unmet_dependencies = [MemoryDep(name='buf439', index=0, size=())]
buf440.met_dependencies = [StarDep(name='arg220_1')]
buf440.group.device = cpu
buf440.group.iteration = ((), ())
buf440.sizes = ([], [])
buf440.mutations = ['arg220_1']
class buf440_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf439', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf440', get_index_1, load, None)
        return store


buf441: SchedulerNode(ComputedBuffer)
buf441.writes = [MemoryDep(name='buf441', index=c0, size=(512,))]
buf441.unmet_dependencies = [MemoryDep(name='buf125', index=c0, size=(512,))]
buf441.met_dependencies = [MemoryDep(name='arg221_1', index=c0, size=(512,))]
buf441.group.device = cpu
buf441.group.iteration = ((512,), ())
buf441.sizes = ([512], [])
class buf441_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg221_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf441', get_index_2, add, None)
        return store


buf442: SchedulerNode(ComputedBuffer)
buf442.writes = [MemoryDep(name='buf442', index=c0, size=(512,))]
buf442.unmet_dependencies = [MemoryDep(name='buf441', index=c0, size=(512,))]
buf442.met_dependencies = [StarDep(name='arg221_1')]
buf442.group.device = cpu
buf442.group.iteration = ((512,), ())
buf442.sizes = ([512], [])
buf442.mutations = ['arg221_1']
class buf442_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf441', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf442', get_index_1, load, None)
        return store


buf443: SchedulerNode(ComputedBuffer)
buf443.writes = [MemoryDep(name='buf443', index=c0, size=(512,))]
buf443.unmet_dependencies = [MemoryDep(name='buf126', index=c0, size=(512,))]
buf443.met_dependencies = [MemoryDep(name='arg222_1', index=c0, size=(512,))]
buf443.group.device = cpu
buf443.group.iteration = ((512,), ())
buf443.sizes = ([512], [])
class buf443_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.003921568627451, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg222_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf443', get_index_2, add, None)
        return store


buf444: SchedulerNode(ComputedBuffer)
buf444.writes = [MemoryDep(name='buf444', index=c0, size=(512,))]
buf444.unmet_dependencies = [MemoryDep(name='buf443', index=c0, size=(512,))]
buf444.met_dependencies = [StarDep(name='arg222_1')]
buf444.group.device = cpu
buf444.group.iteration = ((512,), ())
buf444.sizes = ([512], [])
buf444.mutations = ['arg222_1']
class buf444_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf444', get_index_1, load, None)
        return store


buf445: SchedulerNode(ComputedBuffer)
buf445.writes = [MemoryDep(name='buf445', index=0, size=())]
buf445.unmet_dependencies = []
buf445.met_dependencies = [MemoryDep(name='arg223_1', index=0, size=())]
buf445.group.device = cpu
buf445.group.iteration = ((), ())
buf445.sizes = ([], [])
class buf445_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg223_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf445', get_index_1, add, None)
        return store


buf446: SchedulerNode(ComputedBuffer)
buf446.writes = [MemoryDep(name='buf446', index=0, size=())]
buf446.unmet_dependencies = [MemoryDep(name='buf445', index=0, size=())]
buf446.met_dependencies = [StarDep(name='arg223_1')]
buf446.group.device = cpu
buf446.group.iteration = ((), ())
buf446.sizes = ([], [])
buf446.mutations = ['arg223_1']
class buf446_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf445', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf446', get_index_1, load, None)
        return store


buf447: SchedulerNode(ComputedBuffer)
buf447.writes = [MemoryDep(name='buf447', index=c0, size=(128,))]
buf447.unmet_dependencies = [MemoryDep(name='buf131', index=c0, size=(128,))]
buf447.met_dependencies = [MemoryDep(name='arg224_1', index=c0, size=(128,))]
buf447.group.device = cpu
buf447.group.iteration = ((128,), ())
buf447.sizes = ([128], [])
class buf447_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg224_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf447', get_index_2, add, None)
        return store


buf448: SchedulerNode(ComputedBuffer)
buf448.writes = [MemoryDep(name='buf448', index=c0, size=(128,))]
buf448.unmet_dependencies = [MemoryDep(name='buf447', index=c0, size=(128,))]
buf448.met_dependencies = [StarDep(name='arg224_1')]
buf448.group.device = cpu
buf448.group.iteration = ((128,), ())
buf448.sizes = ([128], [])
buf448.mutations = ['arg224_1']
class buf448_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf447', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf448', get_index_1, load, None)
        return store


buf449: SchedulerNode(ComputedBuffer)
buf449.writes = [MemoryDep(name='buf449', index=c0, size=(128,))]
buf449.unmet_dependencies = [MemoryDep(name='buf132', index=c0, size=(128,))]
buf449.met_dependencies = [MemoryDep(name='arg225_1', index=c0, size=(128,))]
buf449.group.device = cpu
buf449.group.iteration = ((128,), ())
buf449.sizes = ([128], [])
class buf449_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.003921568627451, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg225_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf449', get_index_2, add, None)
        return store


buf450: SchedulerNode(ComputedBuffer)
buf450.writes = [MemoryDep(name='buf450', index=c0, size=(128,))]
buf450.unmet_dependencies = [MemoryDep(name='buf449', index=c0, size=(128,))]
buf450.met_dependencies = [StarDep(name='arg225_1')]
buf450.group.device = cpu
buf450.group.iteration = ((128,), ())
buf450.sizes = ([128], [])
buf450.mutations = ['arg225_1']
class buf450_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf449', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf450', get_index_1, load, None)
        return store


buf451: SchedulerNode(ComputedBuffer)
buf451.writes = [MemoryDep(name='buf451', index=0, size=())]
buf451.unmet_dependencies = []
buf451.met_dependencies = [MemoryDep(name='arg226_1', index=0, size=())]
buf451.group.device = cpu
buf451.group.iteration = ((), ())
buf451.sizes = ([], [])
class buf451_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg226_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf451', get_index_1, add, None)
        return store


buf452: SchedulerNode(ComputedBuffer)
buf452.writes = [MemoryDep(name='buf452', index=0, size=())]
buf452.unmet_dependencies = [MemoryDep(name='buf451', index=0, size=())]
buf452.met_dependencies = [StarDep(name='arg226_1')]
buf452.group.device = cpu
buf452.group.iteration = ((), ())
buf452.sizes = ([], [])
buf452.mutations = ['arg226_1']
class buf452_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf451', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf452', get_index_1, load, None)
        return store


buf453: SchedulerNode(ComputedBuffer)
buf453.writes = [MemoryDep(name='buf453', index=c0, size=(128,))]
buf453.unmet_dependencies = [MemoryDep(name='buf137', index=c0, size=(128,))]
buf453.met_dependencies = [MemoryDep(name='arg227_1', index=c0, size=(128,))]
buf453.group.device = cpu
buf453.group.iteration = ((128,), ())
buf453.sizes = ([128], [])
class buf453_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg227_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf453', get_index_2, add, None)
        return store


buf454: SchedulerNode(ComputedBuffer)
buf454.writes = [MemoryDep(name='buf454', index=c0, size=(128,))]
buf454.unmet_dependencies = [MemoryDep(name='buf453', index=c0, size=(128,))]
buf454.met_dependencies = [StarDep(name='arg227_1')]
buf454.group.device = cpu
buf454.group.iteration = ((128,), ())
buf454.sizes = ([128], [])
buf454.mutations = ['arg227_1']
class buf454_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf453', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf454', get_index_1, load, None)
        return store


buf455: SchedulerNode(ComputedBuffer)
buf455.writes = [MemoryDep(name='buf455', index=c0, size=(128,))]
buf455.unmet_dependencies = [MemoryDep(name='buf138', index=c0, size=(128,))]
buf455.met_dependencies = [MemoryDep(name='arg228_1', index=c0, size=(128,))]
buf455.group.device = cpu
buf455.group.iteration = ((128,), ())
buf455.sizes = ([128], [])
class buf455_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.003921568627451, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg228_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf455', get_index_2, add, None)
        return store


buf456: SchedulerNode(ComputedBuffer)
buf456.writes = [MemoryDep(name='buf456', index=c0, size=(128,))]
buf456.unmet_dependencies = [MemoryDep(name='buf455', index=c0, size=(128,))]
buf456.met_dependencies = [StarDep(name='arg228_1')]
buf456.group.device = cpu
buf456.group.iteration = ((128,), ())
buf456.sizes = ([128], [])
buf456.mutations = ['arg228_1']
class buf456_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf455', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf456', get_index_1, load, None)
        return store


buf457: SchedulerNode(ComputedBuffer)
buf457.writes = [MemoryDep(name='buf457', index=0, size=())]
buf457.unmet_dependencies = []
buf457.met_dependencies = [MemoryDep(name='arg229_1', index=0, size=())]
buf457.group.device = cpu
buf457.group.iteration = ((), ())
buf457.sizes = ([], [])
class buf457_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg229_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf457', get_index_1, add, None)
        return store


buf458: SchedulerNode(ComputedBuffer)
buf458.writes = [MemoryDep(name='buf458', index=0, size=())]
buf458.unmet_dependencies = [MemoryDep(name='buf457', index=0, size=())]
buf458.met_dependencies = [StarDep(name='arg229_1')]
buf458.group.device = cpu
buf458.group.iteration = ((), ())
buf458.sizes = ([], [])
buf458.mutations = ['arg229_1']
class buf458_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf457', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf458', get_index_1, load, None)
        return store


buf459: SchedulerNode(ComputedBuffer)
buf459.writes = [MemoryDep(name='buf459', index=c0, size=(512,))]
buf459.unmet_dependencies = [MemoryDep(name='buf143', index=c0, size=(512,))]
buf459.met_dependencies = [MemoryDep(name='arg230_1', index=c0, size=(512,))]
buf459.group.device = cpu
buf459.group.iteration = ((512,), ())
buf459.sizes = ([512], [])
class buf459_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg230_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf459', get_index_2, add, None)
        return store


buf460: SchedulerNode(ComputedBuffer)
buf460.writes = [MemoryDep(name='buf460', index=c0, size=(512,))]
buf460.unmet_dependencies = [MemoryDep(name='buf459', index=c0, size=(512,))]
buf460.met_dependencies = [StarDep(name='arg230_1')]
buf460.group.device = cpu
buf460.group.iteration = ((512,), ())
buf460.sizes = ([512], [])
buf460.mutations = ['arg230_1']
class buf460_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf459', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf460', get_index_1, load, None)
        return store


buf461: SchedulerNode(ComputedBuffer)
buf461.writes = [MemoryDep(name='buf461', index=c0, size=(512,))]
buf461.unmet_dependencies = [MemoryDep(name='buf144', index=c0, size=(512,))]
buf461.met_dependencies = [MemoryDep(name='arg231_1', index=c0, size=(512,))]
buf461.group.device = cpu
buf461.group.iteration = ((512,), ())
buf461.sizes = ([512], [])
class buf461_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.003921568627451, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg231_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf461', get_index_2, add, None)
        return store


buf462: SchedulerNode(ComputedBuffer)
buf462.writes = [MemoryDep(name='buf462', index=c0, size=(512,))]
buf462.unmet_dependencies = [MemoryDep(name='buf461', index=c0, size=(512,))]
buf462.met_dependencies = [StarDep(name='arg231_1')]
buf462.group.device = cpu
buf462.group.iteration = ((512,), ())
buf462.sizes = ([512], [])
buf462.mutations = ['arg231_1']
class buf462_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf461', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf462', get_index_1, load, None)
        return store


buf463: SchedulerNode(ComputedBuffer)
buf463.writes = [MemoryDep(name='buf463', index=0, size=())]
buf463.unmet_dependencies = []
buf463.met_dependencies = [MemoryDep(name='arg232_1', index=0, size=())]
buf463.group.device = cpu
buf463.group.iteration = ((), ())
buf463.sizes = ([], [])
class buf463_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg232_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf463', get_index_1, add, None)
        return store


buf464: SchedulerNode(ComputedBuffer)
buf464.writes = [MemoryDep(name='buf464', index=0, size=())]
buf464.unmet_dependencies = [MemoryDep(name='buf463', index=0, size=())]
buf464.met_dependencies = [StarDep(name='arg232_1')]
buf464.group.device = cpu
buf464.group.iteration = ((), ())
buf464.sizes = ([], [])
buf464.mutations = ['arg232_1']
class buf464_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf463', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf464', get_index_1, load, None)
        return store


buf465: SchedulerNode(ComputedBuffer)
buf465.writes = [MemoryDep(name='buf465', index=c0, size=(256,))]
buf465.unmet_dependencies = [MemoryDep(name='buf149', index=c0, size=(256,))]
buf465.met_dependencies = [MemoryDep(name='arg233_1', index=c0, size=(256,))]
buf465.group.device = cpu
buf465.group.iteration = ((256,), ())
buf465.sizes = ([256], [])
class buf465_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg233_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf465', get_index_2, add, None)
        return store


buf466: SchedulerNode(ComputedBuffer)
buf466.writes = [MemoryDep(name='buf466', index=c0, size=(256,))]
buf466.unmet_dependencies = [MemoryDep(name='buf465', index=c0, size=(256,))]
buf466.met_dependencies = [StarDep(name='arg233_1')]
buf466.group.device = cpu
buf466.group.iteration = ((256,), ())
buf466.sizes = ([256], [])
buf466.mutations = ['arg233_1']
class buf466_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf465', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf466', get_index_1, load, None)
        return store


buf467: SchedulerNode(ComputedBuffer)
buf467.writes = [MemoryDep(name='buf467', index=c0, size=(256,))]
buf467.unmet_dependencies = [MemoryDep(name='buf150', index=c0, size=(256,))]
buf467.met_dependencies = [MemoryDep(name='arg234_1', index=c0, size=(256,))]
buf467.group.device = cpu
buf467.group.iteration = ((256,), ())
buf467.sizes = ([256], [])
class buf467_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        constant = ops.constant(256, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.003921568627451, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg234_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf467', get_index_2, add, None)
        return store


buf468: SchedulerNode(ComputedBuffer)
buf468.writes = [MemoryDep(name='buf468', index=c0, size=(256,))]
buf468.unmet_dependencies = [MemoryDep(name='buf467', index=c0, size=(256,))]
buf468.met_dependencies = [StarDep(name='arg234_1')]
buf468.group.device = cpu
buf468.group.iteration = ((256,), ())
buf468.sizes = ([256], [])
buf468.mutations = ['arg234_1']
class buf468_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf468', get_index_1, load, None)
        return store


buf469: SchedulerNode(ComputedBuffer)
buf469.writes = [MemoryDep(name='buf469', index=0, size=())]
buf469.unmet_dependencies = []
buf469.met_dependencies = [MemoryDep(name='arg235_1', index=0, size=())]
buf469.group.device = cpu
buf469.group.iteration = ((), ())
buf469.sizes = ([], [])
class buf469_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg235_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf469', get_index_1, add, None)
        return store


buf470: SchedulerNode(ComputedBuffer)
buf470.writes = [MemoryDep(name='buf470', index=0, size=())]
buf470.unmet_dependencies = [MemoryDep(name='buf469', index=0, size=())]
buf470.met_dependencies = [StarDep(name='arg235_1')]
buf470.group.device = cpu
buf470.group.iteration = ((), ())
buf470.sizes = ([], [])
buf470.mutations = ['arg235_1']
class buf470_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf469', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf470', get_index_1, load, None)
        return store


buf471: SchedulerNode(ComputedBuffer)
buf471.writes = [MemoryDep(name='buf471', index=c0, size=(256,))]
buf471.unmet_dependencies = [MemoryDep(name='buf155', index=c0, size=(256,))]
buf471.met_dependencies = [MemoryDep(name='arg236_1', index=c0, size=(256,))]
buf471.group.device = cpu
buf471.group.iteration = ((256,), ())
buf471.sizes = ([256], [])
class buf471_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg236_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf471', get_index_2, add, None)
        return store


buf472: SchedulerNode(ComputedBuffer)
buf472.writes = [MemoryDep(name='buf472', index=c0, size=(256,))]
buf472.unmet_dependencies = [MemoryDep(name='buf471', index=c0, size=(256,))]
buf472.met_dependencies = [StarDep(name='arg236_1')]
buf472.group.device = cpu
buf472.group.iteration = ((256,), ())
buf472.sizes = ([256], [])
buf472.mutations = ['arg236_1']
class buf472_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf471', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf472', get_index_1, load, None)
        return store


buf473: SchedulerNode(ComputedBuffer)
buf473.writes = [MemoryDep(name='buf473', index=c0, size=(256,))]
buf473.unmet_dependencies = [MemoryDep(name='buf156', index=c0, size=(256,))]
buf473.met_dependencies = [MemoryDep(name='arg237_1', index=c0, size=(256,))]
buf473.group.device = cpu
buf473.group.iteration = ((256,), ())
buf473.sizes = ([256], [])
class buf473_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0158730158730158, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg237_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf473', get_index_2, add, None)
        return store


buf474: SchedulerNode(ComputedBuffer)
buf474.writes = [MemoryDep(name='buf474', index=c0, size=(256,))]
buf474.unmet_dependencies = [MemoryDep(name='buf473', index=c0, size=(256,))]
buf474.met_dependencies = [StarDep(name='arg237_1')]
buf474.group.device = cpu
buf474.group.iteration = ((256,), ())
buf474.sizes = ([256], [])
buf474.mutations = ['arg237_1']
class buf474_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf473', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf474', get_index_1, load, None)
        return store


buf475: SchedulerNode(ComputedBuffer)
buf475.writes = [MemoryDep(name='buf475', index=0, size=())]
buf475.unmet_dependencies = []
buf475.met_dependencies = [MemoryDep(name='arg238_1', index=0, size=())]
buf475.group.device = cpu
buf475.group.iteration = ((), ())
buf475.sizes = ([], [])
class buf475_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg238_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf475', get_index_1, add, None)
        return store


buf476: SchedulerNode(ComputedBuffer)
buf476.writes = [MemoryDep(name='buf476', index=0, size=())]
buf476.unmet_dependencies = [MemoryDep(name='buf475', index=0, size=())]
buf476.met_dependencies = [StarDep(name='arg238_1')]
buf476.group.device = cpu
buf476.group.iteration = ((), ())
buf476.sizes = ([], [])
buf476.mutations = ['arg238_1']
class buf476_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf475', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf476', get_index_1, load, None)
        return store


buf477: SchedulerNode(ComputedBuffer)
buf477.writes = [MemoryDep(name='buf477', index=c0, size=(1024,))]
buf477.unmet_dependencies = [MemoryDep(name='buf161', index=c0, size=(1024,))]
buf477.met_dependencies = [MemoryDep(name='arg239_1', index=c0, size=(1024,))]
buf477.group.device = cpu
buf477.group.iteration = ((1024,), ())
buf477.sizes = ([1024], [])
class buf477_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg239_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf477', get_index_2, add, None)
        return store


buf478: SchedulerNode(ComputedBuffer)
buf478.writes = [MemoryDep(name='buf478', index=c0, size=(1024,))]
buf478.unmet_dependencies = [MemoryDep(name='buf477', index=c0, size=(1024,))]
buf478.met_dependencies = [StarDep(name='arg239_1')]
buf478.group.device = cpu
buf478.group.iteration = ((1024,), ())
buf478.sizes = ([1024], [])
buf478.mutations = ['arg239_1']
class buf478_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf477', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf478', get_index_1, load, None)
        return store


buf479: SchedulerNode(ComputedBuffer)
buf479.writes = [MemoryDep(name='buf479', index=c0, size=(1024,))]
buf479.unmet_dependencies = [MemoryDep(name='buf162', index=c0, size=(1024,))]
buf479.met_dependencies = [MemoryDep(name='arg240_1', index=c0, size=(1024,))]
buf479.group.device = cpu
buf479.group.iteration = ((1024,), ())
buf479.sizes = ([1024], [])
class buf479_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0158730158730158, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg240_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf479', get_index_2, add, None)
        return store


buf480: SchedulerNode(ComputedBuffer)
buf480.writes = [MemoryDep(name='buf480', index=c0, size=(1024,))]
buf480.unmet_dependencies = [MemoryDep(name='buf479', index=c0, size=(1024,))]
buf480.met_dependencies = [StarDep(name='arg240_1')]
buf480.group.device = cpu
buf480.group.iteration = ((1024,), ())
buf480.sizes = ([1024], [])
buf480.mutations = ['arg240_1']
class buf480_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf479', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf480', get_index_1, load, None)
        return store


buf481: SchedulerNode(ComputedBuffer)
buf481.writes = [MemoryDep(name='buf481', index=0, size=())]
buf481.unmet_dependencies = []
buf481.met_dependencies = [MemoryDep(name='arg241_1', index=0, size=())]
buf481.group.device = cpu
buf481.group.iteration = ((), ())
buf481.sizes = ([], [])
class buf481_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg241_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf481', get_index_1, add, None)
        return store


buf482: SchedulerNode(ComputedBuffer)
buf482.writes = [MemoryDep(name='buf482', index=0, size=())]
buf482.unmet_dependencies = [MemoryDep(name='buf481', index=0, size=())]
buf482.met_dependencies = [StarDep(name='arg241_1')]
buf482.group.device = cpu
buf482.group.iteration = ((), ())
buf482.sizes = ([], [])
buf482.mutations = ['arg241_1']
class buf482_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf481', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf482', get_index_1, load, None)
        return store


buf483: SchedulerNode(ComputedBuffer)
buf483.writes = [MemoryDep(name='buf483', index=c0, size=(1024,))]
buf483.unmet_dependencies = [MemoryDep(name='buf166', index=c0, size=(1024,))]
buf483.met_dependencies = [MemoryDep(name='arg242_1', index=c0, size=(1024,))]
buf483.group.device = cpu
buf483.group.iteration = ((1024,), ())
buf483.sizes = ([1024], [])
class buf483_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg242_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf483', get_index_2, add, None)
        return store


buf484: SchedulerNode(ComputedBuffer)
buf484.writes = [MemoryDep(name='buf484', index=c0, size=(1024,))]
buf484.unmet_dependencies = [MemoryDep(name='buf483', index=c0, size=(1024,))]
buf484.met_dependencies = [StarDep(name='arg242_1')]
buf484.group.device = cpu
buf484.group.iteration = ((1024,), ())
buf484.sizes = ([1024], [])
buf484.mutations = ['arg242_1']
class buf484_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf484', get_index_1, load, None)
        return store


buf485: SchedulerNode(ComputedBuffer)
buf485.writes = [MemoryDep(name='buf485', index=c0, size=(1024,))]
buf485.unmet_dependencies = [MemoryDep(name='buf167', index=c0, size=(1024,))]
buf485.met_dependencies = [MemoryDep(name='arg243_1', index=c0, size=(1024,))]
buf485.group.device = cpu
buf485.group.iteration = ((1024,), ())
buf485.sizes = ([1024], [])
class buf485_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0158730158730158, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg243_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf485', get_index_2, add, None)
        return store


buf486: SchedulerNode(ComputedBuffer)
buf486.writes = [MemoryDep(name='buf486', index=c0, size=(1024,))]
buf486.unmet_dependencies = [MemoryDep(name='buf485', index=c0, size=(1024,))]
buf486.met_dependencies = [StarDep(name='arg243_1')]
buf486.group.device = cpu
buf486.group.iteration = ((1024,), ())
buf486.sizes = ([1024], [])
buf486.mutations = ['arg243_1']
class buf486_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf485', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf486', get_index_1, load, None)
        return store


buf487: SchedulerNode(ComputedBuffer)
buf487.writes = [MemoryDep(name='buf487', index=0, size=())]
buf487.unmet_dependencies = []
buf487.met_dependencies = [MemoryDep(name='arg244_1', index=0, size=())]
buf487.group.device = cpu
buf487.group.iteration = ((), ())
buf487.sizes = ([], [])
class buf487_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg244_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf487', get_index_1, add, None)
        return store


buf488: SchedulerNode(ComputedBuffer)
buf488.writes = [MemoryDep(name='buf488', index=0, size=())]
buf488.unmet_dependencies = [MemoryDep(name='buf487', index=0, size=())]
buf488.met_dependencies = [StarDep(name='arg244_1')]
buf488.group.device = cpu
buf488.group.iteration = ((), ())
buf488.sizes = ([], [])
buf488.mutations = ['arg244_1']
class buf488_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf487', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf488', get_index_1, load, None)
        return store


buf489: SchedulerNode(ComputedBuffer)
buf489.writes = [MemoryDep(name='buf489', index=c0, size=(256,))]
buf489.unmet_dependencies = [MemoryDep(name='buf173', index=c0, size=(256,))]
buf489.met_dependencies = [MemoryDep(name='arg245_1', index=c0, size=(256,))]
buf489.group.device = cpu
buf489.group.iteration = ((256,), ())
buf489.sizes = ([256], [])
class buf489_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg245_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf489', get_index_2, add, None)
        return store


buf490: SchedulerNode(ComputedBuffer)
buf490.writes = [MemoryDep(name='buf490', index=c0, size=(256,))]
buf490.unmet_dependencies = [MemoryDep(name='buf489', index=c0, size=(256,))]
buf490.met_dependencies = [StarDep(name='arg245_1')]
buf490.group.device = cpu
buf490.group.iteration = ((256,), ())
buf490.sizes = ([256], [])
buf490.mutations = ['arg245_1']
class buf490_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf489', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf490', get_index_1, load, None)
        return store


buf491: SchedulerNode(ComputedBuffer)
buf491.writes = [MemoryDep(name='buf491', index=c0, size=(256,))]
buf491.unmet_dependencies = [MemoryDep(name='buf174', index=c0, size=(256,))]
buf491.met_dependencies = [MemoryDep(name='arg246_1', index=c0, size=(256,))]
buf491.group.device = cpu
buf491.group.iteration = ((256,), ())
buf491.sizes = ([256], [])
class buf491_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0158730158730158, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg246_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf491', get_index_2, add, None)
        return store


buf492: SchedulerNode(ComputedBuffer)
buf492.writes = [MemoryDep(name='buf492', index=c0, size=(256,))]
buf492.unmet_dependencies = [MemoryDep(name='buf491', index=c0, size=(256,))]
buf492.met_dependencies = [StarDep(name='arg246_1')]
buf492.group.device = cpu
buf492.group.iteration = ((256,), ())
buf492.sizes = ([256], [])
buf492.mutations = ['arg246_1']
class buf492_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf492', get_index_1, load, None)
        return store


buf493: SchedulerNode(ComputedBuffer)
buf493.writes = [MemoryDep(name='buf493', index=0, size=())]
buf493.unmet_dependencies = []
buf493.met_dependencies = [MemoryDep(name='arg247_1', index=0, size=())]
buf493.group.device = cpu
buf493.group.iteration = ((), ())
buf493.sizes = ([], [])
class buf493_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg247_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf493', get_index_1, add, None)
        return store


buf494: SchedulerNode(ComputedBuffer)
buf494.writes = [MemoryDep(name='buf494', index=0, size=())]
buf494.unmet_dependencies = [MemoryDep(name='buf493', index=0, size=())]
buf494.met_dependencies = [StarDep(name='arg247_1')]
buf494.group.device = cpu
buf494.group.iteration = ((), ())
buf494.sizes = ([], [])
buf494.mutations = ['arg247_1']
class buf494_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf493', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf494', get_index_1, load, None)
        return store


buf495: SchedulerNode(ComputedBuffer)
buf495.writes = [MemoryDep(name='buf495', index=c0, size=(256,))]
buf495.unmet_dependencies = [MemoryDep(name='buf179', index=c0, size=(256,))]
buf495.met_dependencies = [MemoryDep(name='arg248_1', index=c0, size=(256,))]
buf495.group.device = cpu
buf495.group.iteration = ((256,), ())
buf495.sizes = ([256], [])
class buf495_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg248_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf495', get_index_2, add, None)
        return store


buf496: SchedulerNode(ComputedBuffer)
buf496.writes = [MemoryDep(name='buf496', index=c0, size=(256,))]
buf496.unmet_dependencies = [MemoryDep(name='buf495', index=c0, size=(256,))]
buf496.met_dependencies = [StarDep(name='arg248_1')]
buf496.group.device = cpu
buf496.group.iteration = ((256,), ())
buf496.sizes = ([256], [])
buf496.mutations = ['arg248_1']
class buf496_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf495', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf496', get_index_1, load, None)
        return store


buf497: SchedulerNode(ComputedBuffer)
buf497.writes = [MemoryDep(name='buf497', index=c0, size=(256,))]
buf497.unmet_dependencies = [MemoryDep(name='buf180', index=c0, size=(256,))]
buf497.met_dependencies = [MemoryDep(name='arg249_1', index=c0, size=(256,))]
buf497.group.device = cpu
buf497.group.iteration = ((256,), ())
buf497.sizes = ([256], [])
class buf497_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0158730158730158, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg249_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf497', get_index_2, add, None)
        return store


buf498: SchedulerNode(ComputedBuffer)
buf498.writes = [MemoryDep(name='buf498', index=c0, size=(256,))]
buf498.unmet_dependencies = [MemoryDep(name='buf497', index=c0, size=(256,))]
buf498.met_dependencies = [StarDep(name='arg249_1')]
buf498.group.device = cpu
buf498.group.iteration = ((256,), ())
buf498.sizes = ([256], [])
buf498.mutations = ['arg249_1']
class buf498_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf497', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf498', get_index_1, load, None)
        return store


buf499: SchedulerNode(ComputedBuffer)
buf499.writes = [MemoryDep(name='buf499', index=0, size=())]
buf499.unmet_dependencies = []
buf499.met_dependencies = [MemoryDep(name='arg250_1', index=0, size=())]
buf499.group.device = cpu
buf499.group.iteration = ((), ())
buf499.sizes = ([], [])
class buf499_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg250_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf499', get_index_1, add, None)
        return store


buf500: SchedulerNode(ComputedBuffer)
buf500.writes = [MemoryDep(name='buf500', index=0, size=())]
buf500.unmet_dependencies = [MemoryDep(name='buf499', index=0, size=())]
buf500.met_dependencies = [StarDep(name='arg250_1')]
buf500.group.device = cpu
buf500.group.iteration = ((), ())
buf500.sizes = ([], [])
buf500.mutations = ['arg250_1']
class buf500_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf499', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf500', get_index_1, load, None)
        return store


buf501: SchedulerNode(ComputedBuffer)
buf501.writes = [MemoryDep(name='buf501', index=c0, size=(1024,))]
buf501.unmet_dependencies = [MemoryDep(name='buf185', index=c0, size=(1024,))]
buf501.met_dependencies = [MemoryDep(name='arg251_1', index=c0, size=(1024,))]
buf501.group.device = cpu
buf501.group.iteration = ((1024,), ())
buf501.sizes = ([1024], [])
class buf501_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg251_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf501', get_index_2, add, None)
        return store


buf502: SchedulerNode(ComputedBuffer)
buf502.writes = [MemoryDep(name='buf502', index=c0, size=(1024,))]
buf502.unmet_dependencies = [MemoryDep(name='buf501', index=c0, size=(1024,))]
buf502.met_dependencies = [StarDep(name='arg251_1')]
buf502.group.device = cpu
buf502.group.iteration = ((1024,), ())
buf502.sizes = ([1024], [])
buf502.mutations = ['arg251_1']
class buf502_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf501', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf502', get_index_1, load, None)
        return store


buf503: SchedulerNode(ComputedBuffer)
buf503.writes = [MemoryDep(name='buf503', index=c0, size=(1024,))]
buf503.unmet_dependencies = [MemoryDep(name='buf186', index=c0, size=(1024,))]
buf503.met_dependencies = [MemoryDep(name='arg252_1', index=c0, size=(1024,))]
buf503.group.device = cpu
buf503.group.iteration = ((1024,), ())
buf503.sizes = ([1024], [])
class buf503_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0158730158730158, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg252_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf503', get_index_2, add, None)
        return store


buf504: SchedulerNode(ComputedBuffer)
buf504.writes = [MemoryDep(name='buf504', index=c0, size=(1024,))]
buf504.unmet_dependencies = [MemoryDep(name='buf503', index=c0, size=(1024,))]
buf504.met_dependencies = [StarDep(name='arg252_1')]
buf504.group.device = cpu
buf504.group.iteration = ((1024,), ())
buf504.sizes = ([1024], [])
buf504.mutations = ['arg252_1']
class buf504_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf503', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf504', get_index_1, load, None)
        return store


buf505: SchedulerNode(ComputedBuffer)
buf505.writes = [MemoryDep(name='buf505', index=0, size=())]
buf505.unmet_dependencies = []
buf505.met_dependencies = [MemoryDep(name='arg253_1', index=0, size=())]
buf505.group.device = cpu
buf505.group.iteration = ((), ())
buf505.sizes = ([], [])
class buf505_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg253_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf505', get_index_1, add, None)
        return store


buf506: SchedulerNode(ComputedBuffer)
buf506.writes = [MemoryDep(name='buf506', index=0, size=())]
buf506.unmet_dependencies = [MemoryDep(name='buf505', index=0, size=())]
buf506.met_dependencies = [StarDep(name='arg253_1')]
buf506.group.device = cpu
buf506.group.iteration = ((), ())
buf506.sizes = ([], [])
buf506.mutations = ['arg253_1']
class buf506_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf505', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf506', get_index_1, load, None)
        return store


buf507: SchedulerNode(ComputedBuffer)
buf507.writes = [MemoryDep(name='buf507', index=c0, size=(256,))]
buf507.unmet_dependencies = [MemoryDep(name='buf191', index=c0, size=(256,))]
buf507.met_dependencies = [MemoryDep(name='arg254_1', index=c0, size=(256,))]
buf507.group.device = cpu
buf507.group.iteration = ((256,), ())
buf507.sizes = ([256], [])
class buf507_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg254_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf507', get_index_2, add, None)
        return store


buf508: SchedulerNode(ComputedBuffer)
buf508.writes = [MemoryDep(name='buf508', index=c0, size=(256,))]
buf508.unmet_dependencies = [MemoryDep(name='buf507', index=c0, size=(256,))]
buf508.met_dependencies = [StarDep(name='arg254_1')]
buf508.group.device = cpu
buf508.group.iteration = ((256,), ())
buf508.sizes = ([256], [])
buf508.mutations = ['arg254_1']
class buf508_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf507', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf508', get_index_1, load, None)
        return store


buf509: SchedulerNode(ComputedBuffer)
buf509.writes = [MemoryDep(name='buf509', index=c0, size=(256,))]
buf509.unmet_dependencies = [MemoryDep(name='buf192', index=c0, size=(256,))]
buf509.met_dependencies = [MemoryDep(name='arg255_1', index=c0, size=(256,))]
buf509.group.device = cpu
buf509.group.iteration = ((256,), ())
buf509.sizes = ([256], [])
class buf509_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0158730158730158, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg255_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf509', get_index_2, add, None)
        return store


buf510: SchedulerNode(ComputedBuffer)
buf510.writes = [MemoryDep(name='buf510', index=c0, size=(256,))]
buf510.unmet_dependencies = [MemoryDep(name='buf509', index=c0, size=(256,))]
buf510.met_dependencies = [StarDep(name='arg255_1')]
buf510.group.device = cpu
buf510.group.iteration = ((256,), ())
buf510.sizes = ([256], [])
buf510.mutations = ['arg255_1']
class buf510_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf509', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf510', get_index_1, load, None)
        return store


buf511: SchedulerNode(ComputedBuffer)
buf511.writes = [MemoryDep(name='buf511', index=0, size=())]
buf511.unmet_dependencies = []
buf511.met_dependencies = [MemoryDep(name='arg256_1', index=0, size=())]
buf511.group.device = cpu
buf511.group.iteration = ((), ())
buf511.sizes = ([], [])
class buf511_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg256_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf511', get_index_1, add, None)
        return store


buf512: SchedulerNode(ComputedBuffer)
buf512.writes = [MemoryDep(name='buf512', index=0, size=())]
buf512.unmet_dependencies = [MemoryDep(name='buf511', index=0, size=())]
buf512.met_dependencies = [StarDep(name='arg256_1')]
buf512.group.device = cpu
buf512.group.iteration = ((), ())
buf512.sizes = ([], [])
buf512.mutations = ['arg256_1']
class buf512_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf511', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf512', get_index_1, load, None)
        return store


buf513: SchedulerNode(ComputedBuffer)
buf513.writes = [MemoryDep(name='buf513', index=c0, size=(256,))]
buf513.unmet_dependencies = [MemoryDep(name='buf197', index=c0, size=(256,))]
buf513.met_dependencies = [MemoryDep(name='arg257_1', index=c0, size=(256,))]
buf513.group.device = cpu
buf513.group.iteration = ((256,), ())
buf513.sizes = ([256], [])
class buf513_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg257_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf513', get_index_2, add, None)
        return store


buf514: SchedulerNode(ComputedBuffer)
buf514.writes = [MemoryDep(name='buf514', index=c0, size=(256,))]
buf514.unmet_dependencies = [MemoryDep(name='buf513', index=c0, size=(256,))]
buf514.met_dependencies = [StarDep(name='arg257_1')]
buf514.group.device = cpu
buf514.group.iteration = ((256,), ())
buf514.sizes = ([256], [])
buf514.mutations = ['arg257_1']
class buf514_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf513', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf514', get_index_1, load, None)
        return store


buf515: SchedulerNode(ComputedBuffer)
buf515.writes = [MemoryDep(name='buf515', index=c0, size=(256,))]
buf515.unmet_dependencies = [MemoryDep(name='buf198', index=c0, size=(256,))]
buf515.met_dependencies = [MemoryDep(name='arg258_1', index=c0, size=(256,))]
buf515.group.device = cpu
buf515.group.iteration = ((256,), ())
buf515.sizes = ([256], [])
class buf515_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0158730158730158, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg258_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf515', get_index_2, add, None)
        return store


buf516: SchedulerNode(ComputedBuffer)
buf516.writes = [MemoryDep(name='buf516', index=c0, size=(256,))]
buf516.unmet_dependencies = [MemoryDep(name='buf515', index=c0, size=(256,))]
buf516.met_dependencies = [StarDep(name='arg258_1')]
buf516.group.device = cpu
buf516.group.iteration = ((256,), ())
buf516.sizes = ([256], [])
buf516.mutations = ['arg258_1']
class buf516_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf515', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf516', get_index_1, load, None)
        return store


buf517: SchedulerNode(ComputedBuffer)
buf517.writes = [MemoryDep(name='buf517', index=0, size=())]
buf517.unmet_dependencies = []
buf517.met_dependencies = [MemoryDep(name='arg259_1', index=0, size=())]
buf517.group.device = cpu
buf517.group.iteration = ((), ())
buf517.sizes = ([], [])
class buf517_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg259_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf517', get_index_1, add, None)
        return store


buf518: SchedulerNode(ComputedBuffer)
buf518.writes = [MemoryDep(name='buf518', index=0, size=())]
buf518.unmet_dependencies = [MemoryDep(name='buf517', index=0, size=())]
buf518.met_dependencies = [StarDep(name='arg259_1')]
buf518.group.device = cpu
buf518.group.iteration = ((), ())
buf518.sizes = ([], [])
buf518.mutations = ['arg259_1']
class buf518_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf517', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf518', get_index_1, load, None)
        return store


buf519: SchedulerNode(ComputedBuffer)
buf519.writes = [MemoryDep(name='buf519', index=c0, size=(1024,))]
buf519.unmet_dependencies = [MemoryDep(name='buf203', index=c0, size=(1024,))]
buf519.met_dependencies = [MemoryDep(name='arg260_1', index=c0, size=(1024,))]
buf519.group.device = cpu
buf519.group.iteration = ((1024,), ())
buf519.sizes = ([1024], [])
class buf519_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg260_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf519', get_index_2, add, None)
        return store


buf520: SchedulerNode(ComputedBuffer)
buf520.writes = [MemoryDep(name='buf520', index=c0, size=(1024,))]
buf520.unmet_dependencies = [MemoryDep(name='buf519', index=c0, size=(1024,))]
buf520.met_dependencies = [StarDep(name='arg260_1')]
buf520.group.device = cpu
buf520.group.iteration = ((1024,), ())
buf520.sizes = ([1024], [])
buf520.mutations = ['arg260_1']
class buf520_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf519', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf520', get_index_1, load, None)
        return store


buf521: SchedulerNode(ComputedBuffer)
buf521.writes = [MemoryDep(name='buf521', index=c0, size=(1024,))]
buf521.unmet_dependencies = [MemoryDep(name='buf204', index=c0, size=(1024,))]
buf521.met_dependencies = [MemoryDep(name='arg261_1', index=c0, size=(1024,))]
buf521.group.device = cpu
buf521.group.iteration = ((1024,), ())
buf521.sizes = ([1024], [])
class buf521_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0158730158730158, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg261_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf521', get_index_2, add, None)
        return store


buf522: SchedulerNode(ComputedBuffer)
buf522.writes = [MemoryDep(name='buf522', index=c0, size=(1024,))]
buf522.unmet_dependencies = [MemoryDep(name='buf521', index=c0, size=(1024,))]
buf522.met_dependencies = [StarDep(name='arg261_1')]
buf522.group.device = cpu
buf522.group.iteration = ((1024,), ())
buf522.sizes = ([1024], [])
buf522.mutations = ['arg261_1']
class buf522_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf521', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf522', get_index_1, load, None)
        return store


buf523: SchedulerNode(ComputedBuffer)
buf523.writes = [MemoryDep(name='buf523', index=0, size=())]
buf523.unmet_dependencies = []
buf523.met_dependencies = [MemoryDep(name='arg262_1', index=0, size=())]
buf523.group.device = cpu
buf523.group.iteration = ((), ())
buf523.sizes = ([], [])
class buf523_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg262_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf523', get_index_1, add, None)
        return store


buf524: SchedulerNode(ComputedBuffer)
buf524.writes = [MemoryDep(name='buf524', index=0, size=())]
buf524.unmet_dependencies = [MemoryDep(name='buf523', index=0, size=())]
buf524.met_dependencies = [StarDep(name='arg262_1')]
buf524.group.device = cpu
buf524.group.iteration = ((), ())
buf524.sizes = ([], [])
buf524.mutations = ['arg262_1']
class buf524_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf523', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf524', get_index_1, load, None)
        return store


buf525: SchedulerNode(ComputedBuffer)
buf525.writes = [MemoryDep(name='buf525', index=c0, size=(256,))]
buf525.unmet_dependencies = [MemoryDep(name='buf209', index=c0, size=(256,))]
buf525.met_dependencies = [MemoryDep(name='arg263_1', index=c0, size=(256,))]
buf525.group.device = cpu
buf525.group.iteration = ((256,), ())
buf525.sizes = ([256], [])
class buf525_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg263_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf525', get_index_2, add, None)
        return store


buf526: SchedulerNode(ComputedBuffer)
buf526.writes = [MemoryDep(name='buf526', index=c0, size=(256,))]
buf526.unmet_dependencies = [MemoryDep(name='buf525', index=c0, size=(256,))]
buf526.met_dependencies = [StarDep(name='arg263_1')]
buf526.group.device = cpu
buf526.group.iteration = ((256,), ())
buf526.sizes = ([256], [])
buf526.mutations = ['arg263_1']
class buf526_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf525', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf526', get_index_1, load, None)
        return store


buf527: SchedulerNode(ComputedBuffer)
buf527.writes = [MemoryDep(name='buf527', index=c0, size=(256,))]
buf527.unmet_dependencies = [MemoryDep(name='buf210', index=c0, size=(256,))]
buf527.met_dependencies = [MemoryDep(name='arg264_1', index=c0, size=(256,))]
buf527.group.device = cpu
buf527.group.iteration = ((256,), ())
buf527.sizes = ([256], [])
class buf527_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0158730158730158, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg264_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf527', get_index_2, add, None)
        return store


buf528: SchedulerNode(ComputedBuffer)
buf528.writes = [MemoryDep(name='buf528', index=c0, size=(256,))]
buf528.unmet_dependencies = [MemoryDep(name='buf527', index=c0, size=(256,))]
buf528.met_dependencies = [StarDep(name='arg264_1')]
buf528.group.device = cpu
buf528.group.iteration = ((256,), ())
buf528.sizes = ([256], [])
buf528.mutations = ['arg264_1']
class buf528_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf527', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf528', get_index_1, load, None)
        return store


buf529: SchedulerNode(ComputedBuffer)
buf529.writes = [MemoryDep(name='buf529', index=0, size=())]
buf529.unmet_dependencies = []
buf529.met_dependencies = [MemoryDep(name='arg265_1', index=0, size=())]
buf529.group.device = cpu
buf529.group.iteration = ((), ())
buf529.sizes = ([], [])
class buf529_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg265_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf529', get_index_1, add, None)
        return store


buf530: SchedulerNode(ComputedBuffer)
buf530.writes = [MemoryDep(name='buf530', index=0, size=())]
buf530.unmet_dependencies = [MemoryDep(name='buf529', index=0, size=())]
buf530.met_dependencies = [StarDep(name='arg265_1')]
buf530.group.device = cpu
buf530.group.iteration = ((), ())
buf530.sizes = ([], [])
buf530.mutations = ['arg265_1']
class buf530_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf529', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf530', get_index_1, load, None)
        return store


buf531: SchedulerNode(ComputedBuffer)
buf531.writes = [MemoryDep(name='buf531', index=c0, size=(256,))]
buf531.unmet_dependencies = [MemoryDep(name='buf215', index=c0, size=(256,))]
buf531.met_dependencies = [MemoryDep(name='arg266_1', index=c0, size=(256,))]
buf531.group.device = cpu
buf531.group.iteration = ((256,), ())
buf531.sizes = ([256], [])
class buf531_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf215', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg266_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf531', get_index_2, add, None)
        return store


buf532: SchedulerNode(ComputedBuffer)
buf532.writes = [MemoryDep(name='buf532', index=c0, size=(256,))]
buf532.unmet_dependencies = [MemoryDep(name='buf531', index=c0, size=(256,))]
buf532.met_dependencies = [StarDep(name='arg266_1')]
buf532.group.device = cpu
buf532.group.iteration = ((256,), ())
buf532.sizes = ([256], [])
buf532.mutations = ['arg266_1']
class buf532_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf531', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf532', get_index_1, load, None)
        return store


buf533: SchedulerNode(ComputedBuffer)
buf533.writes = [MemoryDep(name='buf533', index=c0, size=(256,))]
buf533.unmet_dependencies = [MemoryDep(name='buf216', index=c0, size=(256,))]
buf533.met_dependencies = [MemoryDep(name='arg267_1', index=c0, size=(256,))]
buf533.group.device = cpu
buf533.group.iteration = ((256,), ())
buf533.sizes = ([256], [])
class buf533_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0158730158730158, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg267_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf533', get_index_2, add, None)
        return store


buf534: SchedulerNode(ComputedBuffer)
buf534.writes = [MemoryDep(name='buf534', index=c0, size=(256,))]
buf534.unmet_dependencies = [MemoryDep(name='buf533', index=c0, size=(256,))]
buf534.met_dependencies = [StarDep(name='arg267_1')]
buf534.group.device = cpu
buf534.group.iteration = ((256,), ())
buf534.sizes = ([256], [])
buf534.mutations = ['arg267_1']
class buf534_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf533', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf534', get_index_1, load, None)
        return store


buf535: SchedulerNode(ComputedBuffer)
buf535.writes = [MemoryDep(name='buf535', index=0, size=())]
buf535.unmet_dependencies = []
buf535.met_dependencies = [MemoryDep(name='arg268_1', index=0, size=())]
buf535.group.device = cpu
buf535.group.iteration = ((), ())
buf535.sizes = ([], [])
class buf535_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg268_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf535', get_index_1, add, None)
        return store


buf536: SchedulerNode(ComputedBuffer)
buf536.writes = [MemoryDep(name='buf536', index=0, size=())]
buf536.unmet_dependencies = [MemoryDep(name='buf535', index=0, size=())]
buf536.met_dependencies = [StarDep(name='arg268_1')]
buf536.group.device = cpu
buf536.group.iteration = ((), ())
buf536.sizes = ([], [])
buf536.mutations = ['arg268_1']
class buf536_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf535', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf536', get_index_1, load, None)
        return store


buf537: SchedulerNode(ComputedBuffer)
buf537.writes = [MemoryDep(name='buf537', index=c0, size=(1024,))]
buf537.unmet_dependencies = [MemoryDep(name='buf221', index=c0, size=(1024,))]
buf537.met_dependencies = [MemoryDep(name='arg269_1', index=c0, size=(1024,))]
buf537.group.device = cpu
buf537.group.iteration = ((1024,), ())
buf537.sizes = ([1024], [])
class buf537_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg269_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf537', get_index_2, add, None)
        return store


buf538: SchedulerNode(ComputedBuffer)
buf538.writes = [MemoryDep(name='buf538', index=c0, size=(1024,))]
buf538.unmet_dependencies = [MemoryDep(name='buf537', index=c0, size=(1024,))]
buf538.met_dependencies = [StarDep(name='arg269_1')]
buf538.group.device = cpu
buf538.group.iteration = ((1024,), ())
buf538.sizes = ([1024], [])
buf538.mutations = ['arg269_1']
class buf538_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf537', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf538', get_index_1, load, None)
        return store


buf539: SchedulerNode(ComputedBuffer)
buf539.writes = [MemoryDep(name='buf539', index=c0, size=(1024,))]
buf539.unmet_dependencies = [MemoryDep(name='buf222', index=c0, size=(1024,))]
buf539.met_dependencies = [MemoryDep(name='arg270_1', index=c0, size=(1024,))]
buf539.group.device = cpu
buf539.group.iteration = ((1024,), ())
buf539.sizes = ([1024], [])
class buf539_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0158730158730158, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg270_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf539', get_index_2, add, None)
        return store


buf540: SchedulerNode(ComputedBuffer)
buf540.writes = [MemoryDep(name='buf540', index=c0, size=(1024,))]
buf540.unmet_dependencies = [MemoryDep(name='buf539', index=c0, size=(1024,))]
buf540.met_dependencies = [StarDep(name='arg270_1')]
buf540.group.device = cpu
buf540.group.iteration = ((1024,), ())
buf540.sizes = ([1024], [])
buf540.mutations = ['arg270_1']
class buf540_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf539', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf540', get_index_1, load, None)
        return store


buf541: SchedulerNode(ComputedBuffer)
buf541.writes = [MemoryDep(name='buf541', index=0, size=())]
buf541.unmet_dependencies = []
buf541.met_dependencies = [MemoryDep(name='arg271_1', index=0, size=())]
buf541.group.device = cpu
buf541.group.iteration = ((), ())
buf541.sizes = ([], [])
class buf541_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg271_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf541', get_index_1, add, None)
        return store


buf542: SchedulerNode(ComputedBuffer)
buf542.writes = [MemoryDep(name='buf542', index=0, size=())]
buf542.unmet_dependencies = [MemoryDep(name='buf541', index=0, size=())]
buf542.met_dependencies = [StarDep(name='arg271_1')]
buf542.group.device = cpu
buf542.group.iteration = ((), ())
buf542.sizes = ([], [])
buf542.mutations = ['arg271_1']
class buf542_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf541', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf542', get_index_1, load, None)
        return store


buf543: SchedulerNode(ComputedBuffer)
buf543.writes = [MemoryDep(name='buf543', index=c0, size=(256,))]
buf543.unmet_dependencies = [MemoryDep(name='buf227', index=c0, size=(256,))]
buf543.met_dependencies = [MemoryDep(name='arg272_1', index=c0, size=(256,))]
buf543.group.device = cpu
buf543.group.iteration = ((256,), ())
buf543.sizes = ([256], [])
class buf543_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg272_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf543', get_index_2, add, None)
        return store


buf544: SchedulerNode(ComputedBuffer)
buf544.writes = [MemoryDep(name='buf544', index=c0, size=(256,))]
buf544.unmet_dependencies = [MemoryDep(name='buf543', index=c0, size=(256,))]
buf544.met_dependencies = [StarDep(name='arg272_1')]
buf544.group.device = cpu
buf544.group.iteration = ((256,), ())
buf544.sizes = ([256], [])
buf544.mutations = ['arg272_1']
class buf544_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf543', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf544', get_index_1, load, None)
        return store


buf545: SchedulerNode(ComputedBuffer)
buf545.writes = [MemoryDep(name='buf545', index=c0, size=(256,))]
buf545.unmet_dependencies = [MemoryDep(name='buf228', index=c0, size=(256,))]
buf545.met_dependencies = [MemoryDep(name='arg273_1', index=c0, size=(256,))]
buf545.group.device = cpu
buf545.group.iteration = ((256,), ())
buf545.sizes = ([256], [])
class buf545_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0158730158730158, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg273_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf545', get_index_2, add, None)
        return store


buf546: SchedulerNode(ComputedBuffer)
buf546.writes = [MemoryDep(name='buf546', index=c0, size=(256,))]
buf546.unmet_dependencies = [MemoryDep(name='buf545', index=c0, size=(256,))]
buf546.met_dependencies = [StarDep(name='arg273_1')]
buf546.group.device = cpu
buf546.group.iteration = ((256,), ())
buf546.sizes = ([256], [])
buf546.mutations = ['arg273_1']
class buf546_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf545', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf546', get_index_1, load, None)
        return store


buf547: SchedulerNode(ComputedBuffer)
buf547.writes = [MemoryDep(name='buf547', index=0, size=())]
buf547.unmet_dependencies = []
buf547.met_dependencies = [MemoryDep(name='arg274_1', index=0, size=())]
buf547.group.device = cpu
buf547.group.iteration = ((), ())
buf547.sizes = ([], [])
class buf547_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg274_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf547', get_index_1, add, None)
        return store


buf548: SchedulerNode(ComputedBuffer)
buf548.writes = [MemoryDep(name='buf548', index=0, size=())]
buf548.unmet_dependencies = [MemoryDep(name='buf547', index=0, size=())]
buf548.met_dependencies = [StarDep(name='arg274_1')]
buf548.group.device = cpu
buf548.group.iteration = ((), ())
buf548.sizes = ([], [])
buf548.mutations = ['arg274_1']
class buf548_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf547', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf548', get_index_1, load, None)
        return store


buf549: SchedulerNode(ComputedBuffer)
buf549.writes = [MemoryDep(name='buf549', index=c0, size=(256,))]
buf549.unmet_dependencies = [MemoryDep(name='buf233', index=c0, size=(256,))]
buf549.met_dependencies = [MemoryDep(name='arg275_1', index=c0, size=(256,))]
buf549.group.device = cpu
buf549.group.iteration = ((256,), ())
buf549.sizes = ([256], [])
class buf549_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg275_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf549', get_index_2, add, None)
        return store


buf550: SchedulerNode(ComputedBuffer)
buf550.writes = [MemoryDep(name='buf550', index=c0, size=(256,))]
buf550.unmet_dependencies = [MemoryDep(name='buf549', index=c0, size=(256,))]
buf550.met_dependencies = [StarDep(name='arg275_1')]
buf550.group.device = cpu
buf550.group.iteration = ((256,), ())
buf550.sizes = ([256], [])
buf550.mutations = ['arg275_1']
class buf550_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf549', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf550', get_index_1, load, None)
        return store


buf551: SchedulerNode(ComputedBuffer)
buf551.writes = [MemoryDep(name='buf551', index=c0, size=(256,))]
buf551.unmet_dependencies = [MemoryDep(name='buf234', index=c0, size=(256,))]
buf551.met_dependencies = [MemoryDep(name='arg276_1', index=c0, size=(256,))]
buf551.group.device = cpu
buf551.group.iteration = ((256,), ())
buf551.sizes = ([256], [])
class buf551_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0158730158730158, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg276_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf551', get_index_2, add, None)
        return store


buf552: SchedulerNode(ComputedBuffer)
buf552.writes = [MemoryDep(name='buf552', index=c0, size=(256,))]
buf552.unmet_dependencies = [MemoryDep(name='buf551', index=c0, size=(256,))]
buf552.met_dependencies = [StarDep(name='arg276_1')]
buf552.group.device = cpu
buf552.group.iteration = ((256,), ())
buf552.sizes = ([256], [])
buf552.mutations = ['arg276_1']
class buf552_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf551', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf552', get_index_1, load, None)
        return store


buf553: SchedulerNode(ComputedBuffer)
buf553.writes = [MemoryDep(name='buf553', index=0, size=())]
buf553.unmet_dependencies = []
buf553.met_dependencies = [MemoryDep(name='arg277_1', index=0, size=())]
buf553.group.device = cpu
buf553.group.iteration = ((), ())
buf553.sizes = ([], [])
class buf553_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg277_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf553', get_index_1, add, None)
        return store


buf554: SchedulerNode(ComputedBuffer)
buf554.writes = [MemoryDep(name='buf554', index=0, size=())]
buf554.unmet_dependencies = [MemoryDep(name='buf553', index=0, size=())]
buf554.met_dependencies = [StarDep(name='arg277_1')]
buf554.group.device = cpu
buf554.group.iteration = ((), ())
buf554.sizes = ([], [])
buf554.mutations = ['arg277_1']
class buf554_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf553', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf554', get_index_1, load, None)
        return store


buf555: SchedulerNode(ComputedBuffer)
buf555.writes = [MemoryDep(name='buf555', index=c0, size=(1024,))]
buf555.unmet_dependencies = [MemoryDep(name='buf239', index=c0, size=(1024,))]
buf555.met_dependencies = [MemoryDep(name='arg278_1', index=c0, size=(1024,))]
buf555.group.device = cpu
buf555.group.iteration = ((1024,), ())
buf555.sizes = ([1024], [])
class buf555_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg278_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf555', get_index_2, add, None)
        return store


buf556: SchedulerNode(ComputedBuffer)
buf556.writes = [MemoryDep(name='buf556', index=c0, size=(1024,))]
buf556.unmet_dependencies = [MemoryDep(name='buf555', index=c0, size=(1024,))]
buf556.met_dependencies = [StarDep(name='arg278_1')]
buf556.group.device = cpu
buf556.group.iteration = ((1024,), ())
buf556.sizes = ([1024], [])
buf556.mutations = ['arg278_1']
class buf556_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf555', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf556', get_index_1, load, None)
        return store


buf557: SchedulerNode(ComputedBuffer)
buf557.writes = [MemoryDep(name='buf557', index=c0, size=(1024,))]
buf557.unmet_dependencies = [MemoryDep(name='buf240', index=c0, size=(1024,))]
buf557.met_dependencies = [MemoryDep(name='arg279_1', index=c0, size=(1024,))]
buf557.group.device = cpu
buf557.group.iteration = ((1024,), ())
buf557.sizes = ([1024], [])
class buf557_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0158730158730158, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg279_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf557', get_index_2, add, None)
        return store


buf558: SchedulerNode(ComputedBuffer)
buf558.writes = [MemoryDep(name='buf558', index=c0, size=(1024,))]
buf558.unmet_dependencies = [MemoryDep(name='buf557', index=c0, size=(1024,))]
buf558.met_dependencies = [StarDep(name='arg279_1')]
buf558.group.device = cpu
buf558.group.iteration = ((1024,), ())
buf558.sizes = ([1024], [])
buf558.mutations = ['arg279_1']
class buf558_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf557', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf558', get_index_1, load, None)
        return store


buf559: SchedulerNode(ComputedBuffer)
buf559.writes = [MemoryDep(name='buf559', index=0, size=())]
buf559.unmet_dependencies = []
buf559.met_dependencies = [MemoryDep(name='arg280_1', index=0, size=())]
buf559.group.device = cpu
buf559.group.iteration = ((), ())
buf559.sizes = ([], [])
class buf559_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg280_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf559', get_index_1, add, None)
        return store


buf560: SchedulerNode(ComputedBuffer)
buf560.writes = [MemoryDep(name='buf560', index=0, size=())]
buf560.unmet_dependencies = [MemoryDep(name='buf559', index=0, size=())]
buf560.met_dependencies = [StarDep(name='arg280_1')]
buf560.group.device = cpu
buf560.group.iteration = ((), ())
buf560.sizes = ([], [])
buf560.mutations = ['arg280_1']
class buf560_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf559', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf560', get_index_1, load, None)
        return store


buf561: SchedulerNode(ComputedBuffer)
buf561.writes = [MemoryDep(name='buf561', index=c0, size=(256,))]
buf561.unmet_dependencies = [MemoryDep(name='buf245', index=c0, size=(256,))]
buf561.met_dependencies = [MemoryDep(name='arg281_1', index=c0, size=(256,))]
buf561.group.device = cpu
buf561.group.iteration = ((256,), ())
buf561.sizes = ([256], [])
class buf561_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg281_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf561', get_index_2, add, None)
        return store


buf562: SchedulerNode(ComputedBuffer)
buf562.writes = [MemoryDep(name='buf562', index=c0, size=(256,))]
buf562.unmet_dependencies = [MemoryDep(name='buf561', index=c0, size=(256,))]
buf562.met_dependencies = [StarDep(name='arg281_1')]
buf562.group.device = cpu
buf562.group.iteration = ((256,), ())
buf562.sizes = ([256], [])
buf562.mutations = ['arg281_1']
class buf562_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf561', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf562', get_index_1, load, None)
        return store


buf563: SchedulerNode(ComputedBuffer)
buf563.writes = [MemoryDep(name='buf563', index=c0, size=(256,))]
buf563.unmet_dependencies = [MemoryDep(name='buf246', index=c0, size=(256,))]
buf563.met_dependencies = [MemoryDep(name='arg282_1', index=c0, size=(256,))]
buf563.group.device = cpu
buf563.group.iteration = ((256,), ())
buf563.sizes = ([256], [])
class buf563_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0158730158730158, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg282_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf563', get_index_2, add, None)
        return store


buf564: SchedulerNode(ComputedBuffer)
buf564.writes = [MemoryDep(name='buf564', index=c0, size=(256,))]
buf564.unmet_dependencies = [MemoryDep(name='buf563', index=c0, size=(256,))]
buf564.met_dependencies = [StarDep(name='arg282_1')]
buf564.group.device = cpu
buf564.group.iteration = ((256,), ())
buf564.sizes = ([256], [])
buf564.mutations = ['arg282_1']
class buf564_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf563', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf564', get_index_1, load, None)
        return store


buf565: SchedulerNode(ComputedBuffer)
buf565.writes = [MemoryDep(name='buf565', index=0, size=())]
buf565.unmet_dependencies = []
buf565.met_dependencies = [MemoryDep(name='arg283_1', index=0, size=())]
buf565.group.device = cpu
buf565.group.iteration = ((), ())
buf565.sizes = ([], [])
class buf565_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg283_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf565', get_index_1, add, None)
        return store


buf566: SchedulerNode(ComputedBuffer)
buf566.writes = [MemoryDep(name='buf566', index=0, size=())]
buf566.unmet_dependencies = [MemoryDep(name='buf565', index=0, size=())]
buf566.met_dependencies = [StarDep(name='arg283_1')]
buf566.group.device = cpu
buf566.group.iteration = ((), ())
buf566.sizes = ([], [])
buf566.mutations = ['arg283_1']
class buf566_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf565', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf566', get_index_1, load, None)
        return store


buf567: SchedulerNode(ComputedBuffer)
buf567.writes = [MemoryDep(name='buf567', index=c0, size=(256,))]
buf567.unmet_dependencies = [MemoryDep(name='buf251', index=c0, size=(256,))]
buf567.met_dependencies = [MemoryDep(name='arg284_1', index=c0, size=(256,))]
buf567.group.device = cpu
buf567.group.iteration = ((256,), ())
buf567.sizes = ([256], [])
class buf567_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg284_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf567', get_index_2, add, None)
        return store


buf568: SchedulerNode(ComputedBuffer)
buf568.writes = [MemoryDep(name='buf568', index=c0, size=(256,))]
buf568.unmet_dependencies = [MemoryDep(name='buf567', index=c0, size=(256,))]
buf568.met_dependencies = [StarDep(name='arg284_1')]
buf568.group.device = cpu
buf568.group.iteration = ((256,), ())
buf568.sizes = ([256], [])
buf568.mutations = ['arg284_1']
class buf568_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf567', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf568', get_index_1, load, None)
        return store


buf569: SchedulerNode(ComputedBuffer)
buf569.writes = [MemoryDep(name='buf569', index=c0, size=(256,))]
buf569.unmet_dependencies = [MemoryDep(name='buf252', index=c0, size=(256,))]
buf569.met_dependencies = [MemoryDep(name='arg285_1', index=c0, size=(256,))]
buf569.group.device = cpu
buf569.group.iteration = ((256,), ())
buf569.sizes = ([256], [])
class buf569_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0158730158730158, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg285_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf569', get_index_2, add, None)
        return store


buf570: SchedulerNode(ComputedBuffer)
buf570.writes = [MemoryDep(name='buf570', index=c0, size=(256,))]
buf570.unmet_dependencies = [MemoryDep(name='buf569', index=c0, size=(256,))]
buf570.met_dependencies = [StarDep(name='arg285_1')]
buf570.group.device = cpu
buf570.group.iteration = ((256,), ())
buf570.sizes = ([256], [])
buf570.mutations = ['arg285_1']
class buf570_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf569', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf570', get_index_1, load, None)
        return store


buf571: SchedulerNode(ComputedBuffer)
buf571.writes = [MemoryDep(name='buf571', index=0, size=())]
buf571.unmet_dependencies = []
buf571.met_dependencies = [MemoryDep(name='arg286_1', index=0, size=())]
buf571.group.device = cpu
buf571.group.iteration = ((), ())
buf571.sizes = ([], [])
class buf571_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg286_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf571', get_index_1, add, None)
        return store


buf572: SchedulerNode(ComputedBuffer)
buf572.writes = [MemoryDep(name='buf572', index=0, size=())]
buf572.unmet_dependencies = [MemoryDep(name='buf571', index=0, size=())]
buf572.met_dependencies = [StarDep(name='arg286_1')]
buf572.group.device = cpu
buf572.group.iteration = ((), ())
buf572.sizes = ([], [])
buf572.mutations = ['arg286_1']
class buf572_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf571', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf572', get_index_1, load, None)
        return store


buf573: SchedulerNode(ComputedBuffer)
buf573.writes = [MemoryDep(name='buf573', index=c0, size=(1024,))]
buf573.unmet_dependencies = [MemoryDep(name='buf257', index=c0, size=(1024,))]
buf573.met_dependencies = [MemoryDep(name='arg287_1', index=c0, size=(1024,))]
buf573.group.device = cpu
buf573.group.iteration = ((1024,), ())
buf573.sizes = ([1024], [])
class buf573_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg287_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf573', get_index_2, add, None)
        return store


buf574: SchedulerNode(ComputedBuffer)
buf574.writes = [MemoryDep(name='buf574', index=c0, size=(1024,))]
buf574.unmet_dependencies = [MemoryDep(name='buf573', index=c0, size=(1024,))]
buf574.met_dependencies = [StarDep(name='arg287_1')]
buf574.group.device = cpu
buf574.group.iteration = ((1024,), ())
buf574.sizes = ([1024], [])
buf574.mutations = ['arg287_1']
class buf574_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf573', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf574', get_index_1, load, None)
        return store


buf575: SchedulerNode(ComputedBuffer)
buf575.writes = [MemoryDep(name='buf575', index=c0, size=(1024,))]
buf575.unmet_dependencies = [MemoryDep(name='buf258', index=c0, size=(1024,))]
buf575.met_dependencies = [MemoryDep(name='arg288_1', index=c0, size=(1024,))]
buf575.group.device = cpu
buf575.group.iteration = ((1024,), ())
buf575.sizes = ([1024], [])
class buf575_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0158730158730158, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg288_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf575', get_index_2, add, None)
        return store


buf576: SchedulerNode(ComputedBuffer)
buf576.writes = [MemoryDep(name='buf576', index=c0, size=(1024,))]
buf576.unmet_dependencies = [MemoryDep(name='buf575', index=c0, size=(1024,))]
buf576.met_dependencies = [StarDep(name='arg288_1')]
buf576.group.device = cpu
buf576.group.iteration = ((1024,), ())
buf576.sizes = ([1024], [])
buf576.mutations = ['arg288_1']
class buf576_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf575', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf576', get_index_1, load, None)
        return store


buf577: SchedulerNode(ComputedBuffer)
buf577.writes = [MemoryDep(name='buf577', index=0, size=())]
buf577.unmet_dependencies = []
buf577.met_dependencies = [MemoryDep(name='arg289_1', index=0, size=())]
buf577.group.device = cpu
buf577.group.iteration = ((), ())
buf577.sizes = ([], [])
class buf577_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg289_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf577', get_index_1, add, None)
        return store


buf578: SchedulerNode(ComputedBuffer)
buf578.writes = [MemoryDep(name='buf578', index=0, size=())]
buf578.unmet_dependencies = [MemoryDep(name='buf577', index=0, size=())]
buf578.met_dependencies = [StarDep(name='arg289_1')]
buf578.group.device = cpu
buf578.group.iteration = ((), ())
buf578.sizes = ([], [])
buf578.mutations = ['arg289_1']
class buf578_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf577', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf578', get_index_1, load, None)
        return store


buf579: SchedulerNode(ComputedBuffer)
buf579.writes = [MemoryDep(name='buf579', index=c0, size=(512,))]
buf579.unmet_dependencies = [MemoryDep(name='buf263', index=c0, size=(512,))]
buf579.met_dependencies = [MemoryDep(name='arg290_1', index=c0, size=(512,))]
buf579.group.device = cpu
buf579.group.iteration = ((512,), ())
buf579.sizes = ([512], [])
class buf579_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg290_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf579', get_index_2, add, None)
        return store


buf580: SchedulerNode(ComputedBuffer)
buf580.writes = [MemoryDep(name='buf580', index=c0, size=(512,))]
buf580.unmet_dependencies = [MemoryDep(name='buf579', index=c0, size=(512,))]
buf580.met_dependencies = [StarDep(name='arg290_1')]
buf580.group.device = cpu
buf580.group.iteration = ((512,), ())
buf580.sizes = ([512], [])
buf580.mutations = ['arg290_1']
class buf580_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf579', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf580', get_index_1, load, None)
        return store


buf581: SchedulerNode(ComputedBuffer)
buf581.writes = [MemoryDep(name='buf581', index=c0, size=(512,))]
buf581.unmet_dependencies = [MemoryDep(name='buf264', index=c0, size=(512,))]
buf581.met_dependencies = [MemoryDep(name='arg291_1', index=c0, size=(512,))]
buf581.group.device = cpu
buf581.group.iteration = ((512,), ())
buf581.sizes = ([512], [])
class buf581_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        constant = ops.constant(64, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0158730158730158, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg291_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf581', get_index_2, add, None)
        return store


buf582: SchedulerNode(ComputedBuffer)
buf582.writes = [MemoryDep(name='buf582', index=c0, size=(512,))]
buf582.unmet_dependencies = [MemoryDep(name='buf581', index=c0, size=(512,))]
buf582.met_dependencies = [StarDep(name='arg291_1')]
buf582.group.device = cpu
buf582.group.iteration = ((512,), ())
buf582.sizes = ([512], [])
buf582.mutations = ['arg291_1']
class buf582_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf581', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf582', get_index_1, load, None)
        return store


buf583: SchedulerNode(ComputedBuffer)
buf583.writes = [MemoryDep(name='buf583', index=0, size=())]
buf583.unmet_dependencies = []
buf583.met_dependencies = [MemoryDep(name='arg292_1', index=0, size=())]
buf583.group.device = cpu
buf583.group.iteration = ((), ())
buf583.sizes = ([], [])
class buf583_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg292_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf583', get_index_1, add, None)
        return store


buf584: SchedulerNode(ComputedBuffer)
buf584.writes = [MemoryDep(name='buf584', index=0, size=())]
buf584.unmet_dependencies = [MemoryDep(name='buf583', index=0, size=())]
buf584.met_dependencies = [StarDep(name='arg292_1')]
buf584.group.device = cpu
buf584.group.iteration = ((), ())
buf584.sizes = ([], [])
buf584.mutations = ['arg292_1']
class buf584_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf583', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf584', get_index_1, load, None)
        return store


buf585: SchedulerNode(ComputedBuffer)
buf585.writes = [MemoryDep(name='buf585', index=c0, size=(512,))]
buf585.unmet_dependencies = [MemoryDep(name='buf269', index=c0, size=(512,))]
buf585.met_dependencies = [MemoryDep(name='arg293_1', index=c0, size=(512,))]
buf585.group.device = cpu
buf585.group.iteration = ((512,), ())
buf585.sizes = ([512], [])
class buf585_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg293_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf585', get_index_2, add, None)
        return store


buf586: SchedulerNode(ComputedBuffer)
buf586.writes = [MemoryDep(name='buf586', index=c0, size=(512,))]
buf586.unmet_dependencies = [MemoryDep(name='buf585', index=c0, size=(512,))]
buf586.met_dependencies = [StarDep(name='arg293_1')]
buf586.group.device = cpu
buf586.group.iteration = ((512,), ())
buf586.sizes = ([512], [])
buf586.mutations = ['arg293_1']
class buf586_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf585', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf586', get_index_1, load, None)
        return store


buf587: SchedulerNode(ComputedBuffer)
buf587.writes = [MemoryDep(name='buf587', index=c0, size=(512,))]
buf587.unmet_dependencies = [MemoryDep(name='buf270', index=c0, size=(512,))]
buf587.met_dependencies = [MemoryDep(name='arg294_1', index=c0, size=(512,))]
buf587.group.device = cpu
buf587.group.iteration = ((512,), ())
buf587.sizes = ([512], [])
class buf587_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0666666666666667, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg294_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf587', get_index_2, add, None)
        return store


buf588: SchedulerNode(ComputedBuffer)
buf588.writes = [MemoryDep(name='buf588', index=c0, size=(512,))]
buf588.unmet_dependencies = [MemoryDep(name='buf587', index=c0, size=(512,))]
buf588.met_dependencies = [StarDep(name='arg294_1')]
buf588.group.device = cpu
buf588.group.iteration = ((512,), ())
buf588.sizes = ([512], [])
buf588.mutations = ['arg294_1']
class buf588_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf587', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf588', get_index_1, load, None)
        return store


buf589: SchedulerNode(ComputedBuffer)
buf589.writes = [MemoryDep(name='buf589', index=0, size=())]
buf589.unmet_dependencies = []
buf589.met_dependencies = [MemoryDep(name='arg295_1', index=0, size=())]
buf589.group.device = cpu
buf589.group.iteration = ((), ())
buf589.sizes = ([], [])
class buf589_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg295_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf589', get_index_1, add, None)
        return store


buf590: SchedulerNode(ComputedBuffer)
buf590.writes = [MemoryDep(name='buf590', index=0, size=())]
buf590.unmet_dependencies = [MemoryDep(name='buf589', index=0, size=())]
buf590.met_dependencies = [StarDep(name='arg295_1')]
buf590.group.device = cpu
buf590.group.iteration = ((), ())
buf590.sizes = ([], [])
buf590.mutations = ['arg295_1']
class buf590_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf589', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf590', get_index_1, load, None)
        return store


buf591: SchedulerNode(ComputedBuffer)
buf591.writes = [MemoryDep(name='buf591', index=c0, size=(2048,))]
buf591.unmet_dependencies = [MemoryDep(name='buf275', index=c0, size=(2048,))]
buf591.met_dependencies = [MemoryDep(name='arg296_1', index=c0, size=(2048,))]
buf591.group.device = cpu
buf591.group.iteration = ((2048,), ())
buf591.sizes = ([2048], [])
class buf591_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg296_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf591', get_index_2, add, None)
        return store


buf592: SchedulerNode(ComputedBuffer)
buf592.writes = [MemoryDep(name='buf592', index=c0, size=(2048,))]
buf592.unmet_dependencies = [MemoryDep(name='buf591', index=c0, size=(2048,))]
buf592.met_dependencies = [StarDep(name='arg296_1')]
buf592.group.device = cpu
buf592.group.iteration = ((2048,), ())
buf592.sizes = ([2048], [])
buf592.mutations = ['arg296_1']
class buf592_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf591', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf592', get_index_1, load, None)
        return store


buf593: SchedulerNode(ComputedBuffer)
buf593.writes = [MemoryDep(name='buf593', index=c0, size=(2048,))]
buf593.unmet_dependencies = [MemoryDep(name='buf276', index=c0, size=(2048,))]
buf593.met_dependencies = [MemoryDep(name='arg297_1', index=c0, size=(2048,))]
buf593.group.device = cpu
buf593.group.iteration = ((2048,), ())
buf593.sizes = ([2048], [])
class buf593_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0666666666666667, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg297_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf593', get_index_2, add, None)
        return store


buf594: SchedulerNode(ComputedBuffer)
buf594.writes = [MemoryDep(name='buf594', index=c0, size=(2048,))]
buf594.unmet_dependencies = [MemoryDep(name='buf593', index=c0, size=(2048,))]
buf594.met_dependencies = [StarDep(name='arg297_1')]
buf594.group.device = cpu
buf594.group.iteration = ((2048,), ())
buf594.sizes = ([2048], [])
buf594.mutations = ['arg297_1']
class buf594_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf593', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf594', get_index_1, load, None)
        return store


buf595: SchedulerNode(ComputedBuffer)
buf595.writes = [MemoryDep(name='buf595', index=0, size=())]
buf595.unmet_dependencies = []
buf595.met_dependencies = [MemoryDep(name='arg298_1', index=0, size=())]
buf595.group.device = cpu
buf595.group.iteration = ((), ())
buf595.sizes = ([], [])
class buf595_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg298_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf595', get_index_1, add, None)
        return store


buf596: SchedulerNode(ComputedBuffer)
buf596.writes = [MemoryDep(name='buf596', index=0, size=())]
buf596.unmet_dependencies = [MemoryDep(name='buf595', index=0, size=())]
buf596.met_dependencies = [StarDep(name='arg298_1')]
buf596.group.device = cpu
buf596.group.iteration = ((), ())
buf596.sizes = ([], [])
buf596.mutations = ['arg298_1']
class buf596_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf595', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf596', get_index_1, load, None)
        return store


buf597: SchedulerNode(ComputedBuffer)
buf597.writes = [MemoryDep(name='buf597', index=c0, size=(2048,))]
buf597.unmet_dependencies = [MemoryDep(name='buf280', index=c0, size=(2048,))]
buf597.met_dependencies = [MemoryDep(name='arg299_1', index=c0, size=(2048,))]
buf597.group.device = cpu
buf597.group.iteration = ((2048,), ())
buf597.sizes = ([2048], [])
class buf597_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg299_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf597', get_index_2, add, None)
        return store


buf598: SchedulerNode(ComputedBuffer)
buf598.writes = [MemoryDep(name='buf598', index=c0, size=(2048,))]
buf598.unmet_dependencies = [MemoryDep(name='buf597', index=c0, size=(2048,))]
buf598.met_dependencies = [StarDep(name='arg299_1')]
buf598.group.device = cpu
buf598.group.iteration = ((2048,), ())
buf598.sizes = ([2048], [])
buf598.mutations = ['arg299_1']
class buf598_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf597', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf598', get_index_1, load, None)
        return store


buf599: SchedulerNode(ComputedBuffer)
buf599.writes = [MemoryDep(name='buf599', index=c0, size=(2048,))]
buf599.unmet_dependencies = [MemoryDep(name='buf281', index=c0, size=(2048,))]
buf599.met_dependencies = [MemoryDep(name='arg300_1', index=c0, size=(2048,))]
buf599.group.device = cpu
buf599.group.iteration = ((2048,), ())
buf599.sizes = ([2048], [])
class buf599_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0666666666666667, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg300_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf599', get_index_2, add, None)
        return store


buf600: SchedulerNode(ComputedBuffer)
buf600.writes = [MemoryDep(name='buf600', index=c0, size=(2048,))]
buf600.unmet_dependencies = [MemoryDep(name='buf599', index=c0, size=(2048,))]
buf600.met_dependencies = [StarDep(name='arg300_1')]
buf600.group.device = cpu
buf600.group.iteration = ((2048,), ())
buf600.sizes = ([2048], [])
buf600.mutations = ['arg300_1']
class buf600_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf599', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf600', get_index_1, load, None)
        return store


buf601: SchedulerNode(ComputedBuffer)
buf601.writes = [MemoryDep(name='buf601', index=0, size=())]
buf601.unmet_dependencies = []
buf601.met_dependencies = [MemoryDep(name='arg301_1', index=0, size=())]
buf601.group.device = cpu
buf601.group.iteration = ((), ())
buf601.sizes = ([], [])
class buf601_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg301_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf601', get_index_1, add, None)
        return store


buf602: SchedulerNode(ComputedBuffer)
buf602.writes = [MemoryDep(name='buf602', index=0, size=())]
buf602.unmet_dependencies = [MemoryDep(name='buf601', index=0, size=())]
buf602.met_dependencies = [StarDep(name='arg301_1')]
buf602.group.device = cpu
buf602.group.iteration = ((), ())
buf602.sizes = ([], [])
buf602.mutations = ['arg301_1']
class buf602_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf601', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf602', get_index_1, load, None)
        return store


buf603: SchedulerNode(ComputedBuffer)
buf603.writes = [MemoryDep(name='buf603', index=c0, size=(512,))]
buf603.unmet_dependencies = [MemoryDep(name='buf287', index=c0, size=(512,))]
buf603.met_dependencies = [MemoryDep(name='arg302_1', index=c0, size=(512,))]
buf603.group.device = cpu
buf603.group.iteration = ((512,), ())
buf603.sizes = ([512], [])
class buf603_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf287', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg302_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf603', get_index_2, add, None)
        return store


buf604: SchedulerNode(ComputedBuffer)
buf604.writes = [MemoryDep(name='buf604', index=c0, size=(512,))]
buf604.unmet_dependencies = [MemoryDep(name='buf603', index=c0, size=(512,))]
buf604.met_dependencies = [StarDep(name='arg302_1')]
buf604.group.device = cpu
buf604.group.iteration = ((512,), ())
buf604.sizes = ([512], [])
buf604.mutations = ['arg302_1']
class buf604_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf603', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf604', get_index_1, load, None)
        return store


buf605: SchedulerNode(ComputedBuffer)
buf605.writes = [MemoryDep(name='buf605', index=c0, size=(512,))]
buf605.unmet_dependencies = [MemoryDep(name='buf288', index=c0, size=(512,))]
buf605.met_dependencies = [MemoryDep(name='arg303_1', index=c0, size=(512,))]
buf605.group.device = cpu
buf605.group.iteration = ((512,), ())
buf605.sizes = ([512], [])
class buf605_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf288', get_index)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0666666666666667, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg303_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf605', get_index_2, add, None)
        return store


buf606: SchedulerNode(ComputedBuffer)
buf606.writes = [MemoryDep(name='buf606', index=c0, size=(512,))]
buf606.unmet_dependencies = [MemoryDep(name='buf605', index=c0, size=(512,))]
buf606.met_dependencies = [StarDep(name='arg303_1')]
buf606.group.device = cpu
buf606.group.iteration = ((512,), ())
buf606.sizes = ([512], [])
buf606.mutations = ['arg303_1']
class buf606_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf605', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf606', get_index_1, load, None)
        return store


buf607: SchedulerNode(ComputedBuffer)
buf607.writes = [MemoryDep(name='buf607', index=0, size=())]
buf607.unmet_dependencies = []
buf607.met_dependencies = [MemoryDep(name='arg304_1', index=0, size=())]
buf607.group.device = cpu
buf607.group.iteration = ((), ())
buf607.sizes = ([], [])
class buf607_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg304_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf607', get_index_1, add, None)
        return store


buf608: SchedulerNode(ComputedBuffer)
buf608.writes = [MemoryDep(name='buf608', index=0, size=())]
buf608.unmet_dependencies = [MemoryDep(name='buf607', index=0, size=())]
buf608.met_dependencies = [StarDep(name='arg304_1')]
buf608.group.device = cpu
buf608.group.iteration = ((), ())
buf608.sizes = ([], [])
buf608.mutations = ['arg304_1']
class buf608_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf607', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf608', get_index_1, load, None)
        return store


buf609: SchedulerNode(ComputedBuffer)
buf609.writes = [MemoryDep(name='buf609', index=c0, size=(512,))]
buf609.unmet_dependencies = [MemoryDep(name='buf293', index=c0, size=(512,))]
buf609.met_dependencies = [MemoryDep(name='arg305_1', index=c0, size=(512,))]
buf609.group.device = cpu
buf609.group.iteration = ((512,), ())
buf609.sizes = ([512], [])
class buf609_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg305_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf609', get_index_2, add, None)
        return store


buf610: SchedulerNode(ComputedBuffer)
buf610.writes = [MemoryDep(name='buf610', index=c0, size=(512,))]
buf610.unmet_dependencies = [MemoryDep(name='buf609', index=c0, size=(512,))]
buf610.met_dependencies = [StarDep(name='arg305_1')]
buf610.group.device = cpu
buf610.group.iteration = ((512,), ())
buf610.sizes = ([512], [])
buf610.mutations = ['arg305_1']
class buf610_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf609', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf610', get_index_1, load, None)
        return store


buf611: SchedulerNode(ComputedBuffer)
buf611.writes = [MemoryDep(name='buf611', index=c0, size=(512,))]
buf611.unmet_dependencies = [MemoryDep(name='buf294', index=c0, size=(512,))]
buf611.met_dependencies = [MemoryDep(name='arg306_1', index=c0, size=(512,))]
buf611.group.device = cpu
buf611.group.iteration = ((512,), ())
buf611.sizes = ([512], [])
class buf611_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0666666666666667, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg306_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf611', get_index_2, add, None)
        return store


buf612: SchedulerNode(ComputedBuffer)
buf612.writes = [MemoryDep(name='buf612', index=c0, size=(512,))]
buf612.unmet_dependencies = [MemoryDep(name='buf611', index=c0, size=(512,))]
buf612.met_dependencies = [StarDep(name='arg306_1')]
buf612.group.device = cpu
buf612.group.iteration = ((512,), ())
buf612.sizes = ([512], [])
buf612.mutations = ['arg306_1']
class buf612_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf611', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf612', get_index_1, load, None)
        return store


buf613: SchedulerNode(ComputedBuffer)
buf613.writes = [MemoryDep(name='buf613', index=0, size=())]
buf613.unmet_dependencies = []
buf613.met_dependencies = [MemoryDep(name='arg307_1', index=0, size=())]
buf613.group.device = cpu
buf613.group.iteration = ((), ())
buf613.sizes = ([], [])
class buf613_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg307_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf613', get_index_1, add, None)
        return store


buf614: SchedulerNode(ComputedBuffer)
buf614.writes = [MemoryDep(name='buf614', index=0, size=())]
buf614.unmet_dependencies = [MemoryDep(name='buf613', index=0, size=())]
buf614.met_dependencies = [StarDep(name='arg307_1')]
buf614.group.device = cpu
buf614.group.iteration = ((), ())
buf614.sizes = ([], [])
buf614.mutations = ['arg307_1']
class buf614_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf613', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf614', get_index_1, load, None)
        return store


buf615: SchedulerNode(ComputedBuffer)
buf615.writes = [MemoryDep(name='buf615', index=c0, size=(2048,))]
buf615.unmet_dependencies = [MemoryDep(name='buf299', index=c0, size=(2048,))]
buf615.met_dependencies = [MemoryDep(name='arg308_1', index=c0, size=(2048,))]
buf615.group.device = cpu
buf615.group.iteration = ((2048,), ())
buf615.sizes = ([2048], [])
class buf615_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf299', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg308_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf615', get_index_2, add, None)
        return store


buf616: SchedulerNode(ComputedBuffer)
buf616.writes = [MemoryDep(name='buf616', index=c0, size=(2048,))]
buf616.unmet_dependencies = [MemoryDep(name='buf615', index=c0, size=(2048,))]
buf616.met_dependencies = [StarDep(name='arg308_1')]
buf616.group.device = cpu
buf616.group.iteration = ((2048,), ())
buf616.sizes = ([2048], [])
buf616.mutations = ['arg308_1']
class buf616_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf615', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf616', get_index_1, load, None)
        return store


buf617: SchedulerNode(ComputedBuffer)
buf617.writes = [MemoryDep(name='buf617', index=c0, size=(2048,))]
buf617.unmet_dependencies = [MemoryDep(name='buf300', index=c0, size=(2048,))]
buf617.met_dependencies = [MemoryDep(name='arg309_1', index=c0, size=(2048,))]
buf617.group.device = cpu
buf617.group.iteration = ((2048,), ())
buf617.sizes = ([2048], [])
class buf617_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0666666666666667, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg309_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf617', get_index_2, add, None)
        return store


buf618: SchedulerNode(ComputedBuffer)
buf618.writes = [MemoryDep(name='buf618', index=c0, size=(2048,))]
buf618.unmet_dependencies = [MemoryDep(name='buf617', index=c0, size=(2048,))]
buf618.met_dependencies = [StarDep(name='arg309_1')]
buf618.group.device = cpu
buf618.group.iteration = ((2048,), ())
buf618.sizes = ([2048], [])
buf618.mutations = ['arg309_1']
class buf618_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf617', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf618', get_index_1, load, None)
        return store


buf619: SchedulerNode(ComputedBuffer)
buf619.writes = [MemoryDep(name='buf619', index=0, size=())]
buf619.unmet_dependencies = []
buf619.met_dependencies = [MemoryDep(name='arg310_1', index=0, size=())]
buf619.group.device = cpu
buf619.group.iteration = ((), ())
buf619.sizes = ([], [])
class buf619_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg310_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf619', get_index_1, add, None)
        return store


buf620: SchedulerNode(ComputedBuffer)
buf620.writes = [MemoryDep(name='buf620', index=0, size=())]
buf620.unmet_dependencies = [MemoryDep(name='buf619', index=0, size=())]
buf620.met_dependencies = [StarDep(name='arg310_1')]
buf620.group.device = cpu
buf620.group.iteration = ((), ())
buf620.sizes = ([], [])
buf620.mutations = ['arg310_1']
class buf620_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf619', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf620', get_index_1, load, None)
        return store


buf621: SchedulerNode(ComputedBuffer)
buf621.writes = [MemoryDep(name='buf621', index=c0, size=(512,))]
buf621.unmet_dependencies = [MemoryDep(name='buf305', index=c0, size=(512,))]
buf621.met_dependencies = [MemoryDep(name='arg311_1', index=c0, size=(512,))]
buf621.group.device = cpu
buf621.group.iteration = ((512,), ())
buf621.sizes = ([512], [])
class buf621_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg311_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf621', get_index_2, add, None)
        return store


buf622: SchedulerNode(ComputedBuffer)
buf622.writes = [MemoryDep(name='buf622', index=c0, size=(512,))]
buf622.unmet_dependencies = [MemoryDep(name='buf621', index=c0, size=(512,))]
buf622.met_dependencies = [StarDep(name='arg311_1')]
buf622.group.device = cpu
buf622.group.iteration = ((512,), ())
buf622.sizes = ([512], [])
buf622.mutations = ['arg311_1']
class buf622_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf621', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf622', get_index_1, load, None)
        return store


buf623: SchedulerNode(ComputedBuffer)
buf623.writes = [MemoryDep(name='buf623', index=c0, size=(512,))]
buf623.unmet_dependencies = [MemoryDep(name='buf306', index=c0, size=(512,))]
buf623.met_dependencies = [MemoryDep(name='arg312_1', index=c0, size=(512,))]
buf623.group.device = cpu
buf623.group.iteration = ((512,), ())
buf623.sizes = ([512], [])
class buf623_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0666666666666667, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg312_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf623', get_index_2, add, None)
        return store


buf624: SchedulerNode(ComputedBuffer)
buf624.writes = [MemoryDep(name='buf624', index=c0, size=(512,))]
buf624.unmet_dependencies = [MemoryDep(name='buf623', index=c0, size=(512,))]
buf624.met_dependencies = [StarDep(name='arg312_1')]
buf624.group.device = cpu
buf624.group.iteration = ((512,), ())
buf624.sizes = ([512], [])
buf624.mutations = ['arg312_1']
class buf624_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf623', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf624', get_index_1, load, None)
        return store


buf625: SchedulerNode(ComputedBuffer)
buf625.writes = [MemoryDep(name='buf625', index=0, size=())]
buf625.unmet_dependencies = []
buf625.met_dependencies = [MemoryDep(name='arg313_1', index=0, size=())]
buf625.group.device = cpu
buf625.group.iteration = ((), ())
buf625.sizes = ([], [])
class buf625_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg313_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf625', get_index_1, add, None)
        return store


buf626: SchedulerNode(ComputedBuffer)
buf626.writes = [MemoryDep(name='buf626', index=0, size=())]
buf626.unmet_dependencies = [MemoryDep(name='buf625', index=0, size=())]
buf626.met_dependencies = [StarDep(name='arg313_1')]
buf626.group.device = cpu
buf626.group.iteration = ((), ())
buf626.sizes = ([], [])
buf626.mutations = ['arg313_1']
class buf626_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf625', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf626', get_index_1, load, None)
        return store


buf627: SchedulerNode(ComputedBuffer)
buf627.writes = [MemoryDep(name='buf627', index=c0, size=(512,))]
buf627.unmet_dependencies = [MemoryDep(name='buf311', index=c0, size=(512,))]
buf627.met_dependencies = [MemoryDep(name='arg314_1', index=c0, size=(512,))]
buf627.group.device = cpu
buf627.group.iteration = ((512,), ())
buf627.sizes = ([512], [])
class buf627_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg314_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf627', get_index_2, add, None)
        return store


buf628: SchedulerNode(ComputedBuffer)
buf628.writes = [MemoryDep(name='buf628', index=c0, size=(512,))]
buf628.unmet_dependencies = [MemoryDep(name='buf627', index=c0, size=(512,))]
buf628.met_dependencies = [StarDep(name='arg314_1')]
buf628.group.device = cpu
buf628.group.iteration = ((512,), ())
buf628.sizes = ([512], [])
buf628.mutations = ['arg314_1']
class buf628_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf627', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf628', get_index_1, load, None)
        return store


buf629: SchedulerNode(ComputedBuffer)
buf629.writes = [MemoryDep(name='buf629', index=c0, size=(512,))]
buf629.unmet_dependencies = [MemoryDep(name='buf312', index=c0, size=(512,))]
buf629.met_dependencies = [MemoryDep(name='arg315_1', index=c0, size=(512,))]
buf629.group.device = cpu
buf629.group.iteration = ((512,), ())
buf629.sizes = ([512], [])
class buf629_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0666666666666667, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg315_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf629', get_index_2, add, None)
        return store


buf630: SchedulerNode(ComputedBuffer)
buf630.writes = [MemoryDep(name='buf630', index=c0, size=(512,))]
buf630.unmet_dependencies = [MemoryDep(name='buf629', index=c0, size=(512,))]
buf630.met_dependencies = [StarDep(name='arg315_1')]
buf630.group.device = cpu
buf630.group.iteration = ((512,), ())
buf630.sizes = ([512], [])
buf630.mutations = ['arg315_1']
class buf630_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf629', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf630', get_index_1, load, None)
        return store


buf631: SchedulerNode(ComputedBuffer)
buf631.writes = [MemoryDep(name='buf631', index=0, size=())]
buf631.unmet_dependencies = []
buf631.met_dependencies = [MemoryDep(name='arg316_1', index=0, size=())]
buf631.group.device = cpu
buf631.group.iteration = ((), ())
buf631.sizes = ([], [])
class buf631_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg316_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf631', get_index_1, add, None)
        return store


buf632: SchedulerNode(ComputedBuffer)
buf632.writes = [MemoryDep(name='buf632', index=0, size=())]
buf632.unmet_dependencies = [MemoryDep(name='buf631', index=0, size=())]
buf632.met_dependencies = [StarDep(name='arg316_1')]
buf632.group.device = cpu
buf632.group.iteration = ((), ())
buf632.sizes = ([], [])
buf632.mutations = ['arg316_1']
class buf632_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf631', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf632', get_index_1, load, None)
        return store


buf633: SchedulerNode(ComputedBuffer)
buf633.writes = [MemoryDep(name='buf633', index=c0, size=(2048,))]
buf633.unmet_dependencies = [MemoryDep(name='buf317', index=c0, size=(2048,))]
buf633.met_dependencies = [MemoryDep(name='arg317_1', index=c0, size=(2048,))]
buf633.group.device = cpu
buf633.group.iteration = ((2048,), ())
buf633.sizes = ([2048], [])
class buf633_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg317_1', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf633', get_index_2, add, None)
        return store


buf634: SchedulerNode(ComputedBuffer)
buf634.writes = [MemoryDep(name='buf634', index=c0, size=(2048,))]
buf634.unmet_dependencies = [MemoryDep(name='buf633', index=c0, size=(2048,))]
buf634.met_dependencies = [StarDep(name='arg317_1')]
buf634.group.device = cpu
buf634.group.iteration = ((2048,), ())
buf634.sizes = ([2048], [])
buf634.mutations = ['arg317_1']
class buf634_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf633', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf634', get_index_1, load, None)
        return store


buf635: SchedulerNode(ComputedBuffer)
buf635.writes = [MemoryDep(name='buf635', index=c0, size=(2048,))]
buf635.unmet_dependencies = [MemoryDep(name='buf318', index=c0, size=(2048,))]
buf635.met_dependencies = [MemoryDep(name='arg318_1', index=c0, size=(2048,))]
buf635.group.device = cpu
buf635.group.iteration = ((2048,), ())
buf635.sizes = ([2048], [])
class buf635_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf318', get_index)
        constant = ops.constant(16, torch.float32)
        div = ops.div(load, constant)
        constant_1 = ops.constant(1.0666666666666667, torch.float32)
        mul = ops.mul(div, constant_1)
        constant_2 = ops.constant(0.1, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg318_1', get_index_1)
        constant_3 = ops.constant(0.9, torch.float32)
        mul_2 = ops.mul(load_1, constant_3)
        add = ops.add(mul_1, mul_2)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf635', get_index_2, add, None)
        return store


buf636: SchedulerNode(ComputedBuffer)
buf636.writes = [MemoryDep(name='buf636', index=c0, size=(2048,))]
buf636.unmet_dependencies = [MemoryDep(name='buf635', index=c0, size=(2048,))]
buf636.met_dependencies = [StarDep(name='arg318_1')]
buf636.group.device = cpu
buf636.group.iteration = ((2048,), ())
buf636.sizes = ([2048], [])
buf636.mutations = ['arg318_1']
class buf636_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf635', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf636', get_index_1, load, None)
        return store


buf637: SchedulerNode(ComputedBuffer)
buf637.writes = [MemoryDep(name='buf637', index=0, size=())]
buf637.unmet_dependencies = []
buf637.met_dependencies = [MemoryDep(name='arg319_1', index=0, size=())]
buf637.group.device = cpu
buf637.group.iteration = ((), ())
buf637.sizes = ([], [])
class buf637_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg319_1', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf637', get_index_1, add, None)
        return store


buf638: SchedulerNode(ComputedBuffer)
buf638.writes = [MemoryDep(name='buf638', index=0, size=())]
buf638.unmet_dependencies = [MemoryDep(name='buf637', index=0, size=())]
buf638.met_dependencies = [StarDep(name='arg319_1')]
buf638.group.device = cpu
buf638.group.iteration = ((), ())
buf638.sizes = ([], [])
buf638.mutations = ['arg319_1']
class buf638_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf637', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf638', get_index_1, load, None)
        return store


