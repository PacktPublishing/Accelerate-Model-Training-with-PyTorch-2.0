buf0: ExternKernelSchedulerNode(Convolution)
buf0.writes = [StarDep(name='buf0')]
buf0.unmet_dependencies = []
buf0.met_dependencies = [StarDep(name='arg0_1'), StarDep(name='arg8_1')]
buf0.node.kernel = aten.convolution


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = [MemoryDep(name='buf1', index=c0, size=(401408,))]
buf1.unmet_dependencies = [MemoryDep(name='buf0', index=c0, size=(401408,))]
buf1.met_dependencies = [MemoryDep(name='arg1_1', index=c1, size=(16, 32, 784))]
buf1.group.device = cuda:0
buf1.group.iteration = (401408, 1)
buf1.sizes = ([16, 32, 784], [])
class buf1_loop_body:
    var_ranges = {z0: 16, z1: 32, z2: 784}
    index0 = 25088*z0 + 784*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1', get_index_2, relu, None)
        return store


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = [MemoryDep(name='buf2', index=c0, size=(100352,))]
buf2.unmet_dependencies = 
    [   MemoryDep(name='buf1', index=56*c0 + 2*c1 + 1, size=(7168, 14)),
        MemoryDep(name='buf1', index=56*c0 + 2*c1 + 28, size=(7168, 14)),
        MemoryDep(name='buf1', index=56*c0 + 2*c1 + 29, size=(7168, 14)),
        MemoryDep(name='buf1', index=56*c0 + 2*c1, size=(7168, 14))]
buf2.met_dependencies = []
buf2.group.device = cuda:0
buf2.group.iteration = (100352, 1)
buf2.sizes = ([7168, 14], [])
class buf2_loop_body:
    var_ranges = {z0: 7168, z1: 14}
    index0 = 56*z0 + 2*z1
    index1 = 56*z0 + 2*z1 + 1
    index2 = 56*z0 + 2*z1 + 28
    index3 = 56*z0 + 2*z1 + 29
    index4 = 14*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf1', get_index_2)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf1', get_index_3)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf2', get_index_4, maximum_2, None)
        return store


buf3: ExternKernelSchedulerNode(Convolution)
buf3.writes = [StarDep(name='buf3')]
buf3.unmet_dependencies = [StarDep(name='buf2')]
buf3.met_dependencies = [StarDep(name='arg2_1')]
buf3.node.kernel = aten.convolution


buf4: SchedulerNode(ComputedBuffer)
buf4.writes = [MemoryDep(name='buf4', index=c0, size=(200704,))]
buf4.unmet_dependencies = [MemoryDep(name='buf3', index=c0, size=(200704,))]
buf4.met_dependencies = [MemoryDep(name='arg3_1', index=c1, size=(16, 64, 196))]
buf4.group.device = cuda:0
buf4.group.iteration = (200704, 1)
buf4.sizes = ([16, 64, 196], [])
class buf4_loop_body:
    var_ranges = {z0: 16, z1: 64, z2: 196}
    index0 = 12544*z0 + 196*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg3_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf4', get_index_2, relu, None)
        return store


buf5: SchedulerNode(ComputedBuffer)
buf5.writes = [MemoryDep(name='buf5', index=c0, size=(50176,))]
buf5.unmet_dependencies = 
    [   MemoryDep(name='buf4', index=28*c0 + 2*c1 + 1, size=(7168, 7)),
        MemoryDep(name='buf4', index=28*c0 + 2*c1 + 14, size=(7168, 7)),
        MemoryDep(name='buf4', index=28*c0 + 2*c1 + 15, size=(7168, 7)),
        MemoryDep(name='buf4', index=28*c0 + 2*c1, size=(7168, 7))]
buf5.met_dependencies = []
buf5.group.device = cuda:0
buf5.group.iteration = (50176, 1)
buf5.sizes = ([7168, 7], [])
class buf5_loop_body:
    var_ranges = {z0: 7168, z1: 7}
    index0 = 28*z0 + 2*z1
    index1 = 28*z0 + 2*z1 + 1
    index2 = 28*z0 + 2*z1 + 14
    index3 = 28*z0 + 2*z1 + 15
    index4 = 7*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf4', get_index_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf4', get_index_2)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf4', get_index_3)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf5', get_index_4, maximum_2, None)
        return store


buf6: ExternKernelSchedulerNode(ExternKernelOut)
buf6.writes = [StarDep(name='buf6')]
buf6.unmet_dependencies = [StarDep(name='buf5')]
buf6.met_dependencies = [StarDep(name='arg4_1'), StarDep(name='arg5_1')]
buf6.node.kernel = extern_kernels.addmm


buf7: ExternKernelSchedulerNode(ExternKernelOut)
buf7.writes = [StarDep(name='buf7')]
buf7.unmet_dependencies = [StarDep(name='buf6')]
buf7.met_dependencies = [StarDep(name='arg6_1'), StarDep(name='arg7_1')]
buf7.node.kernel = extern_kernels.addmm


