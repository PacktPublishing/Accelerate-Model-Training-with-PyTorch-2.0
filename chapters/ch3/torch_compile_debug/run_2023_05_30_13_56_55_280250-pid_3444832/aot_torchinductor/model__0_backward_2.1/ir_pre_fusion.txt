buf0: ExternKernelSchedulerNode(ExternKernelOut)
buf0.writes = [StarDep(name='buf0')]
buf0.unmet_dependencies = []
buf0.met_dependencies = [StarDep(name='permute_2'), StarDep(name='tangents_1')]
buf0.node.kernel = extern_kernels.mm


buf1: ExternKernelSchedulerNode(ExternKernelOut)
buf1.writes = [StarDep(name='buf1')]
buf1.unmet_dependencies = []
buf1.met_dependencies = [StarDep(name='addmm'), StarDep(name='tangents_1')]
buf1.node.kernel = extern_kernels.mm


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = 
    [   MemoryDep(name='buf2', index=c0, size=(10, 64)),
        MemoryDep(name='buf2', index=c0, size=(10,))]
buf2.unmet_dependencies = []
buf2.met_dependencies = [MemoryDep(name='tangents_1', index=c0 + 10*c1, size=(10, 64))]
buf2.group.device = cuda:0
buf2.group.iteration = (10, 64)
buf2.sizes = ([10], [64])
class buf2_loop_body:
    var_ranges = {z0: 10, z1: 64}
    index0 = z0 + 10*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_1', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf2', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf3: ExternKernelSchedulerNode(ExternKernelOut)
buf3.writes = [StarDep(name='buf3')]
buf3.unmet_dependencies = [StarDep(name='buf0')]
buf3.met_dependencies = [StarDep(name='permute_6')]
buf3.node.kernel = extern_kernels.mm


buf4: ExternKernelSchedulerNode(ExternKernelOut)
buf4.writes = [StarDep(name='buf4')]
buf4.unmet_dependencies = [StarDep(name='buf0')]
buf4.met_dependencies = [StarDep(name='view')]
buf4.node.kernel = extern_kernels.mm


buf5: SchedulerNode(ComputedBuffer)
buf5.writes = 
    [   MemoryDep(name='buf5', index=c0, size=(512, 64)),
        MemoryDep(name='buf5', index=c0, size=(512,))]
buf5.unmet_dependencies = [MemoryDep(name='buf0', index=c0 + 512*c1, size=(512, 64))]
buf5.met_dependencies = []
buf5.group.device = cuda:0
buf5.group.iteration = (512, 64)
buf5.sizes = ([512], [64])
class buf5_loop_body:
    var_ranges = {z0: 512, z1: 64}
    index0 = z0 + 512*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf5', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf6: SchedulerNode(ComputedBuffer)
buf6.writes = [MemoryDep(name='buf6', index=c0, size=(802816,))]
buf6.unmet_dependencies = [MemoryDep(name='buf3', index=7*(tmp23) + (tmp26) + 49*c0, size=(4096, 196))]
buf6.met_dependencies = 
    [   MemoryDep(name='getitem_3', index=7*(tmp23) + (tmp26) + 49*c0, size=(4096, 196)),
        MemoryDep(name='relu_1', index=c0, size=(802816,))]
buf6.group.device = cuda:0
buf6.group.iteration = (802816, 1)
buf6.sizes = ([4096, 14, 14], [])
class buf6_loop_body:
    var_ranges = {z0: 4096, z1: 14, z2: 14}
    index0 = 196*z0 + 14*z1 + z2
    index1 = 14*z1 + z2
    index2 = z1//2
    index3 = z2//2
    index4 = z1//2 + 1
    index5 = z2//2 + 1
    index6 = 7*indirect0 + indirect1 + 49*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu_1', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int32)
        get_index_4 = self.get_index('index4')
        index_expr_3 = ops.index_expr(get_index_4, torch.int32)
        get_index_5 = self.get_index('index5')
        index_expr_4 = ops.index_expr(get_index_5, torch.int32)
        constant_2 = ops.constant(0, torch.int32)
        maximum = ops.maximum(index_expr_1, constant_2)
        constant_3 = ops.constant(0, torch.int32)
        maximum_1 = ops.maximum(index_expr_2, constant_3)
        constant_4 = ops.constant(7, torch.int32)
        minimum = ops.minimum(index_expr_3, constant_4)
        constant_5 = ops.constant(7, torch.int32)
        minimum_1 = ops.minimum(index_expr_4, constant_5)
        constant_6 = ops.constant(0, torch.int32)
        add = ops.add(maximum, constant_6)
        constant_7 = ops.constant(0, torch.int32)
        add_1 = ops.add(maximum_1, constant_7)
        constant_8 = ops.constant(1, torch.int32)
        sub = ops.sub(minimum, constant_8)
        minimum_2 = ops.minimum(add, sub)
        set_indirect0 = self.set_indirect0(minimum_2)
        constant_9 = ops.constant(1, torch.int32)
        sub_1 = ops.sub(minimum_1, constant_9)
        minimum_3 = ops.minimum(add_1, sub_1)
        set_indirect1 = self.set_indirect1(minimum_3)
        get_index_6 = self.get_index('index6')
        load_1 = ops.load('getitem_3', get_index_6)
        get_index_7 = self.get_index('index6')
        load_2 = ops.load('buf3', get_index_7)
        eq = ops.eq(load_1, index_expr)
        constant_10 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, load_2, constant_10)
        where_1 = ops.where(le, constant_1, where)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf6', get_index_8, where_1, None)
        return store


buf7: SchedulerNode(ComputedBuffer)
buf7.writes = 
    [   MemoryDep(name='buf7', index=c0, size=(128, 6272)),
        MemoryDep(name='buf7', index=c0, size=(128,))]
buf7.unmet_dependencies = [   MemoryDep(name='buf6', index=401408*c0 + 196*c1 + 12544*(c2//196) + ModularIndexing(c2, 1, 196), size=(2, 64, 6272))]
buf7.met_dependencies = []
buf7.group.device = cuda:0
buf7.group.iteration = (128, 6272)
buf7.sizes = ([2, 64], [6272])
class buf7_loop_body:
    var_ranges = {z0: 2, z1: 64, z2: 6272}
    index0 = 401408*z0 + 196*z1 + 12544*(z2//196) + ModularIndexing(z2, 1, 196)
    index1 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf7', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf8: SchedulerNode(ComputedBuffer)
buf8.writes = 
    [   MemoryDep(name='buf8', index=c0, size=(64, 2)),
        MemoryDep(name='buf8', index=c0, size=(64,))]
buf8.unmet_dependencies = [MemoryDep(name='buf7', index=c0 + 64*c1, size=(64, 2))]
buf8.met_dependencies = []
buf8.group.device = cuda:0
buf8.group.iteration = (64, 2)
buf8.sizes = ([64], [2])
class buf8_loop_body:
    var_ranges = {z0: 64, z1: 2}
    index0 = z0 + 64*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf8', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf9: ExternKernelSchedulerNode(FallbackKernel)
buf9.writes = [StarDep(name='buf9')]
buf9.unmet_dependencies = [StarDep(name='buf6')]
buf9.met_dependencies = [StarDep(name='getitem'), StarDep(name='primals_3')]
buf9.node.kernel = aten.convolution_backward


buf10: ExternKernelSchedulerNode(MultiOutput)
buf10.writes = [StarDep(name='buf10')]
buf10.unmet_dependencies = [StarDep(name='buf9')]
buf10.met_dependencies = []
buf10.node.kernel = None


buf11: ExternKernelSchedulerNode(MultiOutput)
buf11.writes = [StarDep(name='buf11')]
buf11.unmet_dependencies = [StarDep(name='buf9')]
buf11.met_dependencies = []
buf11.node.kernel = None


buf12: SchedulerNode(ComputedBuffer)
buf12.writes = [MemoryDep(name='buf12', index=c0, size=(1605632,))]
buf12.unmet_dependencies = [MemoryDep(name='buf10', index=14*(tmp23) + (tmp26) + 196*c0, size=(2048, 784))]
buf12.met_dependencies = 
    [   MemoryDep(name='getitem_1', index=14*(tmp23) + (tmp26) + 196*c0, size=(2048, 784)),
        MemoryDep(name='relu', index=c0, size=(1605632,))]
buf12.group.device = cuda:0
buf12.group.iteration = (1605632, 1)
buf12.sizes = ([2048, 28, 28], [])
class buf12_loop_body:
    var_ranges = {z0: 2048, z1: 28, z2: 28}
    index0 = 784*z0 + 28*z1 + z2
    index1 = 28*z1 + z2
    index2 = z1//2
    index3 = z2//2
    index4 = z1//2 + 1
    index5 = z2//2 + 1
    index6 = 14*indirect0 + indirect1 + 196*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('relu', get_index)
        constant = ops.constant(0, torch.float32)
        le = ops.le(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        get_index_3 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_3, torch.int32)
        get_index_4 = self.get_index('index4')
        index_expr_3 = ops.index_expr(get_index_4, torch.int32)
        get_index_5 = self.get_index('index5')
        index_expr_4 = ops.index_expr(get_index_5, torch.int32)
        constant_2 = ops.constant(0, torch.int32)
        maximum = ops.maximum(index_expr_1, constant_2)
        constant_3 = ops.constant(0, torch.int32)
        maximum_1 = ops.maximum(index_expr_2, constant_3)
        constant_4 = ops.constant(14, torch.int32)
        minimum = ops.minimum(index_expr_3, constant_4)
        constant_5 = ops.constant(14, torch.int32)
        minimum_1 = ops.minimum(index_expr_4, constant_5)
        constant_6 = ops.constant(0, torch.int32)
        add = ops.add(maximum, constant_6)
        constant_7 = ops.constant(0, torch.int32)
        add_1 = ops.add(maximum_1, constant_7)
        constant_8 = ops.constant(1, torch.int32)
        sub = ops.sub(minimum, constant_8)
        minimum_2 = ops.minimum(add, sub)
        set_indirect0 = self.set_indirect0(minimum_2)
        constant_9 = ops.constant(1, torch.int32)
        sub_1 = ops.sub(minimum_1, constant_9)
        minimum_3 = ops.minimum(add_1, sub_1)
        set_indirect1 = self.set_indirect1(minimum_3)
        get_index_6 = self.get_index('index6')
        load_1 = ops.load('getitem_1', get_index_6)
        get_index_7 = self.get_index('index6')
        load_2 = ops.load('buf10', get_index_7)
        eq = ops.eq(load_1, index_expr)
        constant_10 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, load_2, constant_10)
        where_1 = ops.where(le, constant_1, where)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf12', get_index_8, where_1, None)
        return store


buf13: SchedulerNode(ComputedBuffer)
buf13.writes = 
    [   MemoryDep(name='buf13', index=c0, size=(224, 7168)),
        MemoryDep(name='buf13', index=c0, size=(224,))]
buf13.unmet_dependencies = [   MemoryDep(name='buf12', index=784*c1 + 25088*((7168*c0 + c2)//784) + ModularIndexing(c2, 1, 28) + 28*ModularIndexing(7168*c0 + c2, 28, 28), size=(7, 32, 7168))]
buf13.met_dependencies = []
buf13.group.device = cuda:0
buf13.group.iteration = (224, 7168)
buf13.sizes = ([7, 32], [7168])
class buf13_loop_body:
    var_ranges = {z0: 7, z1: 32, z2: 7168}
    index0 = 784*z1 + 25088*((7168*z0 + z2)//784) + ModularIndexing(z2, 1, 28) + 28*ModularIndexing(7168*z0 + z2, 28, 28)
    index1 = 32*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf13', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf14: SchedulerNode(ComputedBuffer)
buf14.writes = 
    [   MemoryDep(name='buf14', index=c0, size=(32, 7)),
        MemoryDep(name='buf14', index=c0, size=(32,))]
buf14.unmet_dependencies = [MemoryDep(name='buf13', index=c0 + 32*c1, size=(32, 7))]
buf14.met_dependencies = []
buf14.group.device = cuda:0
buf14.group.iteration = (32, 7)
buf14.sizes = ([32], [7])
class buf14_loop_body:
    var_ranges = {z0: 32, z1: 7}
    index0 = z0 + 32*z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf14', torch.float32, torch.float32, 'sum', get_index_1, load)
        return reduction


buf15: ExternKernelSchedulerNode(FallbackKernel)
buf15.writes = [StarDep(name='buf15')]
buf15.unmet_dependencies = [StarDep(name='buf12')]
buf15.met_dependencies = [StarDep(name='primals_1'), StarDep(name='primals_9')]
buf15.node.kernel = aten.convolution_backward


buf16: ExternKernelSchedulerNode(MultiOutput)
buf16.writes = [StarDep(name='buf16')]
buf16.unmet_dependencies = [StarDep(name='buf15')]
buf16.met_dependencies = []
buf16.node.kernel = None


